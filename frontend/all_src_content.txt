// File: src/App.css

/* #root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
} */

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


// End of File: src/App.css
//--------------------------------------------------

// File: src/App.jsx

// src/App.jsx
import React from 'react';
import { AuthProvider } from './context/AuthContext.jsx';
import { NotificationProvider } from './context/NotificationContext.jsx';
import { CartProvider } from './context/CartContext.jsx';
import AppRouter from './routes/AppRoutes.jsx';
import './App.css'; // Assuming you have this file for global app styles

function App() {
  return (
    <NotificationProvider> {/* Ensure this is uncommented */}
      <AuthProvider>       {/* Ensure this is uncommented */}
        <CartProvider>     {/* Ensure this is uncommented */}
          <AppRouter />
        </CartProvider>
      </AuthProvider>
    </NotificationProvider>
  );
}

export default App;

// End of File: src/App.jsx
//--------------------------------------------------

// File: src/api/adminApi.js

// src/api/adminApi.js
import { apiService } from './apiService.js'; // Supozojmë helper-in gjenerik

// --- Mock Data Stores (nga output-i i Admin App.jsx i Gemini-t) ---
// Hiqi këto kur të lidhesh me API-në reale.
// let mockApiUsersDataForAdminPanel = [
//     { id: 1, username: "johndoe", email: "john@example.com", role: "CUSTOMER", status: "ACTIVE", date_joined: "2023-01-15T10:00:00Z" },
//     { id: 2, username: "janerestaurant", email: "jane@restaurant.com", role: "RESTAURANT_OWNER", status: "ACTIVE", date_joined: "2023-02-20T11:30:00Z" },
//     { id: 3, username: "delivercharlie", email: "charlie@delivery.co", role: "DELIVERY_PERSONNEL", status: "SUSPENDED", date_joined: "2023-03-10T09:15:00Z" },
//     { id: 4, username: "adminuser", email: "admin@fooddash.com", role: "ADMIN", status: "ACTIVE", date_joined: "2023-01-01T08:00:00Z" },
//     { id: 5, username: "pendingapproval", email: "pending@example.com", role: "RESTAURANT_OWNER", status: "PENDING_APPROVAL", date_joined: "2024-05-20T12:00:00Z" },
//     { id: 6, username: "owner_bob", email: "bob@owner.com", role: "RESTAURANT_OWNER", status: "ACTIVE", date_joined: "2022-11-10T08:00:00Z"},
// ];
// let nextUserIdForAdminPanel = mockApiUsersDataForAdminPanel.length > 0 ? Math.max(...mockApiUsersDataForAdminPanel.map(u => u.id)) + 1 : 1;

// let mockApiRestaurantsDataForAdminPanel = [
//     { id: 1, name: "Luigi's Pizzeria", address: "123 Pizza St", phone: "555-1234", image: "https://placehold.co/100x100/E81123/white?text=Pizza", categories: [{ id: 1, name: "Italian" }, {id: 2, name: "Pizza"}], owner: 2, owner_details: { id: 2, username: "janerestaurant" }, is_active: true, is_approved: true, date_created: "2023-03-01T14:00:00Z" },
//     { id: 2, name: "Burger Queen", address: "456 Burger Ln", phone: "555-5678", image: "https://placehold.co/100x100/F7630C/white?text=Burger", categories: [{ id: 3, name: "Burgers" }], owner: 6, owner_details: { id: 6, username: "owner_bob" }, is_active: false, is_approved: true, date_created: "2023-04-15T10:00:00Z" },
//     { id: 3, name: "Sushi Spot", address: "789 Fish Rd", phone: "555-9012", image: "https://placehold.co/100x100/0078D4/white?text=Sushi", categories: [{ id: 4, name: "Japanese" }, {id: 5, name: "Sushi"}], owner: null, owner_details: null, is_active: false, is_approved: false, date_created: "2024-05-01T09:00:00Z" },
// ];
// let nextRestaurantIdForAdminPanel = mockApiRestaurantsDataForAdminPanel.length > 0 ? Math.max(...mockApiRestaurantsDataForAdminPanel.map(r => r.id)) + 1 : 1;

// let mockRestaurantCategoriesForAdminPanel = [
//     { id: 1, name: "Italian" }, { id: 2, name: "Pizza" }, { id: 3, name: "Burgers" },
//     { id: 4, name: "Japanese" }, { id: 5, name: "Sushi" }, { id: 6, name: "Fast Food"}
// ];
// let nextRestaurantCategoryIdForAdminPanel = mockRestaurantCategoriesForAdminPanel.length > 0 ? Math.max(...mockRestaurantCategoriesForAdminPanel.map(c => c.id)) + 1 : 1;
// --- Fundi i Mock Data ---

// const MOCK_API_DELAY_ADMIN_PANEL = 500; // No longer needed for real API

export const adminApi = {
  // --- User CRUD ---
  fetchAllUsers: async () => { // Token is handled by apiService
    console.log("ADMIN API: Fetching all users");
    return apiService.request('/admin/users/'); // Example real endpoint
  },
  createUser: async (userData) => { // Token is handled by apiService
    console.log("ADMIN API: Creating user:", userData);
    // Ensure userData includes is_staff, is_available_for_delivery if set from UserFormModal
    return apiService.request('/admin/users/', { method: 'POST', body: JSON.stringify(userData) });
  },
  updateUser: async (userId, userData) => { // Token is handled by apiService
    console.log("ADMIN API: Updating user:", userId, userData);
    // Ensure userData includes is_staff, is_available_for_delivery if set from UserFormModal
    // Email should not be in userData if it's readOnly for edit
    return apiService.request(`/admin/users/${userId}/`, { method: 'PATCH', body: JSON.stringify(userData) });
  },
  deleteUser: async (userId) => { // Token is handled by apiService
    console.log("ADMIN API: Deleting user:", userId);
    return apiService.request(`/admin/users/${userId}/`, { method: 'DELETE' });
  },
  resetUserPasswordAdmin: async (userId) => { // Token is handled by apiService
    console.log("ADMIN API: Resetting password for user:", userId);
    // Backend needs an endpoint for this, e.g., /api/admin/users/{user_id}/reset-password/
    return apiService.request(`/admin/users/${userId}/reset-password/`, { method: 'POST' });
  },

  // --- Restaurant CRUD ---
  fetchAllRestaurants: async () => { // Token is handled by apiService
    console.log("ADMIN API: Fetching all restaurants");
    return apiService.request('/restaurants/'); // Assuming a general endpoint, admin backend might have /api/admin/restaurants/
  },
  fetchPotentialOwners: async () => { // Token is handled by apiService
    console.log("ADMIN API: Fetching potential owners (RESTAURANT_OWNER, ADMIN)");
    // Backend should support filtering by multiple roles if needed, or fetch all and filter on client (less ideal)
    // Example: /api/users/?role__in=RESTAURANT_OWNER,ADMIN
    return apiService.request('/users/?role__in=RESTAURANT_OWNER,ADMIN');
  },
  createRestaurant: async (restaurantData, imageFile = null) => { // Token is handled by apiService
    console.log("ADMIN API: Creating restaurant:", restaurantData);
    const finalPayload = { ...restaurantData };
    delete finalPayload.imageFile; // Remove the temporary key

    if (imageFile) {
        const formData = new FormData();
        Object.keys(finalPayload).forEach(key => {
            if (finalPayload[key] !== null && finalPayload[key] !== undefined) {
                 if (key === 'category_ids' && Array.isArray(finalPayload[key])) {
                    finalPayload[key].forEach(id => formData.append('category_ids', id));
                } else {
                    formData.append(key, finalPayload[key]);
                }
            }
        });
        formData.append('image', imageFile, imageFile.name);
        return apiService.requestWithFormData('/restaurants/', formData, { method: 'POST' });
    } else {
        return apiService.request('/restaurants/', { method: 'POST', body: JSON.stringify(finalPayload) });
    }
  },
  updateRestaurant: async (restaurantId, restaurantData, imageFile = null) => { // Token is handled by apiService
    console.log("ADMIN API: Updating restaurant:", restaurantId, restaurantData);
    const finalPayload = { ...restaurantData };
    delete finalPayload.imageFile; // Remove the temporary key

    if (imageFile) {
        const formData = new FormData();
        Object.keys(finalPayload).forEach(key => {
            if (finalPayload[key] !== null && finalPayload[key] !== undefined) {
                if (key === 'category_ids' && Array.isArray(finalPayload[key])) {
                    finalPayload[key].forEach(id => formData.append('category_ids', id));
                } else {
                    formData.append(key, finalPayload[key]);
                }
            }
        });
        formData.append('image', imageFile, imageFile.name);
        return apiService.requestWithFormData(`/restaurants/${restaurantId}/`, formData, { method: 'PATCH' });
    } else {
        return apiService.request(`/restaurants/${restaurantId}/`, { method: 'PATCH', body: JSON.stringify(finalPayload) });
    }
  },
  // deleteRestaurant: async (restaurantId, token) => { /* ... */ },

  approveRestaurant: async (restaurantId) => { // Token is handled by apiService
    console.log("ADMIN API: Approving restaurant:", restaurantId);
    // Backend needs an endpoint for this, e.g., /api/admin/restaurants/{restaurant_id}/approve/
    return apiService.request(`/admin/restaurants/${restaurantId}/approve/`, { method: 'POST' });
  },

  toggleRestaurantActiveStatus: async (restaurantId, isActive) => { // Token is handled by apiService
    console.log(`ADMIN API: Setting restaurant ${restaurantId} active status to:`, isActive);
    // Backend might expect PATCH on the restaurant resource with { is_active: isActive }
    // or a dedicated endpoint /api/admin/restaurants/{restaurant_id}/toggle-active/
    return apiService.request(`/restaurants/${restaurantId}/`, { 
        method: 'PATCH', 
        body: JSON.stringify({ is_active: isActive }) 
    });
  },

  // Placeholder for fetching all restaurant categories (global ones)
  fetchAllRestaurantCategories: async () => { // Token is handled by apiService
    console.log("ADMIN API: Fetching all global restaurant categories");
    return apiService.request('/cuisine-types/'); // Assuming global endpoint
  },

  // --- Platform Settings ---
  fetchPlatformSettings: async () => {
    return apiService.request('/admin/platform-settings/');
  },
  updatePlatformSettings: async (settingsData) => {
    return apiService.request('/admin/platform-settings/', {
      method: 'PATCH', // Or POST if it's a create/replace operation
      body: JSON.stringify(settingsData),
    });
  },
  
  // --- Admin Orders ---
  getAllOrders: async (params) => { // params = { page, search, status }
    return apiService.request('/admin/orders/', { params });
  },
  updateOrderStatus: async (orderId, newStatus) => {
    return apiService.request(`/admin/orders/${orderId}/update-status/`, {
        method: 'PATCH',
        body: JSON.stringify({ status: newStatus })
    });
  },

  // --- Admin Dashboard/Overview ---
  fetchAdminOverviewStats: async () => {
    return apiService.request('/admin/overview-stats/');
  },
  fetchAdminRecentActivities: async () => {
    return apiService.request('/admin/recent-activities/');
  }
};

// End of File: src/api/adminApi.js
//--------------------------------------------------

// File: src/api/apiService.js

// src/api/apiService.js
const API_BASE_URL = 'http://localhost:8000/api'; 

export const apiService = {
  getAuthToken: () => localStorage.getItem('authToken'), // Changed from 'accessToken' to 'authToken' to match AuthContext
  setToken: (token) => { // Added to match AuthContext
    // This is a simplified setter, AuthContext handles localStorage
    // This is mainly for apiService internal use if needed, or for direct calls outside of AuthContext lifecycle
    // For now, it's not strictly necessary if AuthContext is the sole manager of the token in localStorage
  },
  clearToken: () => { // Added to match AuthContext
    // Similar to setToken, for internal consistency if needed
  },

  request: async (endpoint, options = {}) => {
    const token = apiService.getAuthToken();
    const headers = {
      // Content-Type will be set conditionally below
      ...options.headers,
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const config = {
      ...options,
      headers,
    };

    // Set Content-Type only if body exists and is not FormData
    if (options.body && !(options.body instanceof FormData)) {
      config.headers['Content-Type'] = 'application/json';
      // Ensure body is stringified if it's an object (common mistake)
      if (typeof options.body === 'object' && options.body !== null) {
        config.body = JSON.stringify(options.body);
      }
    }
    // If options.body is FormData, browser sets Content-Type automatically.

    try {
      console.log(`API Request: ${options.method || 'GET'} ${API_BASE_URL}${endpoint}`, { headers: config.headers, bodyProvided: !!options.body });
      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);

      let responseData;

      if (response.status === 204) { // No Content
        return null; 
      }

      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
          responseData = await response.json();
      } else {
          const textResponse = await response.text();
          console.warn(`API Warning: Endpoint ${endpoint} returned non-JSON response (status ${response.status}). Body: ${textResponse.substring(0, 500)}...`);
          responseData = { 
              detail: `Përgjigje e papritur nga serveri (Status: ${response.status}). Ju lutem provoni përsëri ose kontaktoni suportin nëse problemi vazhdon.`,
              _rawResponse: textResponse 
          };
          if (response.status === 401 || response.status === 403) {
             if (textResponse && textResponse.length < 200 && !textResponse.toLowerCase().includes('<html')) {
                responseData.detail = textResponse;
             }
          }
      }

      if (!response.ok) { 
        const message = responseData?.detail || responseData?.error || (typeof responseData === 'string' ? responseData : `Kërkesa dështoi me statusin ${response.status}`);
        console.error(`API Error ${response.status} for ${API_BASE_URL}${endpoint}:`, message, responseData);
        // Attach responseData to the error object for more context in calling functions
        const error = new Error(message);
        error.response = responseData; // Attach the full response data
        error.status = response.status; // Attach the status code
        throw error;
      }
      return responseData;

    } catch (error) {
      console.error(`Network or parsing error for ${API_BASE_URL}${endpoint}:`, error);
      const errorMessage = error instanceof Error ? error.message : 'Gabim i panjohur rrjeti.';
      // Propagate the enriched error if it came from the !response.ok block
      if (error.response && error.status) {
        throw error;
      }
      throw new Error(errorMessage);
    }
  },

  requestWithFormData: async (endpoint, formData, options = {}) => {
    const token = apiService.getAuthToken();
    const headers = {
        // Do NOT set 'Content-Type': 'multipart/form-data', browser does it.
        ...options.headers,
    };
    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    try {
        console.log(`API FormData Request: ${options.method || 'POST'} ${API_BASE_URL}${endpoint}`);
        const response = await fetch(`${API_BASE_URL}${endpoint}`, {
            method: options.method || 'POST', // Default to POST for FormData
            headers,
            body: formData,
            ...options, // Spread other options like signal for AbortController
        });

        if (response.status === 204) return null;
        
        let responseData;
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
            responseData = await response.json();
        } else {
            const textResponse = await response.text();
            console.warn(`API FormData Warning: Endpoint ${endpoint} returned non-JSON response (status ${response.status}). Body: ${textResponse.substring(0, 500)}...`);
            responseData = { 
                detail: `Përgjigje e papritur nga serveri pas ngarkimit të skedarit (Status: ${response.status}).`,
                _rawResponse: textResponse
            };
             if (response.status === 401 || response.status === 403) {
                 if (textResponse && textResponse.length < 200 && !textResponse.toLowerCase().includes('<html')) {
                    responseData.detail = textResponse;
                 }
             }
        }

        if (!response.ok) {
            const message = responseData?.detail || `Kërkesa me FormData dështoi me statusin ${response.status}`;
            console.error(`API FormData Error ${response.status} for ${API_BASE_URL}${endpoint}:`, message, responseData);
            const error = new Error(message);
            error.response = responseData;
            error.status = response.status;
            throw error;
        }
        return responseData;
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Gabim i panjohur rrjeti gjatë kërkesës me FormData.';
        console.error(`Network or FormData error for ${API_BASE_URL}${endpoint}:`, error);
        if (error.response && error.status) {
            throw error;
        }
        throw new Error(errorMessage);
    }
  }
};

// End of File: src/api/apiService.js
//--------------------------------------------------

// File: src/api/authApi.js

// src/api/authApi.js
import { apiService } from './apiService.js';

export const authApi = {
  login: async (credentials) => {
    // Credentials duhet të jetë një objekt { email, password }
    // Backend-i pret { "email": "...", "password": "..." }
    // apiService.request do ta stringify këtë objekt dhe do të vendosë Content-Type: application/json
    console.log('authApi.login: Dërgohen kredencialet:', credentials);
    return apiService.request('/auth/login/', { // NDRYSHUAR NGA /auth/token/
      method: 'POST',
      body: credentials, // apiService do ta bëjë JSON.stringify(credentials)
    });
  },

  register: async (userData) => {
    // userData nga frontend (p.sh. RegisterPage.jsx) duhet të jetë: 
    // { username (përdoret si first_name+last_name kombinim te disa vende, por backend pret fushat veç), 
    //   email, password, password_confirm, role, first_name, last_name, phone_number }
    
    const payload = {
        email: userData.email,
        first_name: userData.first_name,
        last_name: userData.last_name,
        password: userData.password,
        password_confirm: userData.password_confirm || userData.password, // Sigurohu që forma e dërgon këtë
        role: userData.role || "CUSTOMER", 
        phone_number: userData.phone_number || null,
        // profile_picture: ... // File upload trajtohet ndryshe
    };
    console.log('AUTH API (Real): Attempting registration with payload:', payload);
    return apiService.request('/auth/register/', { 
        method: 'POST', 
        body: JSON.stringify(payload) 
    });
  },

  fetchMe: async () => {
    // Nuk ka nevojë për token këtu, apiService e menaxhon atë
    return apiService.request('/auth/me/', { method: 'GET' });
  },

  // Funksion i ri për admin login, nëse endpointi është ndryshe
  adminLogin: async (credentials) => {
    console.log('authApi.adminLogin: Dërgohen kredencialet:', credentials);
    // Supozojmë se përdor të njëjtin endpoint tokeni por mund të ketë logjikë shtesë
    // ose një endpoint të dedikuar si '/auth/admin-token/'
    // Përderisa backend-i ka /api/auth/login/ për të gjithë, e përdorim këtë.
    return apiService.request('/auth/login/', { // NDRYSHUAR NGA /auth/token/
      method: 'POST',
      body: credentials,
    });
  },

  // Funksion për ndryshimin e fjalëkalimit
  changePassword: async (passwordData) => {
    // passwordData duhet të ketë fushat e nevojshme si currentPassword, newPassword, etj.
    console.log('AUTH API (Real): Attempting password change with data:', passwordData);
    return apiService.request('/auth/change-password/', { 
        method: 'POST', 
        body: JSON.stringify(passwordData) 
    });
  },
};

// End of File: src/api/authApi.js
//--------------------------------------------------

// File: src/api/courierApi.js

// src/api/courierApi.js
import { apiService } from './apiService.js'; // Sigurohu që ky path është korrekt

export const courierApi = {
  // Veprimet e shoferit mbi profilin e tij (p.sh. disponueshmëria)
  // Këto zakonisht do të shkonin te një DriverProfileViewSet ose UserMeAPIView i zgjeruar
  updateDriverAvailability: async (is_available) => {
    // Supozojmë një endpoint te UserMeAPIView ose një @action specifik te një DriverProfileViewSet
    // ku backend-i e di se cili shofer po bën kërkesën nga token-i.
    console.log(`COURIER_API (Real): Setting availability to ${is_available}`);
    return apiService.request(`/auth/me/set-availability/`, { // SHEMBULL ENDPOINT - KRIJOJE!
        method: 'PATCH', 
        body: JSON.stringify({ is_available }) 
    });
  },

  // Veprimet mbi porositë/dërgesat
  getAvailableTasks: async () => {
    console.log("COURIER_API (Real): Fetching available tasks for logged-in driver");
    // Backend-i duhet të kthejë porositë që janë READY_FOR_PICKUP dhe që nuk kanë shofer,
    // ose që përputhen me kriteret e shoferit (p.sh., lokacioni).
    return apiService.request('/orders/available-for-driver/'); // SHEMBULL ENDPOINT - KRIJOJE!
  },

  getMyCurrentActiveTask: async () => { 
    console.log(`COURIER_API (Real): Fetching current active task for logged-in driver`);
    // Backend-i kthen porosinë aktive (CONFIRMED, PICKED_UP, ON_THE_WAY) për shoferin e kyçur.
    // Mund të jetë një order i vetëm ose një array bosh.
    return apiService.request('/orders/my-active-delivery/'); // SHEMBULL ENDPOINT - KRIJOJE!
  },

  acceptDeliveryTask: async (orderId) => { 
    console.log(`COURIER_API (Real): Logged-in driver accepting task ${orderId}`);
    // Backend-i cakton request.user (shoferin) te kjo porosi dhe ndryshon statusin.
    return apiService.request(`/orders/${orderId}/accept-delivery/`, { // @action te OrderViewSet - KRIJOJE!
      method: 'PATCH', 
      // Body mund të jetë bosh, backend-i e merr shoferin nga request.user
    });
  },

  updateDeliveryStatus: async (orderId, newStatus) => { 
    console.log(`COURIER_API (Real): Updating order ${orderId} to status ${newStatus} by driver`);
    // Përdor @action specifik te OrderViewSet për shoferin
    return apiService.request(`/orders/${orderId}/update-status-driver/`, { 
        method: 'PATCH', 
        body: JSON.stringify({ status: newStatus }) 
    });
  },

  getDriverDeliveryHistory: async () => { 
    console.log(`COURIER_API (Real): Fetching delivery history for logged-in driver`);
    // OrderViewSet.get_queryset() tashmë duhet të filtrojë bazuar në shoferin e kyçur
    // dhe të kthejë vetëm porositë me statuse finale.
    return apiService.request('/orders/?status__in=DELIVERED,FAILED_DELIVERY,CANCELLED_BY_RESTAURANT,CANCELLED_BY_USER'); 
    // Ose një endpoint specifik /orders/my-delivery-history/
  },
};

// End of File: src/api/courierApi.js
//--------------------------------------------------

// File: src/api/customerApi.js

// src/api/customerApi.js
import { apiService } from './apiService.js';

export const customerApi = {
  fetchActiveRestaurants: async () => {
    return apiService.request('/restaurants/');
  },
  fetchRestaurantById: async (restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/`);
  },
  fetchMenuCategoriesWithItems: async (restaurantId) => { // Renamed from fetchMenuItemsForRestaurant for clarity
    return apiService.request(`/restaurants/${restaurantId}/menu-categories/`); // Assuming this returns categories with items
  },
  fetchRestaurantReviews: async (restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/reviews/`);
  },
  submitRestaurantReview: async (restaurantId, reviewData) => {
    return apiService.request(`/restaurants/${restaurantId}/reviews/submit/`, { // Adjusted endpoint
      method: 'POST',
      body: reviewData,
    });
  },

  // --- Cart Operations ---
  fetchUserCart: async () => {
    console.log('CUSTOMER API (Real): Fetching user cart from backend. Attempting to request /cart/my-cart/'); // ADD THIS LOG
    return apiService.request('/cart/my-cart/');
  },
  addItemToCart: async (menuItemId, quantity) => {
    return apiService.request('/cart/add-item/', {
      method: 'POST',
      body: { menu_item_id: menuItemId, quantity },
    });
  },
  updateCartItemQuantity: async (cartItemId, newQuantity) => {
    // This URL should match the backend's updated @action url_path
    // e.g., /api/cart/update-item/{item_pk}/
    return apiService.request(`/cart/update-item/${cartItemId}/`, {
      method: 'PATCH',
      body: { quantity: newQuantity }, // Ensure backend expects { "quantity": X }
    });
  },
  removeCartItem: async (cartItemId) => {
    // This URL should match the backend's updated @action url_path
    // e.g., /api/cart/remove-item/{item_pk}/
    return apiService.request(`/cart/remove-item/${cartItemId}/`, {
      method: 'DELETE',
    });
  },
  clearUserCart: async () => {
    return apiService.request('/cart/clear/', {
      method: 'POST', // Or DELETE, depending on backend implementation
    });
  },

  // --- User Profile & Addresses ---
  fetchUserProfile: async () => {
    return apiService.request('/auth/users/me/');
  },
  updateUserProfile: async (userData) => {
    return apiService.request('/auth/users/me/', {
      method: 'PATCH', // or PUT
      body: userData,
    });
  },
  fetchUserAddresses: async () => {
    console.log("customerApi.fetchUserAddresses called, will request '/addresses/'"); // VERIFIKO QE ESHTE KETU
    return apiService.request('/addresses/');
  },
  createUserAddress: async (addressData) => {
    return apiService.request('/addresses/', {
      method: 'POST',
      body: addressData, // Assuming apiService handles JSON.stringify if needed
    });
  },
  updateUserAddress: async (addressId, addressData) => {
    return apiService.request(`/addresses/${addressId}/`, {
      method: 'PATCH', // or PUT
      body: addressData, // Assuming apiService handles JSON.stringify if needed
    });
  },
  deleteUserAddress: async (addressId) => {
    return apiService.request(`/addresses/${addressId}/`, {
      method: 'DELETE',
    });
  },

  // --- Order Operations ---
  createOrder: async (orderData) => {
    // orderData should include: restaurant_id, delivery_address_id, payment_method, delivery_address_notes
    return apiService.request('/orders/create/', { // Assuming a dedicated create endpoint
      method: 'POST',
      body: orderData,
    });
  },
  fetchUserOrders: async () => {
    return apiService.request('/orders/'); // Backend should filter by user
  },
  fetchOrderDetails: async (orderId) => {
    return apiService.request(`/orders/${orderId}/`);
  },
};

// End of File: src/api/customerApi.js
//--------------------------------------------------

// File: src/api/restaurantApi.js

// src/api/restaurantApi.js
import { apiService } from './apiService.js';

export const restaurantApi = {
  fetchRestaurantDetails: async (restaurantId) => { // Kjo duhet të jetë ID e restorantit nga context/url
    return apiService.request(`/restaurants/${restaurantId}/`);
  },

  fetchAllRestaurantCategoriesGlobal: async () => {
    return apiService.request('/cuisine-types/');
  },

  updateRestaurantDetails: async (restaurantId, detailsData, imageFile = null) => {
    // Backend (RestaurantDetailSerializer) pret JSON, por për ImageField duhet FormData.
    // Kjo kërkon që backend-i të jetë fleksibël ose të kemi dy endpoint-e/metoda.
    // Për momentin, nëse ka imageFile, do të përdorim FormData. Përndryshe JSON.
    
    if (imageFile) {
        const formData = new FormData();
        // Shto të dhënat e tjera (përveç main_image sepse ajo do jetë file)
        Object.keys(detailsData).forEach(key => {
            if (key === 'cuisine_type_ids' && Array.isArray(detailsData[key])) {
                 detailsData[key].forEach(id => formData.append('cuisine_type_ids', id));
            } else if (key !== 'main_image_url_placeholder' && key !== 'main_image' && detailsData[key] !== null && detailsData[key] !== undefined) {
                 formData.append(key, detailsData[key]);
            }
        });
        formData.append('main_image', imageFile, imageFile.name);
        
        console.log("Restaurant API: Updating details WITH IMAGE for", restaurantId);
        // Duhet një version i apiService.request që dërgon FormData (pa Content-Type JSON)
        return apiService.requestWithFormData(`/restaurants/${restaurantId}/`, formData, { method: 'PATCH'});

    } else {
        // Dërgo JSON nëse nuk ka foto të re
        const payload = { ...detailsData };
        // Hiq fushat që nuk duhet t'i dërgojmë ose që janë vetëm për frontend
        delete payload.imageFile; 
        // Backend pret cuisine_type_ids për many-to-many, jo cuisine_types (objekte)
        // Sigurohu që payload.cuisine_type_ids është array i PK-ve.
        
        console.log("Restaurant API: Updating details (JSON) for", restaurantId, "Payload:", payload);
        return apiService.request(`/restaurants/${restaurantId}/`, { 
          method: 'PATCH', 
          body: JSON.stringify(payload) 
        });
    }
  },

  setOpeningHours: async (restaurantId, hoursDataArray) => {
    // Thirrje individuale për çdo ditë (supozojmë se OperatingHoursViewSet është i thjeshtë)
    // Kjo është më pak eficiente se një batch update, por më e lehtë me ViewSet standard.
    // Backend-i duhet të ketë PUT/PATCH/DELETE për /restaurants/{pk}/operating-hours/{id}/
    // dhe POST për /restaurants/{pk}/operating-hours/
    
    const results = [];
    for (const hourEntry of hoursDataArray) {
        const payload = {
            day_of_week: hourEntry.day_of_week,
            open_time: hourEntry.is_closed ? null : (hourEntry.open_time?.includes(':') ? hourEntry.open_time : `${hourEntry.open_time}:00`),
            close_time: hourEntry.is_closed ? null : (hourEntry.close_time?.includes(':') ? hourEntry.close_time : `${hourEntry.close_time}:00`),
            is_closed: hourEntry.is_closed,
        };
        try {
            if (hourEntry.id) { // Përditëso orarin ekzistues
                results.push(await apiService.request(`/restaurants/${restaurantId}/operating-hours/${hourEntry.id}/`, {
                    method: 'PATCH', body: JSON.stringify(payload)
                }));
            } else if (!hourEntry.is_closed && payload.open_time && payload.close_time) { // Krijo orar të ri vetëm nëse nuk është i mbyllur dhe ka orë
                results.push(await apiService.request(`/restaurants/${restaurantId}/operating-hours/`, {
                    method: 'POST', body: JSON.stringify(payload)
                }));
            } else if (hourEntry.is_closed && !hourEntry.id) { // Krijo një hyrje "e mbyllur" nëse nuk ekziston
                 results.push(await apiService.request(`/restaurants/${restaurantId}/operating-hours/`, {
                    method: 'POST', body: JSON.stringify(payload)
                }));
            }
            // Rasti kur është i mbyllur dhe ka ID por duhet të fshihet (ose thjesht update is_closed)
            // Për thjeshtësi, këtu vetëm krijojmë/përditësojmë. Fshirja e hyrjeve individuale kërkon logjikë shtesë.
        } catch (error) {
            console.error(`Restaurant API: Error saving opening hour for day ${hourEntry.day_of_week}:`, error);
            results.push({ error: true, message: `Gabim për ditën ${hourEntry.day_of_week}: ${error.message}`});
        }
    }
    // Kontrollo 'results' për gabime individuale nëse dëshiron
    return { success: !results.some(r => r.error), message: "Orari u procesua." }; // Përgjigje e përgjithshme
  },

  fetchRestaurantOrders: async (restaurantId, tokenProvided) => { // Tokeni tani merret nga apiService brenda, por mund ta kalosh
    if (!restaurantId) {
        console.error("restaurantApi.fetchRestaurantOrders: restaurantId is required.");
        return Promise.reject(new Error("Restaurant ID is required to fetch orders."));
    }
    // Backend OrderViewSet.get_queryset() do të filtrojë bazuar në pronarin e kyçur,
    // OSE nëse frontend-i dërgon ?restaurant_id=X, ai do të përdoret nga admini.
    // Për pronarin, ?restaurant_id=X do të sigurojë që ai po kërkon vetëm për restorantin e tij.
    return apiService.request(`/orders/?restaurant_id=${restaurantId}`); 
    // NESE `get_queryset` te OrderViewSet mbështetet vetëm te `restaurant__owner=user` për pronarët,
    // atehere `?restaurant_id=${restaurantId}` është redundant por nuk bën dëm,
    // madje e bën më eksplicite për adminin.
  },
  updateOrderStatus: async (orderId, newStatus, tokenProvided) => { // tokenProvided është opsional, apiService e menaxhon
    // Përdor action-in specifik te OrderViewSet për restorantin
    return apiService.request(`/orders/${orderId}/update-status-restaurant/`, {
      method: 'PATCH', 
      body: JSON.stringify({ status: newStatus }) 
    });
  },

  // --- Menu Management ---
  fetchMenuCategories: async (restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/menu-categories/`);
  },
  createMenuCategory: async (categoryData, restaurantId) => { 
    // categoryData: { name, description, display_order }
    return apiService.request(`/restaurants/${restaurantId}/menu-categories/`, { 
      method: 'POST', body: JSON.stringify(categoryData) 
    });
  },
  updateMenuCategory: async (categoryId, categoryData, restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/menu-categories/${categoryId}/`, { 
      method: 'PATCH', body: JSON.stringify(categoryData) 
    });
  },
  deleteMenuCategory: async (categoryId, restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/menu-categories/${categoryId}/`, { method: 'DELETE' });
  },

  fetchMenuItems: async (restaurantId) => { // Ky endpoint kthen të gjithë artikujt e restorantit
    return apiService.request(`/restaurants/${restaurantId}/menu-items/`);
  },
  createMenuItem: async (itemData, restaurantId, imageFile = null) => {
    // itemData duhet të përmbajë: { name, description, price, category (ID), is_available }
    // Backend MenuItemSerializer pret 'category' si PK.
    
    if (imageFile) {
        const formData = new FormData();
        Object.keys(itemData).forEach(key => {
            if (key !== 'image' && itemData[key] !== null && itemData[key] !== undefined) { // 'image' do jetë file
                 formData.append(key, itemData[key]);
            }
        });
        formData.append('image', imageFile, imageFile.name);
        console.log("Restaurant API: Creating menu item WITH IMAGE for restaurant", restaurantId);
        // Ky endpoint është nested direkt te restoranti, jo te kategoria, por serializeri pret 'category' ID
        return apiService.requestWithFormData(`/restaurants/${restaurantId}/menu-items/`, formData, { method: 'POST' });
    } else {
        console.log("Restaurant API: Creating menu item (JSON) for restaurant", restaurantId, "Payload:", itemData);
        return apiService.request(`/restaurants/${restaurantId}/menu-items/`, { 
          method: 'POST', body: JSON.stringify(itemData)
        });
    }
  },
  updateMenuItem: async (itemId, itemData, restaurantId, imageFile = null) => {
    if (imageFile) {
        const formData = new FormData();
         Object.keys(itemData).forEach(key => {
            if (key !== 'image' && itemData[key] !== null && itemData[key] !== undefined) {
                 formData.append(key, itemData[key]);
            }
        });
        formData.append('image', imageFile, imageFile.name);
        console.log("Restaurant API: Updating menu item WITH IMAGE", itemId, "for restaurant", restaurantId);
        return apiService.requestWithFormData(`/restaurants/${restaurantId}/menu-items/${itemId}/`, formData, { method: 'PATCH'});
    } else {
        const payload = { ...itemData };
        delete payload.imageFile; // Nëse ka ardhur nga forma
        console.log("Restaurant API: Updating menu item (JSON)", itemId, "for restaurant", restaurantId, "Payload:", payload);
        return apiService.request(`/restaurants/${restaurantId}/menu-items/${itemId}/`, { 
          method: 'PATCH', body: JSON.stringify(payload) 
        });
    }
  },
  deleteMenuItem: async (itemId, restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/menu-items/${itemId}/`, { method: 'DELETE' });
  },

  // --- Reviews ---
  fetchReviewsForRestaurant: async (restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/reviews/`); 
  },
  submitReviewReply: async (reviewId, replyText, restaurantId) => { // Kjo duhet të jetë replyToReview
    // Korrigjo emrin e funksionit nëse është e nevojshme, p.sh. në:
    // replyToReview: async (restaurantId, reviewId, replyText) => { ... }
    // Ose endpointi të jetë /restaurants/{restaurantId}/reviews/{reviewId}/reply/
    return apiService.request(`/restaurants/${restaurantId}/reviews/${reviewId}/reply/`, {
        method: 'POST',
        body: JSON.stringify({ text: replyText })
    });
  },

  // --- Analytics ---
  fetchRestaurantAnalytics: async (restaurantId) => {
    return apiService.request(`/restaurants/${restaurantId}/analytics-summary/`);
  }
};

// End of File: src/api/restaurantApi.js
//--------------------------------------------------

// File: src/components/Button.jsx

// src/components/Button.jsx
import React from 'react';
import { Loader2 } from 'lucide-react'; // Assuming you use lucide-react for loader

// Define or import your style objects/functions if they are complex
const baseStyle = "inline-flex items-center justify-center rounded-md font-semibold focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-slate-900 transition-colors duration-150";

const sizeStyles = {
  sm: 'px-3 py-1.5 text-xs',
  md: 'px-4 py-2 text-sm',
  lg: 'px-6 py-2.5 text-base',
  xl: 'px-7 py-3 text-lg',
  icon: 'p-2', // For icon-only buttons
};

const variantStyles = {
  primary: 'bg-primary-600 text-white hover:bg-primary-700 focus-visible:ring-primary-500 disabled:bg-primary-300 dark:disabled:bg-primary-700 dark:disabled:text-primary-500',
  secondary: 'bg-secondary-500 text-white hover:bg-secondary-600 focus-visible:ring-secondary-400 disabled:bg-secondary-300',
  danger: 'bg-red-600 text-white hover:bg-red-700 focus-visible:ring-red-500 disabled:bg-red-300',
  warning: 'bg-yellow-500 text-white hover:bg-yellow-600 focus-visible:ring-yellow-400 disabled:bg-yellow-300',
  success: 'bg-green-600 text-white hover:bg-green-700 focus-visible:ring-green-500 disabled:bg-green-300',
  light: 'bg-gray-100 text-gray-700 hover:bg-gray-200 focus-visible:ring-gray-300 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600',
  ghost: 'text-primary-600 hover:bg-primary-50 focus-visible:ring-primary-500 dark:text-primary-400 dark:hover:bg-primary-500/10',
  link: 'text-primary-600 hover:text-primary-700 underline focus-visible:ring-primary-500 dark:text-primary-400 dark:hover:text-primary-300',
  outline: 'border border-primary-500 text-primary-600 hover:bg-primary-50 focus-visible:ring-primary-500 dark:border-primary-400 dark:text-primary-400 dark:hover:bg-primary-500/10',
};


const Button = ({ 
    onClick, 
    children, 
    variant = 'primary', 
    size = 'md', 
    className = '', 
    disabled = false, 
    type = "button",
    isLoading = false,
    iconLeft: IconLeft, // Expect a component
    iconRight: IconRight, // Expect a component
    iconLeftClassName = "w-4 h-4", // Default icon class
    iconRightClassName = "w-4 h-4", // Default icon class
    fullWidth = false,
    // ... any other props you might have
}) => {
    const currentDisabled = disabled || isLoading;

    return (
        <button
            type={type}
            onClick={onClick}
            disabled={currentDisabled}
            className={`
                ${baseStyle} 
                ${sizeStyles[size]} 
                ${variantStyles[variant]} 
                ${fullWidth ? 'w-full' : ''}
                ${className} 
                ${currentDisabled ? 'cursor-not-allowed opacity-70' : ''}
            `}
        >
            {isLoading && <Loader2 className={`w-4 h-4 animate-spin ${children ? 'mr-2' : ''}`} />}
            {IconLeft && !isLoading && <IconLeft className={`${iconLeftClassName} ${children ? 'mr-2' : ''}`} />}
            {children}
            {IconRight && !isLoading && <IconRight className={`${iconRightClassName} ${children ? 'ml-2' : ''}`} />}
        </button>
    );
};
export default Button;

// End of File: src/components/Button.jsx
//--------------------------------------------------

// File: src/components/ConfirmationModal.jsx

// src/components/ConfirmationModal.jsx
import React from 'react';
import ModalShell from './ModalShell.jsx';
import Button from './Button.jsx';
import { Loader2 } from 'lucide-react'; // For loading state

const ConfirmationModal = ({ 
    isOpen, 
    onClose, 
    onConfirm, 
    title, 
    message, 
    confirmText = "Confirm", 
    cancelText = "Cancel", 
    isLoading = false,
    confirmButtonVariant = "danger" // 'danger', 'primary', 'success' etc.
}) => {
    return (
        <ModalShell isOpen={isOpen} onClose={onClose} title={title} size="sm">
            <p className="text-sm text-gray-600 mb-6">{message}</p>
            <div className="flex justify-end space-x-3">
                <Button variant="secondary" onClick={onClose} disabled={isLoading}>
                    {cancelText}
                </Button>
                <Button 
                    variant={confirmButtonVariant} 
                    onClick={onConfirm} 
                    disabled={isLoading}
                    isLoading={isLoading} // Pass isLoading to Button component
                >
                    {/* Button component will handle rendering loader if isLoading is true */}
                    {confirmText}
                </Button>
            </div>
        </ModalShell>
    );
};
export default ConfirmationModal;

// End of File: src/components/ConfirmationModal.jsx
//--------------------------------------------------

// File: src/components/LoadingFallback.jsx

// src/components/LoadingFallback.jsx
import React from 'react';

const LoadingFallback = () => (
  <div className="flex justify-center items-center h-screen w-screen bg-gray-100 dark:bg-gray-900">
    <div className="animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-primary-500"></div>
    <p className="ml-4 text-lg text-gray-700 dark:text-gray-300">Duke ngarkuar...</p>
  </div>
);

export default LoadingFallback;

// End of File: src/components/LoadingFallback.jsx
//--------------------------------------------------

// File: src/components/Logo.jsx

// frontend/src/components/Logo.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { SparklesIcon } from '@heroicons/react/24/outline'; // Ose cilado ikonë që dëshiron

const Logo = ({ className = '', textClassName = '', iconClassName = '' }) => {
  return (
    <Link 
      to="/" // Ose path-i kryesor për rolin përkatës
      className={`flex-shrink-0 flex items-center gap-2 hover:opacity-90 transition-opacity ${className}`}
    >
      <SparklesIcon className={`h-8 w-auto text-yellow-300 ${iconClassName}`} /> {/* Përshtat madhësinë dhe ngjyrën */}
      <span className={`text-2xl font-bold text-white ${textClassName}`}> {/* Përshtat ngjyrën e tekstit */}
        Food<span className="text-yellow-300">Dash</span>
      </span>
    </Link>
  );
};

export default Logo;

// End of File: src/components/Logo.jsx
//--------------------------------------------------

// File: src/components/ModalShell.jsx

// src/components/ModalShell.jsx
import React from 'react';
import { XMarkIcon } from '@heroicons/react/24/outline'; // Importing XMarkIcon for the close button

const ModalShell = ({ isOpen, onClose, title, children, size = "md", footerContent }) => {
    if (!isOpen) return null;

    const sizeClasses = {
        sm: "max-w-sm",
        md: "max-w-md",
        lg: "max-w-lg",
        xl: "max-w-xl",
        "2xl": "max-w-2xl",
        "3xl": "max-w-3xl",
        "4xl": "max-w-4xl",
        full: "max-w-full mx-4 sm:mx-auto"
    };
    
    // Add keyframes for modal animation if not already in your global CSS
    // You can put this in your main CSS file or a global style component
    // @keyframes modalShow {
    //   0% { transform: scale(0.95); opacity: 0; }
    //   100% { transform: scale(1); opacity: 1; }
    // }
    // .animate-modalShow { animation: modalShow 0.2s ease-out forwards; }


    return (
        <div 
            className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4 transition-opacity duration-300 ease-in-out" 
            onClick={onClose} // Close when clicking overlay
        >
            <div 
                className={`bg-white dark:bg-slate-800 rounded-xl shadow-2xl m-4 flex flex-col ${sizeClasses[size]} w-full max-h-[90vh] sm:max-h-[85vh] transform transition-all duration-300 ease-in-out scale-95 opacity-0 animate-modalShow`}
                onClick={(e) => e.stopPropagation()} // Prevent close when clicking inside modal
            >
                <div className="flex justify-between items-center p-4 sm:p-6 border-b border-gray-200 dark:border-slate-700">
                    <h3 className="text-lg sm:text-xl font-semibold text-gray-800 dark:text-white">{title}</h3>
                    <button 
                        onClick={onClose} 
                        className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors p-1 rounded-full hover:bg-gray-100 dark:hover:bg-slate-700"
                        aria-label="Close modal"
                    >
                        <XMarkIcon className="w-5 h-5 sm:w-6 sm:h-6" /> 
                    </button>
                </div>
                <div className="p-4 sm:p-6 overflow-y-auto flex-grow">
                    {children}
                </div>
                {footerContent && (
                    <div className="p-4 sm:p-6 border-t border-gray-200 dark:border-slate-600 bg-gray-50 dark:bg-slate-700/30 rounded-b-xl">
                        {footerContent}
                    </div>
                )}
            </div>
        </div>
    );
};

export default ModalShell;

// End of File: src/components/ModalShell.jsx
//--------------------------------------------------

// File: src/components/ProtectedRoute.jsx

// src/components/ProtectedRoute.jsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';

const ProtectedRoute = ({ children, roles, redirectPath = '/auth/login' }) => {
  const { isAuthenticated, user, isLoading } = useAuth();
  const location = useLocation();

  if (isLoading) {
    // Shfaq një tregues ngarkimi ndërsa gjendja e autentikimit verifikohet
    return (
      <div className="flex justify-center items-center h-screen w-screen bg-gray-100 dark:bg-gray-900">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-500"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    // Përdoruesi nuk është i kyçur, ridrejtoje te faqja e kyçjes
    // Ruaj vendndodhjen aktuale që të mund të kthehemi pas kyçjes
    return <Navigate to={redirectPath} state={{ from: location }} replace />;
  }

  // Përdoruesi është i kyçur, kontrollo rolet nëse janë specifikuar
  if (roles && roles.length > 0) {
    const userHasRequiredRole = user && roles.includes(user.role?.toUpperCase()); // Sigurohu që krahasimi i roleve është case-insensitive ose normalizo
    if (!userHasRequiredRole) {
      // Përdoruesi nuk ka rolin e duhur, ridrejtoje te një faqe 'Unauthorized' ose te faqja kryesore
      // Për thjeshtësi, po e ridrejtojmë te faqja kryesore e klientit ose një faqe 'access-denied'
      // Mund të shtosh një prop tjetër për 'unauthorizedRedirectPath'
      console.warn(`ProtectedRoute: User with role '${user?.role}' does not have required roles: ${roles.join(', ')}. Redirecting.`);
      return <Navigate to="/customer/restaurants" state={{ from: location }} replace />; // Ose një faqe specifike 'Unauthorized'
    }
  }

  // Përdoruesi është i kyçur dhe ka rolin e duhur (nëse kërkohet)
  return children;
};

export default ProtectedRoute;

// End of File: src/components/ProtectedRoute.jsx
//--------------------------------------------------

// File: src/components/ToastNotification.jsx

// src/components/ToastNotification.jsx
import React, { useState, useEffect } from 'react';
import HeroIcon from './HeroIcon'; // Assuming HeroIcon component

const ToastNotification = ({ message, type, onDismiss, id }) => { // Added id for key
    const [visible, setVisible] = useState(false);

    useEffect(() => {
        if (message) {
            setVisible(true);
            const timer = setTimeout(() => {
                setVisible(false);
                // Call onDismiss after animation to remove from parent state
                setTimeout(() => { 
                    if (onDismiss) onDismiss(id);
                }, 300); // Match transition duration
            }, 3000); // Duration toast is visible
            return () => clearTimeout(timer);
        } else {
            setVisible(false); // Hide if message becomes null/empty
        }
    }, [message, type, onDismiss, id]);


    if (!message) return null; // Don't render if no message (parent handles visibility by not rendering)

    const baseStyle = "fixed bottom-5 right-5 p-4 rounded-lg shadow-xl text-white text-sm z-[200] transition-all duration-300 ease-in-out transform";
    const typeStyles = {
        success: "bg-green-500",
        error: "bg-red-500",
        info: "bg-blue-500",
        warning: "bg-yellow-500",
    };
    const iconName = {
        success: "check-circle",
        error: "exclamation-circle",
        info: "information-circle",
        warning: "exclamation-circle"
    };

    return (
        <div className={`${baseStyle} ${typeStyles[type] || typeStyles.info} ${visible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-5 pointer-events-none'}`}>
            <div className="flex items-center">
                <HeroIcon name={iconName[type] || 'information-circle'} className="w-5 h-5 mr-3 flex-shrink-0" />
                <span>{message}</span>
            </div>
        </div>
    );
};
export default ToastNotification;

// End of File: src/components/ToastNotification.jsx
//--------------------------------------------------

// File: src/context/AuthContext.jsx

// src/context/AuthContext.jsx
import React, { createContext, useState, useEffect, useCallback, useContext } from 'react';
import { authApi } from '../api/authApi.js';
import { apiService } from '../api/apiService.js'; // Për të vendosur/hequr tokenin globalisht

const AuthContext = createContext(null);

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true); // Fillon true për të kontrolluar tokenin fillestar
  const [error, setError] = useState(null);
  const [token, setTokenState] = useState(localStorage.getItem('authToken')); // Lexo tokenin nga localStorage

  const setAuthToken = useCallback((newToken) => {
    if (newToken) {
      localStorage.setItem('authToken', newToken);
      apiService.setToken(newToken); // Vendos tokenin për kërkesat e ardhshme të apiService
    } else {
      localStorage.removeItem('authToken');
      apiService.clearToken(); // Pastro tokenin nga apiService
    }
    setTokenState(newToken);
  }, []);

  const processUserRoleData = useCallback((userData) => {
    setUser(userData);
    if (userData?.role === 'RESTAURANT_OWNER') {
      if (userData.ownsRestaurants && userData.ownsRestaurants.length > 0) {
         const mockRestaurant = userData.ownsRestaurants[0];
         setCurrentRestaurant(mockRestaurant);
         localStorage.setItem('currentRestaurant', JSON.stringify(mockRestaurant));
      } else {
        setCurrentRestaurant(null);
        localStorage.removeItem('currentRestaurant');
      }
    } else {
      setCurrentRestaurant(null);
      localStorage.removeItem('currentRestaurant');
    }

    if (userData?.role === 'DRIVER' || userData?.role === 'DELIVERY_PERSONNEL') { // Added DELIVERY_PERSONNEL
        const driverProfile = userData.driverProfile || { id: userData.id, isOnline: false, name: userData.name || userData.username };
        setAgent(driverProfile);
        localStorage.setItem('agentProfile', JSON.stringify(driverProfile));
    } else {
        setAgent(null);
        localStorage.removeItem('agentProfile');
    }
  }, []);

  const fetchAndSetUser = useCallback(async (currentToken) => {
    console.log("AuthContext: fetchAndSetUser called with token:", currentToken ? "present" : "absent");
    if (!currentToken) {
      setUser(null);
      setIsAuthenticated(false);
      setIsLoading(false); // Ensure loading is false if no token
      return null;
    }

    setIsLoading(true);
    setError(null);
    try {
      // Corrected: apiService.setToken is the defined method, not setHeader.
      // This call to apiService.setToken here might be redundant if setAuthToken
      // is always called before/after, as apiService.request gets token from localStorage.
      // However, it doesn't hurt to call the existing function correctly.
      apiService.setToken(currentToken); 

      const userData = await authApi.fetchMe();
      setUser(userData);
      setIsAuthenticated(true);
      setError(null); // Clear any previous errors on successful fetch
      return userData;
    } catch (err) {
      console.error("AuthContext: Error during fetchAndSetUser:", err);
      // If fetchMe fails (e.g. token invalid), clear auth state
      setAuthToken(null); // This will clear localStorage and call apiService.clearToken()
      setUser(null);
      setIsAuthenticated(false);
      // Optionally set an error message for the UI, if not already handled by authApi
      // setError(err.message || "Failed to fetch user details."); 
      throw err; // Re-throw for the caller if needed
    } finally {
      setIsLoading(false);
    }
  }, [setAuthToken]);

  useEffect(() => {
    const initialToken = localStorage.getItem('authToken');
    console.log("AuthContext - initial token check effect. Initial token:", initialToken ? "present" : "absent");
    if (initialToken) {
      // No need to call apiService.setToken() here if fetchAndSetUser does it,
      // or if apiService.request always gets token from localStorage.
      // The primary purpose here is to trigger user fetching if a token exists.
      fetchAndSetUser(initialToken).catch(err => {
        console.error("AuthContext: Error during initial fetchAndSetUser from useEffect:", err);
        // Error handling is inside fetchAndSetUser, including clearing token if invalid
      });
    } else {
      setIsLoading(false);
    }
  }, [fetchAndSetUser]);

  const login = async (credentials) => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await authApi.login(credentials);
      if (data && data.access) {
        setAuthToken(data.access); // This sets token in localStorage and calls apiService.setToken
        // fetchAndSetUser will be called by the useEffect that depends on 'token' state changing,
        // or we can call it explicitly here if preferred.
        // For consistency, let's call it explicitly to ensure user is set immediately.
        const userData = await fetchAndSetUser(data.access);
        return userData; // Return user data on successful login
      } else {
        throw new Error(data.detail || "Login failed: No access token received.");
      }
    } catch (err) {
      console.error("AuthContext: Login error", err);
      const errorMessage = err.response?.data?.detail || err.message || "Gabim gjatë kyçjes.";
      setError(errorMessage);
      // Ensure auth state is cleared on login failure
      setAuthToken(null);
      setUser(null);
      setIsAuthenticated(false);
      throw new Error(errorMessage); // Re-throw for the component to handle
    } finally {
      setIsLoading(false);
    }
  };

  const adminLogin = async (credentials) => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await authApi.adminLogin(credentials);
      if (data && data.access) {
        setAuthToken(data.access);
        const userData = await fetchAndSetUser(data.access);
        return userData;
      } else {
        throw new Error(data.detail || "Admin login failed: No access token received.");
      }
    } catch (err) {
      console.error("AuthContext: Admin Login error", err);
      const errorMessage = err.response?.data?.detail || err.message || "Gabim gjatë kyçjes së administratorit.";
      setError(errorMessage);
      setAuthToken(null);
      setUser(null);
      setIsAuthenticated(false);
      throw new Error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };


  const register = async (userData) => {
    setIsLoading(true);
    setError(null);
    try {
      const registeredUserData = await authApi.register(userData);
      // Disa API-ë të regjistrimit kthejnë tokena direkt, disa kërkojnë login të veçantë.
      // Supozojmë se API-ja jote nuk kthen tokena direkt pas regjistrimit,
      // por vetëm një mesazh suksesi. Përdoruesi duhet të bëjë login pas regjistrimit.
      if (registeredUserData.access && registeredUserData.refresh) {
        // Nëse API kthen tokena, trajtoji si te login
        localStorage.setItem('accessToken', registeredUserData.access);
        localStorage.setItem('refreshToken', registeredUserData.refresh);
        setToken(registeredUserData.access);
        setRefreshTokenState(registeredUserData.refresh);
        await fetchAndSetUser(registeredUserData.access);
      } else {
        // Nëse API nuk kthen tokena, thjesht trego sukses dhe përdoruesi duhet të bëjë login
        setIsAuthenticated(false); // Nuk është i kyçur automatikisht
      }
      return registeredUserData; // Kthe të dhënat e regjistrimit (p.sh., mesazhin)
    } catch (error) {
      await logout(); // Pastro gjithçka nëse regjistrimi dështon // Bëje await
      console.error("AuthContext: Registration failed", error);
      throw error; // Rihidhe gabimin që Register.jsx ta kapë
    } finally {
      setIsLoading(false);
    }
  };

  const logout = useCallback(async () => {
    // Mund të shtosh një thirrje API për të invaliduar tokenin në backend nëse e ke
    // await authApi.logout(); 
    setAuthToken(null); // Pastron tokenin nga localStorage dhe apiService
    setUser(null);
    setIsAuthenticated(false);
    setError(null);
    
    // Pastro çdo të dhënë tjetër të ruajtur në localStorage nga AuthContext
    localStorage.removeItem('currentRestaurant');
    localStorage.removeItem('agentProfile');
    // Nëse ke mockUserId për shportën e mysafirit dhe dëshiron ta pastrosh në logout (opsionale)
    // localStorage.removeItem('mockUserId'); 

    // Nuk ka nevojë për setIsLoading këtu zakonisht, por varet nga UI
  }, [setAuthToken]);

  const logoutUser = useCallback(() => {
    console.log("AuthContext: logoutUser called");
    setAuthToken(null); // This clears token from localStorage and calls apiService.clearToken()
    setUser(null);
    setIsAuthenticated(false);
    setError(null); // Clear any errors on logout
    // navigate('/auth/login', { replace: true }); // Navigation should be handled by components observing auth state
  }, [setAuthToken]);

  // Function to clear auth error, e.g., when user starts typing in login/register form
  const clearAuthError = useCallback(() => {
    setError(null);
  }, []);

  const value = {
    user,
    isAuthenticated,
    isLoading,
    error,
    token, // Expose token if needed by other parts of the app directly
    login,
    adminLogin,
    register,
    logoutUser,
    fetchAndSetUser, // Expose if needed for manual refresh, though typically handled internally
    setAuthToken, // Expose if external parts need to set token (e.g. OAuth callback)
    setError, // Allow components to set auth-related errors if necessary
    clearAuthError, // Allow components to clear auth errors
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// End of File: src/context/AuthContext.jsx
//--------------------------------------------------

// File: src/context/CartContext.jsx

// src/context/CartContext.jsx
import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';
import { customerApi } from '../api/customerApi.js';
import { useAuth } from './AuthContext.jsx';

const CartContext = createContext();

export const useCart = () => useContext(CartContext);

export const CartProvider = ({ children }) => {
  const [cart, setCart] = useState({ items: [], total_amount: "0.00", id: null, restaurant: null, restaurant_details: null });
  const [isLoading, setIsLoading] = useState(true); // Default to true to show loading initially
  const [error, setError] = useState(null);
  const { isAuthenticated, token, user } = useAuth();

  const fetchCart = useCallback(async () => {
    // Ensure user object exists before checking its role
    if (!isAuthenticated || !token || !user || user.role !== 'CUSTOMER') {
        setCart({ items: [], total_amount: "0.00", id: null, restaurant: null, restaurant_details: null });
        setIsLoading(false);
        if (user && user.role !== 'CUSTOMER') {
            console.log("CartContext: User is not a customer. Cart fetch skipped and cart cleared.");
        } else if (!isAuthenticated || !token) {
            console.log("CartContext: User not authenticated. Cart fetch skipped and cart cleared.");
        }
        return;
    }

    console.log("CartContext: Attempting to fetch cart for CUSTOMER.");
    setIsLoading(true);
    setError(null);
    try {
      // Ensure this calls the correct endpoint, e.g., /cart/my-cart/ if that's what your backend expects
      const fetchedCart = await customerApi.fetchUserCart(); 
      if (fetchedCart) {
        setCart({
          id: fetchedCart.id,
          items: fetchedCart.items || [],
          total_amount: fetchedCart.total_amount || "0.00",
          restaurant: fetchedCart.restaurant, // assuming backend sends restaurant ID
          restaurant_details: fetchedCart.restaurant_details // assuming backend sends restaurant details
        });
      } else {
        // If backend returns null or undefined (e.g. 204 No Content for an empty/new cart)
        setCart({ items: [], total_amount: "0.00", id: null, restaurant: null, restaurant_details: null });
      }
    } catch (err) {
      console.error("CartContext: Failed to fetch cart", err);
      setError(err.message || "Failed to fetch cart.");
      // Potentially set cart to empty on error too, or keep stale data?
      // setCart({ items: [], total_amount: "0.00", id: null, restaurant: null, restaurant_details: null });
    } finally {
      setIsLoading(false);
    }
  }, [isAuthenticated, token, user]); // user is a dependency

  useEffect(() => {
    console.log("CartContext - fetchCart effect triggered. isAuthenticated:", isAuthenticated, "User role:", user?.role, "Token present:", !!token); // ADDED LOG
    if (isAuthenticated && token && user && user.role === 'CUSTOMER') {
      console.log("CartContext: Auth state changed, user is customer, fetching cart.");
      fetchCart();
    } else if (!isAuthenticated || (user && user.role !== 'CUSTOMER')) {
      // Clear cart if user logs out or is not a customer
      console.log("CartContext: User logged out or not a customer, clearing local cart.");
      setCart({ items: [], total_amount: "0.00", id: null, restaurant: null, restaurant_details: null });
      setIsLoading(false); // Ensure loading is set to false
    }
  }, [isAuthenticated, token, user, fetchCart]); // fetchCart is a dependency

  const addItemToCart = async (menuItemId, quantity, restaurantId) => {
    if (!isAuthenticated) {
      setError("Ju lutem kyçuni për të shtuar në shportë."); // Ose ridrejto te login
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const updatedCart = await customerApi.addItemToCart(menuItemId, quantity); 
      setCart(updatedCart); // API duhet të kthejë shportën e përditësuar
      console.log("CartContext: Item added to backend cart", menuItemId);
    } catch (err) {
      console.error("CartContext: Error adding item to backend cart:", err);
      setError(err.response?.data?.detail || err.message || "Failed to add item."); // Shfaq mesazhin nga backend
      // Mos e thirr fetchCart() këtu, pasi API duhet të kthejë gjendjen e re
      // Nëse API nuk kthen gjendjen e re, atëherë thirre fetchCart()
      // throw err; // Mund ta ri-hedhësh gabimin nëse komponenti UI e trajton
    } finally {
      setIsLoading(false);
    }
  };

  const updateCartItemQuantity = async (cartItemId, newQuantity) => {
    if (!isAuthenticated) { setError("Ju lutem kyçuni."); return; }
    setIsLoading(true);
    setError(null);
    try {
      // API duhet të pranojë ID të CartItem, jo MenuItem
      const updatedCart = await customerApi.updateCartItemQuantity(cartItemId, newQuantity);
      setCart(updatedCart);
      console.log("CartContext: Item quantity updated in backend cart", cartItemId);
    } catch (err) {
      console.error("CartContext: Error updating item quantity in backend:", err);
      setError(err.message || "Failed to update quantity.");
      // throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const removeCartItem = async (cartItemId) => {
    if (!isAuthenticated) { setError("Ju lutem kyçuni."); return; }
    setIsLoading(true);
    setError(null);
    try {
      // API duhet të pranojë ID të CartItem
      const updatedCart = await customerApi.removeCartItem(cartItemId);
      setCart(updatedCart);
      console.log("CartContext: Item removed from backend cart", cartItemId);
    } catch (err) {
      console.error("CartContext: Error removing item from backend cart:", err);
      setError(err.message || "Failed to remove item.");
      // throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const clearCartContextAndApi = async () => { // Riemërtoje për qartësi
    if (!isAuthenticated) { setError("Ju lutem kyçuni."); return; }
    setIsLoading(true);
    setError(null);
    try {
        const updatedCart = await customerApi.clearUserCart(); // API duhet të kthejë shportën e zbrazur
        setCart(updatedCart || { items: [], total_amount: "0.00", id: cart.id, restaurant: null }); 
        console.log("CartContext: Cart cleared in backend.");
    } catch (err) {
        console.error("CartContext: Error clearing backend cart:", err);
        setError(err.message || "Failed to clear cart.");
        // throw err;
    } finally {
        setIsLoading(false);
    }
  };

  const getCartItemCount = useCallback(() => {
    return cart?.items?.reduce((count, item) => count + (item.quantity || 0), 0) || 0;
  }, [cart?.items]);

  const getCartTotalAmount = useCallback(() => {
    return parseFloat(cart?.total_amount || 0);
  }, [cart?.total_amount]);

  // Funksion për të marrë ID e restorantit nga shporta
  // Kjo do të jetë e rëndësishme për të parandaluar shtimin e artikujve nga restorante të ndryshme
  const getRestaurantIdFromCart = useCallback(() => {
    return cart?.restaurant; // Ose cart?.restaurant_details?.id nëse API kthen objektin e plotë
  }, [cart?.restaurant]);


  return (
    <CartContext.Provider
      value={{
        cart,
        fetchCart, // Mund të thirret manualisht për rifreskim
        addItemToCart,
        updateCartItemQuantity,
        removeCartItem,
        clearCart: clearCartContextAndApi, // Përdor funksionin e ri       
        getCartItemCount,
        getCartTotalAmount, // Shto këtë
        getRestaurantIdFromCart, // Shto këtë
        isLoading,
        error,
        setError,
      }}
    >
      {children}
    </CartContext.Provider>
  );
};

// End of File: src/context/CartContext.jsx
//--------------------------------------------------

// File: src/context/NotificationContext.jsx

// src/context/NotificationContext.jsx
import React, { createContext, useState, useContext } from 'react';
import { CheckCircle2, XCircle, Info } from 'lucide-react'; // Assuming lucide-react is used

const NotificationContext = createContext(null);

export const NotificationProvider = ({ children }) => {
  const [notification, setNotification] = useState(null); 

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type, id: Date.now() }); // Add id for key
    setTimeout(() => {
      setNotification(null);
    }, 3000);
  };

  return (
    <NotificationContext.Provider value={{ showNotification }}>
      {children}
      {notification && (
        <div 
          key={notification.id} // Use key for proper re-render on new notification
          className={`fixed bottom-5 right-5 p-4 rounded-lg shadow-lg text-white 
          ${notification.type === 'success' ? 'bg-green-500' : ''}
          ${notification.type === 'error' ? 'bg-red-500' : ''}
          ${notification.type === 'info' ? 'bg-blue-500' : ''} z-50 transition-all duration-300 ease-in-out animate-fadeIn`}
        >
          <div className="flex items-center">
            {notification.type === 'success' && <CheckCircle2 className="inline mr-2" />}
            {notification.type === 'error' && <XCircle className="inline mr-2" />}
            {notification.type === 'info' && <Info className="inline mr-2" />}
            {notification.message}
          </div>
        </div>
      )}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => useContext(NotificationContext);

// End of File: src/context/NotificationContext.jsx
//--------------------------------------------------

// File: src/context/TaskContext.jsx

// src/context/TaskContext.jsx
import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';
import { courierApi } from '../api/courierApi.js'; // Sigurohu që path-i është korrekt
import { useAuth } from './AuthContext.jsx';      // Sigurohu që path-i është korrekt
import { useNotification } from './NotificationContext.jsx'; // Sigurohu që path-i është korrekt

const TaskContext = createContext(null);

export const TaskProvider = ({ children }) => {
  const { user, isAuthenticated, token, fetchAndSetUser } = useAuth();
  const notification = useNotification(); // CORRECTED: Get the whole object

  const [availableTasks, setAvailableTasks] = useState([]);
  const [activeTask, setActiveTask] = useState(null); // Ky do të mbajë formatin që pret ActiveDeliverySection
  const [deliveryHistory, setDeliveryHistory] = useState([]); // Ky do të mbajë formatin që pret DeliveryHistorySection
  
  // Supozojmë se user objekti nga AuthContext ka një fushë 'is_driver_available' ose të ngjashme
  // Përshtate këtë me modelin tënd real të User/DriverProfile në Django.
  const [isDriverOnline, setIsDriverOnline] = useState(user?.is_driver_available || false); 

  const [isLoading, setIsLoading] = useState({
    availableTasks: false, // Për listën e detyrave të disponueshme
    activeTask: false,     // Për detyrën aktive
    deliveryHistory: false,// Për historikun
    availabilityToggle: false, // Për ndryshimin e statusit online/offline
    acceptTask: false,         // Kur pranohet një detyrë
    updateTaskStatus: false,   // Kur përditësohet statusi i detyrës aktive
    taskIdBeingAccepted: null, // Për të treguar loading te butoni specifik i pranimit
  });
  // const [error, setError] = useState(null); // Gabimet trajtohen me showError

  const transformTaskDataForFrontend = (taskDataFromApi) => {
    if (!taskDataFromApi || !taskDataFromApi.id) return null;
    // Ky funksion transformon përgjigjen e API-së në formatin që presin komponentët
    // ActiveDeliverySection dhe AvailableTasksSection.TaskCard
    // Përshtate fushat bazuar në atë që kthen API-ja jote reale.
    return {
        id: taskDataFromApi.id, // ID e porosisë, përdoret si key dhe për veprime
        orderId: taskDataFromApi.id, // Përputhje me ActiveDeliverySection
        status: taskDataFromApi.status?.toLowerCase().replace(/_/g, ' ') || 'unknown', // P.sh., 'assigned', 'picked up'
        
        restaurantName: taskDataFromApi.restaurant?.name || 'Restorant i Panjohur',
        restaurantAddress: taskDataFromApi.restaurant?.address_details?.street 
                           ? `${taskDataFromApi.restaurant.address_details.street}, ${taskDataFromApi.restaurant.address_details.city}`
                           : (taskDataFromApi.restaurant?.address || 'Adresë e Panjohur'),
        
        customerName: taskDataFromApi.customer?.full_name || taskDataFromApi.customer?.email || 'Klient i Panjohur',
        customerAddress: `${taskDataFromApi.delivery_address_street || 'Rrugë e Panjohur'}, ${taskDataFromApi.delivery_address_city || 'Qytet i Panjohur'}`,
        
        itemsSummary: taskDataFromApi.items?.map(item => `${item.quantity}x ${item.item_name_at_purchase}`).join(', ') || 'Pa artikuj',
        deliveryInstructions: taskDataFromApi.delivery_address_notes || null,
        
        // Për AvailableTasksSection.TaskCard (nga API-ja e /orders/available-for-driver/)
        restaurant_details: { 
            name: taskDataFromApi.restaurant?.name || 'N/A',
            address: taskDataFromApi.restaurant?.address_details?.street 
                     ? `${taskDataFromApi.restaurant.address_details.street}, ${taskDataFromApi.restaurant.address_details.city}`
                     : (taskDataFromApi.restaurant?.address || 'N/A'),
        },
        delivery_address_street: taskDataFromApi.delivery_address_street || '',
        delivery_address_city: taskDataFromApi.delivery_address_city || '',
        total_amount: parseFloat(taskDataFromApi.order_total || 0).toFixed(2),

        // Për ActiveDeliverySection dhe DeliveryHistorySection (payout)
        payout: parseFloat(taskDataFromApi.driver_payout || (parseFloat(taskDataFromApi.order_total || 0) * 0.08) || 0), // Shembull: 8% payout, ose merr nga API
        
        // Për DeliveryHistorySection (date)
        date: taskDataFromApi.actual_delivery_time || taskDataFromApi.updated_at || taskDataFromApi.created_at,
    };
  };


  const fetchAvailableTasks = useCallback(async () => {
    if (!isAuthenticated || !(user?.role === 'DRIVER' || user?.role === 'DELIVERY_PERSONNEL') || !isDriverOnline || !token) {
        setAvailableTasks([]); return;
    }
    setIsLoading(prev => ({ ...prev, availableTasks: true }));
    try {
      const tasksFromApi = await courierApi.getAvailableTasks(); // Supozon se kthen një array
      setAvailableTasks((tasksFromApi || []).map(transformTaskDataForFrontend).filter(Boolean));
    } catch (err) { 
        if (notification) notification.showNotification(err.message || "S'u mund të ngarkoheshin detyrat e disponueshme.", "error"); 
        setAvailableTasks([]); 
    } finally { 
        setIsLoading(prev => ({ ...prev, availableTasks: false })); 
    }
  }, [isAuthenticated, user, isDriverOnline, token, notification]); // CORRECTED: notification in deps

  const fetchActiveTask = useCallback(async () => {
    if (!isAuthenticated || !(user?.role === 'DRIVER' || user?.role === 'DELIVERY_PERSONNEL') || !token) {
        setActiveTask(null); return;
    }
    setIsLoading(prev => ({ ...prev, activeTask: true }));
    try {
      const taskDataFromApi = await courierApi.getMyCurrentActiveTask(); // API kthen një objekt të vetëm ose null/404
      setActiveTask(transformTaskDataForFrontend(taskDataFromApi));
    } catch (err) { 
        // Zakonisht 404 nëse nuk ka detyrë aktive, nuk është gabim kritik
        if (err.response && err.response.status === 404) {
            setActiveTask(null);
        } else {
            console.warn("TaskContext: Problem në marrjen e detyrës aktive:", err.message);
            // No notification for non-critical errors like 404 for active task
            setActiveTask(null);
        }
    } finally { 
        setIsLoading(prev => ({ ...prev, activeTask: false })); 
    }
  }, [isAuthenticated, user, token]); // notification not used here, so not in deps

  const fetchDeliveryHistory = useCallback(async () => {
    if (!isAuthenticated || !(user?.role === 'DRIVER' || user?.role === 'DELIVERY_PERSONNEL') || !token) {
        setDeliveryHistory([]); return;
    }
    setIsLoading(prev => ({ ...prev, deliveryHistory: true }));
    try {
      const historyFromApi = await courierApi.getDriverDeliveryHistory();
      setDeliveryHistory((historyFromApi || []).map(transformTaskDataForFrontend).filter(Boolean));
    } catch (err) { 
        if (notification) notification.showNotification(err.message || "S'u mund të ngarkohej historiku.", "error"); 
        setDeliveryHistory([]); 
    } finally { 
        setIsLoading(prev => ({ ...prev, deliveryHistory: false })); 
    }
  }, [isAuthenticated, user, token, notification]); // CORRECTED: notification in deps

  const toggleDriverAvailability = async () => { 
    if (!isAuthenticated || !(user?.role === 'DRIVER' || user?.role === 'DELIVERY_PERSONNEL') || !token) return;
    
    const newAvailabilityApiPayload = !isDriverOnline; 
    setIsLoading(prev => ({ ...prev, availabilityToggle: true }));
    try {
      await courierApi.updateDriverAvailability(newAvailabilityApiPayload); 
      setIsDriverOnline(newAvailabilityApiPayload); 
      if (fetchAndSetUser && token) await fetchAndSetUser(token); 
      if (notification) notification.showNotification(`Disponueshmëria: ${newAvailabilityApiPayload ? 'Online' : 'Offline'}`, "success");
      if (newAvailabilityApiPayload) { 
        fetchAvailableTasks(); 
        fetchActiveTask(); 
      } else { 
        setAvailableTasks([]); 
      }
    } catch (err) { 
        if (notification) notification.showNotification(err.message || "Gabim tek disponueshmëria.", "error");
    } finally { 
        setIsLoading(prev => ({ ...prev, availabilityToggle: false })); 
    }
  };

  const acceptTask = async (orderId) => {
    if (!isAuthenticated || !(user?.role === 'DRIVER' || user?.role === 'DELIVERY_PERSONNEL') || activeTask || !token) {
        if (notification) notification.showNotification(activeTask ? "Keni një detyrë aktive." : "Problem autentikimi.", "error"); return;
    }
    setIsLoading(prev => ({ ...prev, acceptTask: true, taskIdBeingAccepted: orderId }));
    try {
      const acceptedTaskData = await courierApi.acceptDeliveryTask(orderId);
      setActiveTask(transformTaskDataForFrontend(acceptedTaskData));
      setAvailableTasks(prev => prev.filter(task => task.id !== orderId));
      if (notification) notification.showNotification(`Detyra #${orderId} u pranua!`, "success");
    } catch (err) { 
        if (notification) notification.showNotification(err.message || "Gabim gjatë pranimit. Mund të jetë marrë.", "error"); 
        fetchAvailableTasks(); 
    } finally { 
        setIsLoading(prev => ({ ...prev, acceptTask: false, taskIdBeingAccepted: null })); 
    }
  };

  const updateActiveTaskStatus = async (newFrontendStatus) => {
    if (!isAuthenticated || !activeTask || !activeTask.id || !token) { 
        if (notification) notification.showNotification("Nuk ka detyrë aktive për t'u përditësuar.", "error"); return;
    }
    const newBackendStatus = newFrontendStatus.toUpperCase().replace(/ /g, '_'); 
    
    setIsLoading(prev => ({ ...prev, updateTaskStatus: true }));
    try {
      const updatedOrderFromApi = await courierApi.updateDeliveryStatus(activeTask.id, newBackendStatus);
      if (notification) notification.showNotification(`Statusi u ndryshua në "${newFrontendStatus}".`, "success");
      
      const finalStatuses = ['DELIVERED', 'FAILED_DELIVERY', 'CANCELLED_BY_USER', 'CANCELLED_BY_RESTAURANT'];
      if (finalStatuses.includes(newBackendStatus)) {
        setActiveTask(null);
        fetchDeliveryHistory(); 
        if(isDriverOnline) fetchAvailableTasks(); 
      } else {
        setActiveTask(transformTaskDataForFrontend(updatedOrderFromApi));
      }
    } catch (err) { 
        if (notification) notification.showNotification(err.message || "Gabim gjatë përditësimit të statusit.", "error"); 
        fetchActiveTask();
    } finally { 
        setIsLoading(prev => ({ ...prev, updateTaskStatus: false })); 
    }
  };
  
  const totalEarnings = deliveryHistory.reduce((sum, task) => sum + (task.payout || 0), 0);

  useEffect(() => {
    console.log("TaskContext useEffect triggered. isAuthenticated:", isAuthenticated, "User role:", user?.role, "isDriverOnline:", isDriverOnline, "Token present:", !!token);
    if (isAuthenticated && (user?.role === 'DRIVER' || user?.role === 'DELIVERY_PERSONNEL') && token) {
      if (isDriverOnline) {
        fetchActiveTask();
        fetchAvailableTasks();
      } else {
        setAvailableTasks([]);
        // Mos e bëj activeTask null këtu nëse shoferi bëhet offline, ai mund të dojë ta përfundojë.
        // fetchActiveTask() do ta trajtojë këtë.
      }
      fetchDeliveryHistory();
    } else {
      setAvailableTasks([]); setActiveTask(null); setDeliveryHistory([]); setIsDriverOnline(false);
    }
  }, [isAuthenticated, user, token, isDriverOnline, fetchAvailableTasks, fetchActiveTask, fetchDeliveryHistory]); // Shto isDriverOnline si dependencë

  return (
    <TaskContext.Provider value={{
        availableTasks, 
        activeTask, 
        deliveryHistory, 
        isDriverOnline, 
        totalEarnings, // Shtuar kjo
        // Përdor emra më konsistentë për isLoading props
        isLoadingAvailableTasks: isLoading.availableTasks,
        isLoadingActiveTask: isLoading.activeTask,
        isLoadingHistory: isLoading.deliveryHistory,
        isLoadingAvailabilityToggle: isLoading.availabilityToggle,
        isLoadingAcceptTask: isLoading.acceptTask,
        isLoadingUpdateStatus: isLoading.updateTaskStatus,
        taskIdBeingAccepted: isLoading.taskIdBeingAccepted,
        
        fetchAvailableTasks, 
        fetchActiveTask, 
        fetchDeliveryHistory,
        toggleDriverAvailability, 
        acceptTask, 
        updateActiveTaskStatus, // Emri i saktë
    }}>
      {children}
    </TaskContext.Provider>
  );
};

export const useTasks = () => {
  const context = useContext(TaskContext);
  if (context === undefined) {
    throw new Error('useTasks must be used within a TaskProvider');
  }
  return context;
};

// End of File: src/context/TaskContext.jsx
//--------------------------------------------------

// File: src/index.css

@import "tailwindcss";
@tailwind base;
@tailwind components;
@tailwind utilities;


body {
  @apply bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-100 antialiased;
  /* ... */
}



// End of File: src/index.css
//--------------------------------------------------

// File: src/layouts/AdminLayout/AdminSidebar.jsx

import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
import Button from '../../../components/Button.jsx'; // Sigurohu që ky path është korrekt
import { XCircleIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/solid';
import { useNotification } from '../../../context/NotificationContext.jsx';

const RegisterPage = () => {
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone_number: '',
    password: '',
    password_confirm: '',
    role: 'CUSTOMER',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  const { register, loadingAuth, error: authError, setError: setAuthError, isAuthenticated, user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  // Get the whole notification context object
  const notification = useNotification();

  useEffect(() => {
    if (isAuthenticated && user) {
      const from = location.state?.from?.pathname || (user.role === 'RESTAURANT_OWNER' ? '/restaurant/overview' : user.role === 'DRIVER' ? '/driver/dashboard' : '/customer/restaurants');
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, user, navigate, location.state]);

   useEffect(() => {
    return () => {
      if (setAuthError) setAuthError(null);
    };
  }, [setAuthError]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    if (authError) setAuthError(null); 
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (setAuthError) setAuthError(null);

    if (formData.password !== formData.password_confirm) {
      if (notification && typeof notification.showError === 'function') {
        notification.showError("Fjalëkalimet nuk përputhen.");
      } else {
        console.warn('[RegisterPage] showError function is not available from NotificationContext.');
      }
      if (setAuthError) setAuthError("Fjalëkalimet nuk përputhen.");
      return;
    }
    if (formData.password.length < 6) { 
      if (notification && typeof notification.showError === 'function') {
        notification.showError("Fjalëkalimi duhet të ketë të paktën 6 karaktere.");
      } else {
        console.warn('[RegisterPage] showError function is not available from NotificationContext.');
      }
      if (setAuthError) setAuthError("Fjalëkalimi duhet të ketë të paktën 6 karaktere.");
      return;
    }

    try {
      const payload = {
        email: formData.email,
        first_name: formData.first_name,
        last_name: formData.last_name,
        password: formData.password,
        password_confirm: formData.password_confirm,
        role: formData.role,
        phone_number: formData.phone_number || null,
      };
      await register(payload); 
      if (notification && typeof notification.showSuccess === 'function') {
        notification.showSuccess('Regjistrimi u krye me sukses! Ju lutem kyçuni.');
      } else {
        console.warn('[RegisterPage] showSuccess function is not available from NotificationContext.');
      }
      navigate('/auth/login'); 
    } catch (err) {
      let errorMessage = "Gabim gjatë regjistrimit.";
      // Check if err.response exists and has data (from apiService enriched error)
      if (err.response && err.response.detail) {
          errorMessage = err.response.detail;
      } else if (err.response && typeof err.response === 'object') {
          // Fallback for other types of object errors if detail is not present
          const fieldErrors = Object.entries(err.response)
            .map(([key, value]) => {
              let fieldName = key.replace("_", " ");
              fieldName = fieldName.charAt(0).toUpperCase() + fieldName.slice(1);
              return `${fieldName}: ${Array.isArray(value) ? value.join(', ') : value}`;
            })
            .join('; ');
          if (fieldErrors) errorMessage = fieldErrors;
          else if (err.message) errorMessage = err.message;
      } else if (err.message) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      }
      
      if (setAuthError) setAuthError(errorMessage);
      if (notification && typeof notification.showError === 'function') {
        notification.showError(errorMessage);
      } else {
        console.warn('[RegisterPage] showError function is not available from NotificationContext. Error to display:', errorMessage);
        // As a fallback, you might want to alert the error or handle it differently
        // For example, if AuthContext's error display is the primary, this might be acceptable.
        // alert(errorMessage); // Or some other fallback UI
      }
      console.error("Register page error:", err);
    }
  };
  
  return (
    <div className="w-full">
      <h2 className="mb-6 text-center text-2xl sm:text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
        Krijo një llogari të re
      </h2>
      {authError && (
        <div className="mb-4 rounded-md bg-red-50 dark:bg-red-900/30 p-3">
            <div className="flex">
                <div className="flex-shrink-0">
                    <XCircleIcon className="h-5 w-5 text-red-400 dark:text-red-300" aria-hidden="true" />
                </div>
                <div className="ml-3">
                    <p className="text-sm font-medium text-red-700 dark:text-red-200">{authError}</p>
                </div>
            </div>
        </div>
      )}
      <form onSubmit={handleSubmit} className="space-y-5">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-5 gap-y-4">
          <div>
            <label htmlFor="first_name_register" className="label-form">Emri</label>
            <input id="first_name_register" name="first_name" type="text" required 
                   value={formData.first_name} onChange={handleChange} 
                   className="input-form w-full mt-1" placeholder="Emri juaj"/>
          </div>
          <div>
            <label htmlFor="last_name_register" className="label-form">Mbiemri</label>
            <input id="last_name_register" name="last_name" type="text" required 
                   value={formData.last_name} onChange={handleChange} 
                   className="input-form w-full mt-1" placeholder="Mbiemri juaj"/>
          </div>
        </div>
        
        <div>
          <label htmlFor="email_register_page" className="label-form">Adresa Email</label>
          <input id="email_register_page" name="email" type="email" autoComplete="email" required 
                 value={formData.email} onChange={handleChange} 
                 className="input-form w-full mt-1" placeholder="ju@shembull.com"/>
        </div>

        <div>
          <label htmlFor="phone_number_register" className="label-form">Numri i Telefonit (Opsional)</label>
          <input id="phone_number_register" name="phone_number" type="tel" 
                 value={formData.phone_number} onChange={handleChange} 
                 className="input-form w-full mt-1" placeholder="+383 4X XXX XXX"/>
        </div>
        
        <div>
          <label htmlFor="password_register_page" className="label-form">Fjalëkalimi</label>
          <div className="relative mt-1">
            <input id="password_register_page" name="password" type={showPassword ? "text" : "password"} required minLength="6" 
                   value={formData.password} onChange={handleChange} 
                   className="input-form w-full pr-10" placeholder="Min. 6 karaktere"/>
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 dark:text-slate-400 hover:text-gray-700 dark:hover:text-slate-200 focus:outline-none"
              aria-label={showPassword ? "Fshih fjalëkalimin" : "Shfaq fjalëkalimin"}
            >
              {showPassword ? <EyeSlashIcon className="h-5 w-5"/> : <EyeIcon className="h-5 w-5"/>}
            </button>
          </div>
        </div>

        <div>
          <label htmlFor="password_confirm_register" className="label-form">Konfirmo Fjalëkalimin</label>
           <div className="relative mt-1">
            <input id="password_confirm_register" name="password_confirm" type={showConfirmPassword ? "text" : "password"} required minLength="6" 
                   value={formData.password_confirm} onChange={handleChange} 
                   className="input-form w-full pr-10" placeholder="Përsërit fjalëkalimin"/>
            <button
              type="button"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 dark:text-slate-400 hover:text-gray-700 dark:hover:text-slate-200 focus:outline-none"
              aria-label={showConfirmPassword ? "Fshih fjalëkalimin" : "Shfaq fjalëkalimin"}
            >
              {showConfirmPassword ? <EyeSlashIcon className="h-5 w-5"/> : <EyeIcon className="h-5 w-5"/>}
            </button>
          </div>
        </div>

        <div>
            <label htmlFor="role_register_select" className="label-form">Dëshiroj të regjistrohem si:</label>
            <select id="role_register_select" name="role" value={formData.role} onChange={handleChange} className="input-form w-full mt-1">
                <option value="CUSTOMER">Klient</option>
                <option value="RESTAURANT_OWNER">Pronar Restoranti</option>
                <option value="DRIVER">Shofer</option>
            </select>
        </div>

        <div className="pt-2">
          <Button type="submit" fullWidth variant="primary" isLoading={loadingAuth} disabled={loadingAuth} size="lg">
            Regjistrohu
          </Button>
        </div>
      </form>
      <p className="mt-6 text-center text-sm text-gray-600 dark:text-slate-400">
        Keni llogari?{' '}
        <Link 
            to="/auth/login" 
            className="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300"
        >
            Kyçu këtu
        </Link>
      </p>
    </div>
  );
};

export default RegisterPage;

// End of File: src/layouts/AdminLayout/AdminSidebar.jsx
//--------------------------------------------------

// File: src/layouts/AdminLayout.jsx

// src/layouts/AdminLayout.jsx
import React, { useContext } from 'react'; // Keep if useAuth implies useContext, else remove
import { Outlet, useNavigate, useLocation } from 'react-router-dom';
import AdminHeader from '../modules/admin/components/AdminHeader.jsx';
import AdminSidebar from '../modules/admin/components/AdminSidebar.jsx';
import { useAuth } from '../context/AuthContext.jsx';

const AdminLayout = () => {
    const { logout } = useAuth(); // isAuthenticated and user checks are done by ProtectedRoute
    const navigate = useNavigate();
    const location = useLocation();

    const handleLogout = () => {
        logout();
        // Navigate to a general login or specific admin login if you have one.
        // Since ProtectedRoute will kick unauth users from /admin/* to /login (or similar),
        // this might be optional or target a specific public page.
        navigate('/login');
    };

    const getCurrentView = (pathname) => {
        if (pathname.startsWith('/admin/users')) return 'users';
        if (pathname.startsWith('/admin/restaurants')) return 'restaurants';
        if (pathname.startsWith('/admin/orders')) return 'orders';
        if (pathname.startsWith('/admin/settings')) return 'settings';
        return 'overview';
    };
    const currentView = getCurrentView(location.pathname);

    // The if (!isAuthenticated || user?.role !== 'ADMIN') block with useEffect is REMOVED.
    // ProtectedRoute in AppRoutes.jsx handles this.

    return (
        <div className="min-h-screen flex flex-col bg-gray-100">
            <AdminHeader />
            <div className="flex flex-1">
                <AdminSidebar
                    currentView={currentView}
                    handleLogout={handleLogout}
                />
                <main className="flex-1 p-6 lg:p-8 overflow-y-auto">
                    <Outlet />
                </main>
            </div>
        </div>
    );
};

export default AdminLayout;

// End of File: src/layouts/AdminLayout.jsx
//--------------------------------------------------

// File: src/layouts/AdminSidebar.jsx

import React, { useState } from 'react';
import { NavLink, Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { 
    HomeIcon, UsersIcon, BuildingStorefrontIcon, Cog6ToothIcon, ChartBarIcon, 
    ShieldCheckIcon, ArrowRightOnRectangleIcon, ChevronDownIcon, ChevronUpIcon, TagIcon, ListBulletIcon
} from '@heroicons/react/24/outline';
// import Button from '../components/Button'; // If needed for logout or other actions

const AdminSidebar = ({ isSidebarOpen, setIsSidebarOpen }) => {
    const { user, logout } = useAuth();
    const navigate = useNavigate();
    const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false);

    const handleLogout = async () => {
        await logout();
        navigate('/login');
    };
    
    const navItems = [
        { name: 'Paneli Kryesor', href: '/admin/dashboard', IconComponent: HomeIcon },
        { name: 'Përdoruesit', href: '/admin/users', IconComponent: UsersIcon },
        { name: 'Restorantet', href: '/admin/restaurants', IconComponent: BuildingStorefrontIcon },
        { name: 'Llojet e Kuzhinave', href: '/admin/cuisine-types', IconComponent: TagIcon },
        { name: 'Porositë', href: '/admin/orders', IconComponent: ListBulletIcon },
        { name: 'Analitika', href: '/admin/analytics', IconComponent: ChartBarIcon },
        { name: 'Konfigurime', href: '/admin/settings', IconComponent: Cog6ToothIcon },
    ];

    const handleLinkClick = () => {
        if (window.innerWidth < 768) { // md breakpoint
          setIsSidebarOpen(false);
        }
    };

    return (
        <>
            {/* Overlay for mobile */}
            {isSidebarOpen && (
                <div 
                  className="fixed inset-0 z-30 bg-black/30 md:hidden" 
                  onClick={() => setIsSidebarOpen(false)}
                  aria-hidden="true"
                ></div>
            )}
            <aside className={`fixed inset-y-0 left-0 z-40 flex flex-col bg-slate-800 text-slate-100 shadow-lg transition-transform duration-300 ease-in-out md:relative md:translate-x-0
                ${isSidebarOpen ? 'translate-x-0 w-64' : '-translate-x-full w-64 md:w-20'}`}
            >
                <div className={`flex items-center justify-between p-4 border-b border-slate-700 ${isSidebarOpen ? '' : 'md:justify-center'}`}>
                    <Link to="/admin/dashboard" onClick={handleLinkClick} className={`flex items-center gap-2 ${isSidebarOpen ? '' : 'md:w-full md:justify-center'}`}>
                        <ShieldCheckIcon className={`h-8 w-8 text-primary-400 ${isSidebarOpen ? '' : 'md:h-7 md:w-7'}`} />
                        {isSidebarOpen && <span className="text-xl font-bold">Admin</span>}
                    </Link>
                    {/* Mobile close button can be added here if needed, or handled by AdminLayout */}
                </div>

                <nav className="flex-1 overflow-y-auto py-4 space-y-1">
                    {navItems.map(item => (
                        <NavLink
                            key={item.name}
                            to={item.href}
                            onClick={handleLinkClick}
                            className={({ isActive }) =>
                                `group flex items-center px-4 py-2.5 text-sm font-medium rounded-md mx-2 transition-colors
                                ${isActive
                                    ? 'bg-primary-500 text-white'
                                    : 'hover:bg-slate-700 hover:text-white'}
                                ${!isSidebarOpen ? 'md:justify-center md:px-0 md:py-3 md:mx-auto md:w-12 md:h-12' : ''}`
                            }
                            title={isSidebarOpen ? '' : item.name}
                        >
                            <item.IconComponent className={`h-5 w-5 flex-shrink-0 ${isSidebarOpen ? 'mr-3' : 'md:mr-0'}`} />
                            {isSidebarOpen && <span>{item.name}</span>}
                        </NavLink>
                    ))}
                </nav>

                <div className="p-2 border-t border-slate-700">
                    <div className="relative">
                        <button
                            onClick={() => setIsProfileDropdownOpen(!isProfileDropdownOpen)}
                            className={`w-full flex items-center p-2 rounded-md text-left text-sm font-medium hover:bg-slate-700 focus:outline-none
                                ${!isSidebarOpen ? 'md:justify-center md:py-3' : ''}`}
                            title={isSidebarOpen ? '' : (user?.first_name || user?.email)}
                        >
                             <img 
                                src={user?.profile_picture_url || `https://ui-avatars.com/api/?name=${user?.first_name || 'A'}&background=0D8ABC&color=fff&size=128`} 
                                alt="Admin" 
                                className={`h-8 w-8 rounded-full object-cover flex-shrink-0 ${isSidebarOpen ? 'mr-2.5' : 'md:mr-0'}`} 
                            />
                            {isSidebarOpen && (
                                <>
                                    <span className="truncate flex-1">{user?.first_name || user?.email}</span>
                                    {isProfileDropdownOpen ? <ChevronUpIcon className="w-4 h-4 ml-1 flex-shrink-0" /> : <ChevronDownIcon className="w-4 h-4 ml-1 flex-shrink-0" />}
                                </>
                            )}
                        </button>
                        {isProfileDropdownOpen && isSidebarOpen && (
                            <div className="mt-1 py-1 w-full rounded-md bg-slate-700 shadow-xs ring-1 ring-black ring-opacity-5">
                                <NavLink
                                    to="/admin/profile" // Or /admin/settings if that's the profile page
                                    onClick={() => { setIsProfileDropdownOpen(false); handleLinkClick(); }}
                                    className={({isActive}) => `block px-3 py-2 text-sm hover:bg-slate-600 flex items-center ${isActive ? 'text-primary-300' : ''}`}
                                >
                                    <Cog6ToothIcon className="inline w-4 h-4 mr-2" /> Profili
                                </NavLink>
                                <button
                                    onClick={() => { handleLogout(); setIsProfileDropdownOpen(false); }}
                                    className="w-full text-left block px-3 py-2 text-sm hover:bg-slate-600 flex items-center"
                                >
                                    <ArrowRightOnRectangleIcon className="inline w-4 h-4 mr-2" /> Dilni
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </aside>
        </>
    );
};

export default AdminSidebar;


// End of File: src/layouts/AdminSidebar.jsx
//--------------------------------------------------

// File: src/layouts/AuthLayout.jsx

// src/layouts/AuthLayout.jsx
import React from 'react';
import { Outlet, Link } from 'react-router-dom';
import { SparklesIcon } from '@heroicons/react/24/outline'; // Shembull për logo

const AuthLayout = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-slate-100 to-sky-100 dark:from-slate-800 dark:to-slate-900 py-8 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md"> {/* Kufizon gjerësinë e përmbajtjes së autentikimit */}
        <div className="mx-auto flex flex-col items-center justify-center mb-6 sm:mb-8">
          <Link to="/" className="flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:opacity-80 transition-opacity">
            <SparklesIcon className="h-10 w-auto sm:h-12" /> 
            <span className="text-3xl sm:text-4xl font-bold text-slate-800 dark:text-slate-100">FoodDash</span>
          </Link>
          {/* Mund të shtosh një tagline këtu nëse dëshiron */}
        </div>
        
        <div className="bg-white dark:bg-slate-800 shadow-2xl rounded-xl p-6 sm:p-8 md:p-10">
          <Outlet /> {/* LoginPage, RegisterPage, etj., do të renderizohen këtu */}
        </div>

        <p className="mt-8 text-center text-xs text-gray-500 dark:text-slate-400">
          © {new Date().getFullYear()} FoodDash. Të gjitha të drejtat e rezervuara.
        </p>
      </div>
    </div>
  );
};

export default AuthLayout;

// End of File: src/layouts/AuthLayout.jsx
//--------------------------------------------------

// File: src/layouts/CustomerLayout.jsx

// src/layouts/CustomerLayout.jsx
import React, { useState, useEffect, useRef, Fragment } from 'react';
import { Outlet, Link, NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';
import { useCart } from '../context/CartContext.jsx';
import { Transition } from '@headlessui/react';
import { 
    ShoppingCartIcon, BuildingStorefrontIcon, ArchiveBoxIcon, UserCircleIcon, 
    ArrowRightOnRectangleIcon, ChevronDownIcon, SparklesIcon 
} from '@heroicons/react/24/outline'; 
import Button from '../components/Button.jsx'; // Assuming Button is here
// import Logo from '../components/Logo.jsx'; // Komentuar, por përdoret një Link i thjeshtë për logon

const CustomerLayout = () => {
  const { user, logout, isAuthenticated } = useAuth();
  const { getCartItemCount } = useCart(); // !!! KJO DO TE DESHTONTE PA IMPORTIN E useCart !!! -> FIXED: Used getCartItemCount
  const cartItemCount = getCartItemCount(); // Get the actual count
  const navigate = useNavigate();
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);
  const profileRef = useRef(null);

  const handleLogout = async () => {
    await logout();
    navigate('/auth/login'); // Ndryshuar nga /login te /auth/login per konsistence me AppRoutes
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (profileRef.current && !profileRef.current.contains(event.target)) {
        setProfileDropdownOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const navLinks = [
    { name: 'Restorantet', href: '/customer/restaurants', IconComponent: BuildingStorefrontIcon },
    { name: 'Porositë e Mia', href: '/customer/my-orders', IconComponent: ArchiveBoxIcon },
  ];

  const profileLinks = [
    { name: 'Profili Im', href: '/customer/profile', IconComponent: UserCircleIcon },
    // Add more profile related links here if needed
  ];

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-slate-900 flex flex-col">
      <header className="bg-primary-600 dark:bg-slate-800 shadow-lg sticky top-0 z-50 print:hidden">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo Section */}
            <div className="flex items-center">
              <Link to="/customer/restaurants" className="flex-shrink-0 flex items-center gap-2 text-white hover:opacity-90 transition-opacity">
                <SparklesIcon className="h-7 w-7 text-yellow-300"/>
                <h1 className="text-2xl font-bold">Food<span className="text-yellow-300">Dash</span></h1>
              </Link>
              {/* Navigation Links */}
              <nav className="hidden md:ml-10 md:flex md:items-baseline md:space-x-1">
                {navLinks.map((item) => (
                  <NavLink
                    key={item.name}
                    to={item.href}
                    className={({ isActive }) =>
                      `px-3 py-2 rounded-md text-sm font-medium flex items-center gap-1.5
                      ${isActive
                        ? 'bg-white/20 dark:bg-slate-700 text-white'
                        : 'text-primary-100 dark:text-slate-300 hover:bg-white/10 dark:hover:bg-slate-700/70 hover:text-white'}`
                    }
                  >
                    {item.IconComponent && <item.IconComponent className="h-4 w-4 opacity-80"/>}
                    {item.name}
                  </NavLink>
                ))}
              </nav>
            </div>

            {/* Right side of the header: Cart and Profile */}
            <div className="flex items-center space-x-3">
              {/* !!! KETU DUHET TE SHTOHET IKONA DHE LINKU I SHPORTES !!! */}
              {/* Shembull per ikonen e shportes: */}
                {isAuthenticated && (
                  <Link to="/customer/cart" className="relative p-2 text-primary-100 dark:text-slate-300 hover:bg-white/10 dark:hover:bg-slate-700/70 rounded-full">
                    <ShoppingCartIcon className="h-6 w-6" />
                    {cartItemCount > 0 && (
                      <span className="absolute top-0 right-0 block h-4 w-4 rounded-full ring-2 ring-primary-600 dark:ring-slate-800 bg-red-500 text-white text-xs flex items-center justify-center">
                        {cartItemCount}
                      </span>
                    )}
                  </Link>
                )}
              

              {isAuthenticated && user ? (
                <div className="relative" ref={profileRef}>
                  <button
                    onClick={() => setProfileDropdownOpen(!profileDropdownOpen)} // KJO DUHET TE FUNKSIONOJE
                    className="flex items-center text-sm rounded-full text-primary-100 dark:text-slate-300 hover:bg-white/10 dark:hover:bg-slate-700/70 p-2 focus:outline-none"
                  >
                    <UserCircleIcon className="h-6 w-6" />
                    <span className="ml-2 hidden lg:inline">{user.first_name || user.email}</span> {/* Shfaq emrin ose email-in */}
                    <ChevronDownIcon className={`h-4 w-4 text-gray-400 transition-transform duration-200 ml-1 ${profileDropdownOpen ? 'rotate-180' : ''} hidden lg:inline`} />
                  </button>
                  <Transition // Headless UI Transition per dropdown
                    as={Fragment}
                    show={profileDropdownOpen}
                    enter="transition ease-out duration-100"
                    enterFrom="transform opacity-0 scale-95"
                    enterTo="transform opacity-100 scale-100"
                    leave="transition ease-in duration-75"
                    leaveFrom="transform opacity-100 scale-100"
                    leaveTo="transform opacity-0 scale-95"
                  >
                    <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-slate-700 ring-1 ring-black ring-opacity-5 focus:outline-none">
                      {profileLinks.map((item) => (
                        <NavLink
                          key={item.name}
                          to={item.href}
                          onClick={() => setProfileDropdownOpen(false)} // Mbyll dropdown pas klikimit
                          className={({ isActive }) =>
                            `flex items-center px-4 py-2 text-sm 
                            ${isActive ? 'bg-gray-100 dark:bg-slate-600 text-gray-900 dark:text-white' : 'text-gray-700 dark:text-slate-200'} 
                            hover:bg-gray-100 dark:hover:bg-slate-600`
                          }
                        >
                          {item.IconComponent && <item.IconComponent className="h-4 w-4 mr-2 text-gray-400 dark:text-slate-500"/>}
                          {item.name}
                        </NavLink>
                      ))}
                      <button
                        onClick={() => { handleLogout(); setProfileDropdownOpen(false); }} // Mbyll dropdown
                        className="w-full text-left flex items-center px-4 py-2 text-sm text-gray-700 dark:text-slate-200 hover:bg-gray-100 dark:hover:bg-slate-600"
                      >
                        <ArrowRightOnRectangleIcon className="h-4 w-4 mr-2 text-gray-400 dark:text-slate-500"/>
                        Dilni
                      </button>
                    </div>
                  </Transition>
                </div>
              ) : (
                <Button onClick={() => navigate('/auth/login')} variant="light" size="sm">Kyçu</Button> // Ndryshuar nga /login te /auth/login
              )}
            </div>
          </div>
        </div>
        {/* Mobile Menu (optional, if you want to add it later) */}
      </header>
      <main className="flex-grow container mx-auto px-2 sm:px-4 lg:px-6 py-4 sm:py-6">
        <Outlet />
      </main>
      <footer className="bg-white dark:bg-slate-800 border-t border-gray-200 dark:border-slate-700 py-6 text-center print:hidden">
        <p className="text-sm text-gray-500 dark:text-slate-400">&copy; {new Date().getFullYear()} FoodDash. Të gjitha të drejtat e rezervuara.</p>
      </footer>
    </div>
  );
};
export default CustomerLayout;

// End of File: src/layouts/CustomerLayout.jsx
//--------------------------------------------------

// File: src/layouts/DriverLayout.jsx

// src/layouts/DriverLayout.jsx
import React, { useState } from 'react';
import { Outlet, Link, NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';
import Button from '../components/Button.jsx';
import { TruckIcon, Squares2X2Icon, ArrowRightOnRectangleIcon, Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

const DriverLayout = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const handleLogout = async () => {
    await logout();
    navigate('/login');
  };

  const navLinks = [
    { name: 'Paneli', href: '/driver/dashboard', IconComponent: Squares2X2Icon },
    // Add more driver-specific links here
  ];

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-slate-900">
      <header className="bg-blue-600 dark:bg-blue-800 shadow-md sticky top-0 z-50">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <Link to="/driver/dashboard" className="flex-shrink-0 flex items-center gap-2 text-white hover:opacity-90 transition-opacity">
                <TruckIcon className="h-7 w-7 text-white" />
                <h1 className="text-xl font-semibold">Driver Panel</h1>
              </Link>
              <nav className="hidden md:ml-10 md:flex md:items-baseline md:space-x-1">
                {navLinks.map((item) => (
                  <NavLink
                    key={item.name}
                    to={item.href}
                    className={({ isActive }) =>
                      `px-3 py-2 rounded-md text-sm font-medium flex items-center gap-1.5
                      ${isActive
                        ? 'bg-blue-700 dark:bg-blue-900 text-white'
                        : 'text-blue-100 dark:text-blue-200 hover:bg-blue-500 dark:hover:bg-blue-700 hover:text-white'}`
                    }
                  >
                    {item.IconComponent && <item.IconComponent className="h-4 w-4 opacity-80"/>}
                    {item.name}
                  </NavLink>
                ))}
              </nav>
            </div>
            <div className="hidden md:flex items-center space-x-3">
              <span className="text-sm text-blue-100 dark:text-blue-200">Mirësevjen, {user?.first_name || user?.email}</span>
              <Button onClick={handleLogout} variant="light" size="sm" iconLeft={ArrowRightOnRectangleIcon}>
                Dilni
              </Button>
            </div>
            <div className="md:hidden flex items-center">
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="p-2 rounded-md text-blue-200 hover:text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                aria-expanded={mobileMenuOpen}
                aria-controls="mobile-menu"
              >
                <span className="sr-only">Hap menunë</span>
                {mobileMenuOpen ? (
                  <XMarkIcon className="block h-6 w-6" aria-hidden="true" />
                ) : (
                  <Bars3Icon className="block h-6 w-6" aria-hidden="true" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile menu */}
        {mobileMenuOpen && (
          <div className="md:hidden" id="mobile-menu">
            <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
              {navLinks.map((item) => (
                <NavLink
                  key={item.name}
                  to={item.href}
                  onClick={() => setMobileMenuOpen(false)}
                  className={({ isActive }) =>
                    `block px-3 py-2 rounded-md text-base font-medium flex items-center gap-2
                    ${isActive
                      ? 'bg-blue-700 dark:bg-blue-900 text-white'
                      : 'text-blue-100 dark:text-blue-200 hover:bg-blue-500 dark:hover:bg-blue-700 hover:text-white'}`
                  }
                >
                  {item.IconComponent && <item.IconComponent className="h-5 w-5"/>}
                  {item.name}
                </NavLink>
              ))}
            </div>
            <div className="pt-4 pb-3 border-t border-blue-500 dark:border-blue-700">
              <div className="flex items-center px-5">
                <div className="ml-3">
                  <div className="text-base font-medium text-white">{user?.first_name || user?.email}</div>
                  <div className="text-sm font-medium text-blue-200">{user?.role}</div>
                </div>
              </div>
              <div className="mt-3 px-2 space-y-1">
                <Button
                  onClick={() => { handleLogout(); setMobileMenuOpen(false); }}
                  variant="ghost"
                  className="w-full justify-start text-blue-100 dark:text-blue-200 hover:bg-blue-500 dark:hover:bg-blue-700 hover:text-white"
                  iconLeft={ArrowRightOnRectangleIcon}
                >
                  Dilni
                </Button>
              </div>
            </div>
          </div>
        )}
      </header>
      <main className="container mx-auto px-2 sm:px-4 lg:px-6 py-4 sm:py-6">
        <Outlet />
      </main>
    </div>
  );
};
export default DriverLayout;

// End of File: src/layouts/DriverLayout.jsx
//--------------------------------------------------

// File: src/layouts/RestaurantOwnerLayout.jsx

// src/layouts/RestaurantOwnerLayout.jsx
import React, { useState, useEffect } from 'react';
import { Outlet, Navigate, useLocation, useNavigate } from 'react-router-dom'; // Added useNavigate
import { useAuth } from '../context/AuthContext';
import Sidebar from '../modules/restaurant/components/Sidebar';
import Button from '../components/Button';
import { Bars3Icon, BellIcon, ArrowRightOnRectangleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

const RestaurantOwnerLayout = () => {
  const { user, isAuthenticated, isLoading, logout } = useAuth();
  const location = useLocation();
  const navigate = useNavigate(); // For logout
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  
  // Determine current restaurant from user context
  const ownedRestaurants = user?.ownsRestaurants || [];
  // For this project, let's assume the first restaurant is the active one.
  // A real app might have a selector if a user owns multiple restaurants.
  const currentRestaurant = ownedRestaurants.length > 0 ? ownedRestaurants[0] : null;

  useEffect(() => {
    // If user becomes authenticated and is a restaurant owner but has no restaurant assigned (edge case)
    // or if currentRestaurant becomes null after being set.
    if (isAuthenticated && user?.role === 'RESTAURANT_OWNER' && !currentRestaurant && !isLoading) {
      // This case should ideally be handled during login/registration (admin assigns restaurant)
      // Or redirect to a page explaining the issue / contact support.
      console.warn("RestaurantOwnerLayout: No restaurant associated with this owner. Redirecting...");
      // navigate('/some-error-page-for-owner'); // Or to a setup page
    }
  }, [currentRestaurant, isAuthenticated, user?.role, isLoading, navigate]);


  if (isLoading) {
    return (
        <div className="flex justify-center items-center h-screen bg-gray-100 dark:bg-gray-900">
            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-500"></div>
            <p className="ml-4 text-lg text-gray-700 dark:text-gray-300">Duke ngarkuar...</p>
        </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/auth/login" state={{ from: location }} replace />;
  }

  if (user?.role !== 'RESTAURANT_OWNER') {
    // Redirect non-owners
    console.warn(`RestaurantOwnerLayout: User with role "${user?.role}" attempted to access. Redirecting.`);
    return <Navigate to="/" replace />;
  }
  
  if (!currentRestaurant) {
    // If still no current restaurant after loading and checks (e.g., not assigned by admin yet)
    return (
        <div className="flex flex-col justify-center items-center h-screen bg-gray-100 dark:bg-gray-900 p-8 text-center">
            <ExclamationTriangleIcon className="h-16 w-16 text-yellow-500 mb-4"/>
            <h1 className="text-2xl font-semibold text-gray-800 dark:text-white mb-2">Restoranti Nuk u Gjet</h1>
            <p className="text-gray-600 dark:text-gray-400">
                Duket se nuk keni një restorant të caktuar në llogarinë tuaj. <br/>
                Ju lutem kontaktoni administratorin e platformës.
            </p>
            <Button onClick={logout} variant="primary" className="mt-6">
                Dilni
            </Button>
        </div>
    );
  }


  return (
    <div className="flex h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200">
      <Sidebar 
        isSidebarOpen={isSidebarOpen} 
        setIsSidebarOpen={setIsSidebarOpen} 
        restaurantName={currentRestaurant.name} 
        restaurantId={currentRestaurant.id}
      />

      <div className="flex-1 flex flex-col overflow-hidden">
        <header className="bg-white dark:bg-gray-800 shadow-sm print:hidden">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center">
                <button
                  onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                  className="md:hidden text-gray-500 dark:text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500 mr-3"
                  aria-label="Hap menunë anësore"
                >
                  <Bars3Icon className="h-6 w-6" />
                </button>
                <div className="text-lg font-semibold text-gray-800 dark:text-white hidden md:block truncate" title={currentRestaurant.name}>
                  Paneli: {currentRestaurant.name}
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                 {/* Placeholder for notifications or quick actions */}
                <button className="relative text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200" aria-label="Njoftimet e Restorantit">
                    <BellIcon className="h-6 w-6" />
                    {/* <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500 ring-2 ring-white dark:ring-gray-800"></span> Example notification dot */}
                </button>
                <Button 
                  onClick={logout}
                  variant="ghost"
                  size="sm"
                  className="text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                  iconLeft={ArrowRightOnRectangleIcon}
                  iconLeftClassName="h-5 w-5"
                >
                  <span className="hidden sm:inline">Dilni</span>
                </Button>
              </div>
            </div>
          </div>
        </header>

        <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100 dark:bg-gray-900 p-4 sm:p-6">
          {/* Pass currentRestaurantId to all child routes via Outlet context */}
          <Outlet context={{ currentRestaurantId: currentRestaurant.id, currentRestaurantName: currentRestaurant.name }} />
        </main>
      </div>
    </div>
  );
};

export default RestaurantOwnerLayout;

// End of File: src/layouts/RestaurantOwnerLayout.jsx
//--------------------------------------------------

// File: src/main.jsx

// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { BrowserRouter } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext.jsx';
import { CartProvider } from './context/CartContext.jsx';
import { NotificationProvider } from './context/NotificationContext.jsx';


ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <NotificationProvider>
        <AuthProvider>
          <CartProvider>
            <App />
          </CartProvider>
        </AuthProvider>
      </NotificationProvider>
    </BrowserRouter>
  </React.StrictMode>,
);

// End of File: src/main.jsx
//--------------------------------------------------

// File: src/modules/admin/components/AdminHeader.jsx

// src/modules/admin/components/AdminHeader.jsx
import React, { useState, useRef, useEffect, Fragment } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
// import HeroIcon from "../../../components/HeroIcon"; // FSHIJE KËTË
import { Bars3Icon, MagnifyingGlassIcon, BellIcon, ChevronDownIcon, Cog6ToothIcon, ArrowRightOnRectangleIcon } from '@heroicons/react/24/outline';
import { Transition } from '@headlessui/react'; // For dropdown animation

const AdminHeader = ({ setIsSidebarOpen }) => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);
  const profileDropdownRef = useRef(null);

  const handleLogout = async () => {
    await logout();
    navigate('/login');
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (profileDropdownRef.current && !profileDropdownRef.current.contains(event.target)) {
        setProfileDropdownOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="bg-white dark:bg-slate-800 shadow-sm sticky top-0 z-30 print:hidden">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <button
              onClick={() => setIsSidebarOpen(prev => !prev)}
              className="text-gray-500 dark:text-gray-400 focus:outline-none focus:text-gray-700 dark:focus:text-gray-200 md:hidden mr-2"
              aria-label="Toggle sidebar"
            >
              <Bars3Icon className="h-6 w-6" />
            </button>
            <div className="relative text-gray-400 focus-within:text-gray-600 dark:focus-within:text-slate-200 hidden sm:block">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <MagnifyingGlassIcon className="h-5 w-5" aria-hidden="true" />
              </div>
              <input
                id="search-field"
                className="block w-full h-full pl-10 pr-3 py-2 border-transparent rounded-md text-gray-900 dark:text-slate-100 placeholder-gray-500 dark:placeholder-slate-400 focus:outline-none focus:ring-0 focus:border-transparent focus:placeholder-gray-400 dark:focus:placeholder-slate-500 sm:text-sm bg-gray-100 dark:bg-slate-700"
                placeholder="Kërko..."
                type="search"
                name="search"
              />
            </div>
          </div>
          <div className="flex items-center space-x-3 sm:space-x-4">
            <button
              type="button"
              className="p-1 rounded-full text-gray-400 hover:text-gray-500 dark:text-slate-400 dark:hover:text-slate-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
            >
              <span className="sr-only">Shiko njoftimet</span>
              <BellIcon className="h-6 w-6" aria-hidden="true" />
            </button>

            {/* Profile dropdown */}
            <div className="relative" ref={profileDropdownRef}>
              <div>
                <button
                  type="button"
                  onClick={() => setProfileDropdownOpen(!profileDropdownOpen)}
                  className="max-w-xs bg-white dark:bg-slate-800 rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                  id="user-menu-button"
                  aria-expanded={profileDropdownOpen}
                  aria-haspopup="true"
                >
                  <span className="sr-only">Hap menunë e përdoruesit</span>
                  <img
                    className="h-8 w-8 rounded-full object-cover"
                    src={user?.profile_picture_url || `https://ui-avatars.com/api/?name=${user?.first_name || 'A'}&background=0D8ABC&color=fff&size=128`}
                    alt="User avatar"
                  />
                  <span className="hidden md:block ml-2 text-sm font-medium text-gray-700 dark:text-slate-200">{user?.first_name || user?.email}</span>
                  <ChevronDownIcon className="hidden md:block ml-1 h-4 w-4 text-gray-400 dark:text-slate-500" />
                </button>
              </div>
              <Transition
                as={Fragment}
                show={profileDropdownOpen}
                enter="transition ease-out duration-100"
                enterFrom="transform opacity-0 scale-95"
                enterTo="transform opacity-100 scale-100"
                leave="transition ease-in duration-75"
                leaveFrom="transform opacity-100 scale-100"
                leaveTo="transform opacity-0 scale-95"
              >
                <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-slate-700 ring-1 ring-black ring-opacity-5 focus:outline-none">
                  <NavLink
                    to="/admin/profile" // Or /admin/settings
                    onClick={() => setProfileDropdownOpen(false)}
                    className={({ isActive }) =>
                      `group flex items-center px-4 py-2 text-sm 
                      ${isActive ? 'bg-gray-100 dark:bg-slate-600 text-gray-900 dark:text-white' : 'text-gray-700 dark:text-slate-200'} 
                      hover:bg-gray-100 dark:hover:bg-slate-600`
                    }
                  >
                    <Cog6ToothIcon className="mr-2 h-5 w-5 text-gray-400 dark:text-slate-500 group-hover:text-gray-500 dark:group-hover:text-slate-300" />
                    Profili & Konfigurime
                  </NavLink>
                  <button
                    onClick={() => { handleLogout(); setProfileDropdownOpen(false); }}
                    className="w-full text-left group flex items-center px-4 py-2 text-sm text-gray-700 dark:text-slate-200 hover:bg-gray-100 dark:hover:bg-slate-600"
                  >
                    <ArrowRightOnRectangleIcon className="mr-2 h-5 w-5 text-gray-400 dark:text-slate-500 group-hover:text-gray-500 dark:group-hover:text-slate-300" />
                    Dilni
                  </button>
                </div>
              </Transition>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
};

export default AdminHeader;

// End of File: src/modules/admin/components/AdminHeader.jsx
//--------------------------------------------------

// File: src/modules/admin/components/AdminSidebar.jsx

// src/modules/admin/components/AdminSidebar.jsx
import React, { useState, useEffect, useRef } from 'react';
import { NavLink, Link, useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext';
import { 
    HomeIcon, UsersIcon, BuildingStorefrontIcon, Cog6ToothIcon, ChartBarIcon, 
    ShieldCheckIcon, ArrowRightOnRectangleIcon, ChevronDownIcon, ChevronUpIcon, TagIcon, ListBulletIcon, XMarkIcon 
} from '@heroicons/react/24/outline';

const AdminSidebar = ({ isSidebarOpen, setIsSidebarOpen }) => {
    const location = useLocation();
    const { user, logout } = useAuth();
    const navigate = useNavigate();
    const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false);
    const profileDropdownRef = useRef(null);

    const handleLogout = async () => {
        await logout();
        navigate('/auth/login');
    };
    
    const navItems = [
        { name: 'Paneli Kryesor', href: '/admin/dashboard', IconComponent: HomeIcon },
        { name: 'Përdoruesit', href: '/admin/users', IconComponent: UsersIcon },
        { name: 'Restorantet', href: '/admin/restaurants', IconComponent: BuildingStorefrontIcon },
        { name: 'Llojet e Kuzhinave', href: '/admin/cuisine-types', IconComponent: TagIcon },
        { name: 'Porositë', href: '/admin/orders', IconComponent: ListBulletIcon },
        { name: 'Analitika', href: '/admin/analytics', IconComponent: ChartBarIcon },
        { name: 'Konfigurimet', href: '/admin/settings', IconComponent: Cog6ToothIcon },
    ];

    const handleLinkClick = () => {
        if (window.innerWidth < 768) { 
          setIsSidebarOpen(false);
        }
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (profileDropdownRef.current && !profileDropdownRef.current.contains(event.target)) {
                setIsProfileDropdownOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    return (
        <>
            {isSidebarOpen && (
                <div 
                  className="fixed inset-0 z-30 bg-black/30 md:hidden" 
                  onClick={() => setIsSidebarOpen(false)}
                  aria-hidden="true"
                ></div>
            )}
            <aside className={`fixed inset-y-0 left-0 z-40 flex flex-col bg-slate-800 text-slate-100 shadow-lg transition-transform duration-300 ease-in-out md:relative md:translate-x-0 print:hidden
                ${isSidebarOpen ? 'translate-x-0 w-64' : '-translate-x-full w-64 md:w-20'}`}
            >
                <div className={`flex items-center justify-between p-4 border-b border-slate-700 ${isSidebarOpen ? '' : 'md:justify-center'}`}>
                    <Link to="/admin/dashboard" onClick={handleLinkClick} className={`flex items-center gap-2 ${isSidebarOpen ? '' : 'md:w-full md:justify-center'}`}>
                        <ShieldCheckIcon className={`h-8 w-8 text-primary-400 ${isSidebarOpen ? '' : 'md:h-7 md:w-7'}`} />
                        {isSidebarOpen && <span className="text-xl font-bold">Admin</span>}
                    </Link>
                    <button
                        onClick={() => setIsSidebarOpen(false)}
                        className={`text-slate-300 hover:text-white md:hidden ${!isSidebarOpen ? 'hidden' : ''}`}
                        aria-label="Mbyll sidebar"
                    >
                        <XMarkIcon className="h-6 w-6" />
                    </button>
                </div>

                <nav className="flex-1 overflow-y-auto py-4 space-y-1">
                    {navItems.map(item => (
                        <NavLink
                            key={item.name}
                            to={item.href}
                            onClick={handleLinkClick}
                            className={({ isActive: navLinkIsActive }) =>
                                `group flex items-center px-4 py-2.5 text-sm font-medium rounded-md mx-2 transition-colors
                                ${navLinkIsActive 
                                    ? 'bg-primary-500 text-white'
                                    : 'hover:bg-slate-700 hover:text-white text-slate-300'}
                                ${!isSidebarOpen ? 'md:justify-center md:px-0 md:py-3 md:mx-auto md:w-12 md:h-12' : ''}`
                            }
                            title={isSidebarOpen ? '' : item.name}
                        >
                            <item.IconComponent 
                                className={`h-5 w-5 flex-shrink-0 
                                           ${isSidebarOpen ? 'mr-3' : 'md:mr-0'} 
                                           ${/* Ngjyra e ikonës tani kontrollohet nga klasat e NavLink-ut prind (p.sh. text-white kur aktiv) */ ''}`
                                         } 
                            />
                            {isSidebarOpen && <span>{item.name}</span>}
                        </NavLink>
                    ))}
                </nav>

                <div className="p-2 border-t border-slate-700" ref={profileDropdownRef}>
                    <div className="relative">
                        <button
                            onClick={() => setIsProfileDropdownOpen(!isProfileDropdownOpen)}
                            className={`w-full flex items-center p-2 rounded-md text-left text-sm font-medium hover:bg-slate-700 focus:outline-none
                                ${!isSidebarOpen ? 'md:justify-center md:py-3' : ''}`}
                            title={isSidebarOpen ? '' : (user?.first_name || user?.email)}
                        >
                             <img 
                                src={user?.profile_picture_url || `https://ui-avatars.com/api/?name=${user?.first_name || 'A'}&background=3B82F6&color=fff&size=128`}
                                alt="Admin" 
                                className={`h-8 w-8 rounded-full object-cover flex-shrink-0 ${isSidebarOpen ? 'mr-2.5' : 'md:mr-0'}`} 
                            />
                            {isSidebarOpen && (
                                <>
                                    <span className="truncate flex-1">{user?.first_name || user?.email}</span>
                                    {isProfileDropdownOpen ? <ChevronUpIcon className="w-4 h-4 ml-1 flex-shrink-0 text-slate-400" /> : <ChevronDownIcon className="w-4 h-4 ml-1 flex-shrink-0 text-slate-400" />}
                                </>
                            )}
                        </button>
                        {isProfileDropdownOpen && isSidebarOpen && (
                            <div className="absolute bottom-full left-0 mb-1 py-1 w-full rounded-md bg-slate-700 shadow-xs ring-1 ring-black ring-opacity-5">
                                <NavLink
                                    to="/admin/settings"
                                    onClick={() => { setIsProfileDropdownOpen(false); handleLinkClick(); }}
                                    className={({isActive}) => `block px-3 py-2 text-sm hover:bg-slate-600 flex items-center ${isActive ? 'text-primary-300' : 'text-slate-100'}`}
                                >
                                    <Cog6ToothIcon className="inline w-4 h-4 mr-2 text-slate-400" /> Profili & Konfigurime
                                </NavLink>
                                <button
                                    onClick={() => { handleLogout(); setIsProfileDropdownOpen(false); }}
                                    className="w-full text-left block px-3 py-2 text-sm hover:bg-slate-600 flex items-center text-slate-100"
                                >
                                    <ArrowRightOnRectangleIcon className="inline w-4 h-4 mr-2 text-slate-400" /> Dilni
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </aside>
        </>
    );
};

export default AdminSidebar;

// End of File: src/modules/admin/components/AdminSidebar.jsx
//--------------------------------------------------

// File: src/modules/admin/components/RestaurantFormModal.jsx

// src/modules/admin/components/RestaurantFormModal.jsx
import React, { useState, useEffect, useCallback } from 'react';
import ModalShell from '../../../components/ModalShell';
import Button from '../../../components/Button';
import { adminApi } from '../../../api/adminApi';
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext';
import { XMarkIcon, CheckCircleIcon, BuildingStorefrontIcon, UserCircleIcon, PhotoIcon, MapPinIcon, PhoneIcon, ClockIcon, TagIcon, CurrencyDollarIcon } from '@heroicons/react/24/outline';

const RestaurantFormModal = ({ isOpen, onClose, restaurant, onSave }) => {
  const { user } = useAuth();
  const { showSuccess, showError } = useNotification();
  
  const initialFormData = {
    name: '',
    address: '',
    phone: '',
    owner_id: '', // Changed from owner to owner_id for clarity with backend
    is_active: true,
    is_approved: false,
    // image: null, // This will be handled by imageFile state
    // image_url: '', // This will be handled by imagePreview state
    category_ids: [], // Changed from categories_text to category_ids
    description: '', 
  };

  const [formData, setFormData] = useState(initialFormData);
  const [potentialOwners, setPotentialOwners] = useState([]);
  const [allGlobalCategories, setAllGlobalCategories] = useState([]); // For multiselect
  const [isLoading, setIsLoading] = useState(false); // General loading for modal data
  const [isSaving, setIsSaving] = useState(false); // Specific loading for save operation
  const [errors, setErrors] = useState({});
  const [imageFile, setImageFile] = useState(null); // State for the actual image file
  const [imagePreview, setImagePreview] = useState('');
  const [activeTab, setActiveTab] = useState('basic');
  const [formError, setFormError] = useState(null);

  const fetchModalData = useCallback(async () => {
    if (!user?.token || !isOpen) return;
    setIsLoading(true);
    try {
      const [ownersData, categoriesData] = await Promise.all([
        adminApi.fetchPotentialOwners(user.token), // Ensure this API is robust
        adminApi.fetchAllRestaurantCategories(user.token) // Ensure this API returns global categories
      ]);
      setPotentialOwners(ownersData || []);
      setAllGlobalCategories(categoriesData || []);
    } catch (error) {
      console.error("Failed to fetch modal data for restaurant form", error);
      showError(error.message || "S'u mund të ngarkoheshin të dhënat e formularit.");
    } finally {
      setIsLoading(false);
    }
  }, [user?.token, isOpen, showError]);

  useEffect(() => {
    if (isOpen) {
      fetchModalData();
      if (restaurant) {
        setFormData({
          name: restaurant.name || '',
          address: restaurant.address_details?.street ? `${restaurant.address_details.street}, ${restaurant.address_details.city}` : (restaurant.address || ''),
          phone: restaurant.phone_number || '',
          owner_id: restaurant.owner_details?.id || restaurant.owner || '', // Use owner_details.id if available
          is_active: restaurant.is_active !== undefined ? restaurant.is_active : true,
          is_approved: restaurant.is_approved !== undefined ? restaurant.is_approved : false,
          category_ids: restaurant.cuisine_types ? restaurant.cuisine_types.map(cat => cat.id) : [],
          description: restaurant.description || '',
        });
        setImagePreview(restaurant.main_image_url_placeholder || restaurant.image || '');
        setImageFile(null); // Reset image file on edit
      } else {
        setFormData(initialFormData);
        setImagePreview('');
      }
      setErrors({});
    }
  }, [restaurant, isOpen, fetchModalData]);

  const handleChange = (e) => {
    const { name, value, type, checked, files } = e.target;
    if (type === 'checkbox') {
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else if (type === 'file') {
      const file = files[0];
      setImageFile(file || null); // Store the file object
      if (file) {
        setImagePreview(URL.createObjectURL(file));
      } else {
        // If file is removed, revert to original image if editing, or clear if new
        setImagePreview(restaurant?.main_image_url_placeholder || restaurant?.image || '');
      }
    } else if (name === "category_ids") { // Handle multi-select for categories
        const selectedIds = Array.from(e.target.selectedOptions, option => parseInt(option.value));
        setFormData(prev => ({ ...prev, category_ids: selectedIds }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
    if (errors[name]) setErrors(prev => ({ ...prev, [name]: null }));
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.name.trim()) newErrors.name = "Emri i restorantit është i detyrueshëm.";
    if (!formData.address.trim()) newErrors.address = "Adresa është e detyrueshme.";
    if (!formData.phone.trim()) newErrors.phone = "Telefoni është i detyrueshëm.";
    else if (!/^[0-9\s+\-()]{7,15}$/.test(formData.phone)) newErrors.phone = "Formati i telefonit invalid.";
    // if (!formData.categories_text.trim()) newErrors.categories_text = "Duhet të specifikoni të paktën një kategori.";
    if (!formData.category_ids || formData.category_ids.length === 0) newErrors.category_ids = "Duhet të zgjidhni të paktën një kategori.";
    if (!restaurant && !formData.owner_id) newErrors.owner_id = "Pronari është i detyrueshëm për restorante të reja.";
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
        setFormError("Ju lutem korrigjoni gabimet në formular.");
        return;
    }
    setFormError(null);
    setIsSaving(true);
    
    const finalPayload = {
      name: formData.name,
      address: formData.address, // Backend might need to parse this into street, city, etc. or expect structured address
      phone_number: formData.phone,
      owner_id: formData.owner_id ? parseInt(formData.owner_id) : null,
      is_active: formData.is_active,
      is_approved: formData.is_approved,
      cuisine_type_ids: formData.category_ids, // Ensure backend expects 'cuisine_type_ids'
      description: formData.description,
    };


    try {
      let savedRestaurant;
      if (restaurant?.id) {
        // Pass imageFile to updateRestaurant
        savedRestaurant = await adminApi.updateRestaurant(restaurant.id, finalPayload, imageFile);
        showSuccess("Restoranti u përditësua me sukses!");
      } else {
        // Pass imageFile to createRestaurant
        savedRestaurant = await adminApi.createRestaurant(finalPayload, imageFile);
        showSuccess("Restoranti u shtua me sukses!");
      }
      onSave(savedRestaurant);
      onClose();
    } catch (error) {
      console.error("Failed to save restaurant", error);
      const errMsg = error.response?.data?.detail || error.message || "Gabim gjatë ruajtjes.";
      showError(errMsg);
      if(error.response?.data?.errors) setErrors(error.response.data.errors);
    } finally {
      setIsSaving(false);
    }
  };

  const TabButton = ({ tabKey, children }) => (
    <button
      type="button"
      onClick={() => setActiveTab(tabKey)}
      className={`px-3 py-2 text-sm font-medium rounded-md transition-colors
        ${activeTab === tabKey 
          ? 'bg-primary-500 text-white dark:bg-primary-600' 
          : 'text-gray-600 hover:bg-gray-100 dark:text-slate-300 dark:hover:bg-slate-700'
        }`}
    >
      {children}
    </button>
  );

  const SectionIcon = ({ icon: Icon }) => Icon ? <Icon className="h-5 w-5 text-gray-400 dark:text-slate-500 mr-2" /> : null;


  if (!isOpen) return null;

  return (
    <ModalShell isOpen={isOpen} onClose={onClose} title={restaurant ? "Modifiko Restorantin" : "Shto Restorant të Ri"}
      className="max-w-3xl" // Wider modal for more fields
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="mb-4 border-b border-gray-200 dark:border-slate-700">
            <nav className="flex flex-wrap -mb-px space-x-1 sm:space-x-2" aria-label="Tabs">
                <TabButton tabKey="basic"><SectionIcon icon={BuildingStorefrontIcon}/>Bazike</TabButton>
                <TabButton tabKey="owner"><SectionIcon icon={UserCircleIcon}/>Pronari</TabButton>
                <TabButton tabKey="address"><SectionIcon icon={MapPinIcon}/>Adresa</TabButton>
                <TabButton tabKey="details"><SectionIcon icon={PhotoIcon}/>Detaje</TabButton>
                <TabButton tabKey="hours"><SectionIcon icon={ClockIcon}/>Orari</TabButton>
                <TabButton tabKey="tags"><SectionIcon icon={TagIcon}/>Etiketa</TabButton>
                <TabButton tabKey="delivery"><SectionIcon icon={CurrencyDollarIcon}/>Dërgesa</TabButton>
            </nav>
        </div>

        {/* Basic Info Tab */}
        {activeTab === 'basic' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Informacioni Bazë i Restorantit</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-5 gap-y-4">
                    <div>
                        <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Emri i Restorantit</label>
                        <input type="text" name="name" id="name" value={formData.name} onChange={handleChange} required
                                className={`input-form ${errors.name ? 'input-form-error' : ''}`}/>
                        {errors.name && <p className="input-error-message">{errors.name}</p>}
                    </div>
                    <div>
                        <label htmlFor="phone" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Telefoni</label>
                        <input type="tel" name="phone" id="phone" value={formData.phone} onChange={handleChange} required
                                className={`input-form ${errors.phone ? 'input-form-error' : ''}`}/>
                        {errors.phone && <p className="input-error-message">{errors.phone}</p>}
                    </div>
                </div>

                <div>
                  <label htmlFor="address" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Adresa e Plotë</label>
                  <input type="text" name="address" id="address" value={formData.address} onChange={handleChange} required
                         className={`input-form ${errors.address ? 'input-form-error' : ''}`}/>
                  {errors.address && <p className="input-error-message">{errors.address}</p>}
                </div>

                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Përshkrimi (Opsional)</label>
                    <textarea name="description" id="description" value={formData.description} onChange={handleChange} rows="3"
                              className="input-form"></textarea>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-5 gap-y-4">
                    <div>
                    <label htmlFor="owner_id" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Pronari</label>
                    <select name="owner_id" id="owner_id" value={formData.owner_id} onChange={handleChange}
                            className={`input-form ${errors.owner_id ? 'input-form-error' : ''}`}
                            required={!restaurant} // Required only if creating new restaurant
                    >
                        <option value="">Zgjidh Pronarin</option>
                        {potentialOwners.map(owner => (
                        <option key={owner.id} value={owner.id}>{owner.username} ({owner.email})</option>
                        ))}
                    </select>
                    {errors.owner_id && <p className="input-error-message">{errors.owner_id}</p>}
                    </div>
                    <div>
                        <label htmlFor="category_ids" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Kategoritë e Kuzhinës
                        </label>
                        <select 
                            multiple 
                            name="category_ids" 
                            id="category_ids" 
                            value={formData.category_ids.map(String)} // Value should be array of strings for multi-select
                            onChange={handleChange} 
                            required
                            className={`input-form h-32 ${errors.category_ids ? 'input-form-error' : ''}`}
                        >
                            {allGlobalCategories.map(cat => (
                                <option key={cat.id} value={cat.id}>{cat.name}</option>
                            ))}
                        </select>
                        {errors.category_ids && <p className="input-error-message">{errors.category_ids}</p>}
                        
                    </div>
                </div>


                <div className="flex items-center space-x-6 pt-2">
                    <div className="flex items-center">
                        <input id="is_active" name="is_active" type="checkbox" checked={formData.is_active} onChange={handleChange}
                            className="h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-500 rounded focus:ring-primary-500"/>
                        <label htmlFor="is_active" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">Aktiv</label>
                    </div>
                    <div className="flex items-center">
                        <input id="is_approved" name="is_approved" type="checkbox" checked={formData.is_approved} onChange={handleChange}
                            className="h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-500 rounded focus:ring-primary-500"/>
                        <label htmlFor="is_approved" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">Miratuar</label>
                    </div>
                </div>
            </div>
        )}

        {/* Owner Info Tab */}
        {activeTab === 'owner' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Informacioni i Pronarit</h3>
                {/* Owner information fields can be added here if needed */}
            </div>
        )}
        
        {/* Address Tab */}
        {activeTab === 'address' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Adresa e Restorantit</h3>
                {/* Address fields are already in the Basic Info tab, consider removing duplicates */}
            </div>
        )}

        {/* Details Tab (Logo, Cover, etc.) */}
        {activeTab === 'details' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Detajet Vizuale</h3>
                <div>
                    <label htmlFor="image" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Foto e Restorantit (Opsionale)</label>
                    <input type="file" name="image" id="image" accept="image/*" onChange={handleChange}
                           className="mt-1 block w-full text-sm text-gray-500 dark:text-gray-400
                                      file:mr-4 file:py-2 file:px-4
                                      file:rounded-md file:border-0 file:shadow-sm
                                      file:text-sm file:font-semibold
                                      file:bg-primary-50 dark:file:bg-gray-600 file:text-primary-700 dark:file:text-primary-300
                                      hover:file:bg-primary-100 dark:hover:file:bg-gray-500 cursor-pointer" />
                    {imagePreview && (
                        <div className="mt-3 relative group w-32 h-32">
                            <img src={imagePreview} alt="Parapamje" className="h-32 w-32 rounded-md object-cover shadow-md"/>
                             <Button variant="icon" color="danger" size="xs" type="button" 
                                    onClick={() => { 
                                        setImageFile(null); 
                                        // If editing, revert to original image, else clear
                                        setImagePreview(restaurant?.main_image_url_placeholder || restaurant?.image || '');
                                    }}
                                    className="absolute top-1 right-1 p-0.5 opacity-0 group-hover:opacity-100 transition-opacity !rounded-full bg-red-500 hover:bg-red-600 text-white"
                                    title="Hiq foton e re / Kthe foton origjinale">
                                <XMarkIcon className="h-3 w-3"/>
                            </Button>
                        </div>
                    )}
                </div>
            </div>
        )}

        {/* Opening Hours Tab */}
        {activeTab === 'hours' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Orari i Punës</h3>
                {/* Opening hours fields can be added here */}
            </div>
        )}

        {/* Tags & Categories Tab */}
        {activeTab === 'tags' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Kategoritë dhe Etiketat</h3>
                {/* Tags and categories management can be added here */}
            </div>
        )}

        {/* Delivery Options Tab */}
        {activeTab === 'delivery' && (
            <div className="space-y-4 animate-fadeIn">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 border-b pb-1 mb-3">Opsionet e Dërgesës</h3>
                {/* Delivery options fields can be added here */}
            </div>
        )}


        <div className="pt-5 flex flex-col sm:flex-row justify-end items-center gap-3 border-t border-gray-200 dark:border-slate-700">
          {formError && <p className="text-sm text-red-600 dark:text-red-400">{formError}</p>}
          <Button type="button" variant="ghost" onClick={onClose} iconLeft={XMarkIcon} disabled={isSaving}>
            Anulo
          </Button>
          <Button type="submit" isLoading={isSaving} disabled={isSaving || isLoading} iconLeft={CheckCircleIcon}>
            {restaurant ? 'Ruaj Ndryshimet' : 'Shto Restorantin'}
          </Button>
        </div>
      </form>
    </ModalShell>
  );
};

export default RestaurantFormModal;

// End of File: src/modules/admin/components/RestaurantFormModal.jsx
//--------------------------------------------------

// File: src/modules/admin/components/RestaurantTableRow.jsx

// src/modules/admin/components/RestaurantTableRow.jsx
import React from "react";
// import HeroIcon from "../../../components/HeroIcon"; // FSHIJE KËTË
import { PencilIcon, TrashIcon, CheckCircleIcon, XCircleIcon, ShieldCheckIcon, ShieldExclamationIcon, EyeIcon } from '@heroicons/react/24/outline';
import Button from "../../../components/Button";

const RestaurantTableRow = ({ restaurant, onEdit, onDelete, onToggleActive, onToggleApproval }) => {
  const getApprovalStatusPill = (status) => {
    switch (status) {
      case 'APPROVED':
        return <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-100"><ShieldCheckIcon className="h-4 w-4 mr-1 text-green-500 dark:text-green-300"/>Aprovuar</span>;
      case 'PENDING':
        return <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-700 dark:text-yellow-100"><ShieldExclamationIcon className="h-4 w-4 mr-1 text-yellow-500 dark:text-yellow-300"/>Në Pritje</span>;
      case 'REJECTED':
        return <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-100"><ShieldExclamationIcon className="h-4 w-4 mr-1 text-red-500 dark:text-red-300"/>Refuzuar</span>;
      default:
        return <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100">{status}</span>;
    }
  };

  const getActivityStatusPill = (isActive) => {
    return isActive ? (
      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-100">
        <CheckCircleIcon className="h-4 w-4 mr-1 text-green-500 dark:text-green-300" /> Aktiv
      </span>
    ) : (
      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-100">
        <XCircleIcon className="h-4 w-4 mr-1 text-red-500 dark:text-red-300" /> Joaktiv
      </span>
    );
  };

  return (
    <tr className="hover:bg-gray-50 dark:hover:bg-slate-700/30 transition-colors">
      <td className="px-4 py-3 whitespace-nowrap">
        <div className="flex items-center">
          <div className="flex-shrink-0 h-10 w-10">
            <img className="h-10 w-10 rounded-md object-cover" src={restaurant.logo_url || `https://ui-avatars.com/api/?name=${restaurant.name[0]}&background=0D8ABC&color=fff`} alt={restaurant.name} />
          </div>
          <div className="ml-3">
            <div className="text-sm font-medium text-gray-900 dark:text-white">{restaurant.name}</div>
            <div className="text-xs text-gray-500 dark:text-slate-400">{restaurant.address_summary || restaurant.city}</div>
          </div>
        </div>
      </td>
      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{restaurant.owner_email || 'N/A'}</td>
      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{restaurant.phone_number || 'N/A'}</td>
      <td className="px-4 py-3 whitespace-nowrap">
        {getApprovalStatusPill(restaurant.approval_status)}
      </td>
      <td className="px-4 py-3 whitespace-nowrap">
        {getActivityStatusPill(restaurant.is_active)}
      </td>
      <td className="px-4 py-3 whitespace-nowrap text-right text-sm font-medium space-x-1">
        <Button variant="icon" onClick={() => onEdit(restaurant)} className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200" title="Modifiko">
          <PencilIcon className="h-5 w-5" />
        </Button>
        {restaurant.approval_status !== 'APPROVED' && (
          <Button variant="icon" onClick={() => onToggleApproval(restaurant.id, 'APPROVED')} className="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-200" title="Aprovo">
            <ShieldCheckIcon className="h-5 w-5" />
          </Button>
        )}
        {restaurant.approval_status === 'APPROVED' && restaurant.approval_status !== 'REJECTED' && (
           <Button variant="icon" onClick={() => onToggleApproval(restaurant.id, 'REJECTED')} className="text-orange-500 hover:text-orange-700 dark:text-orange-400 dark:hover:text-orange-300" title="Refuzo">
             <ShieldExclamationIcon className="h-5 w-5" />
           </Button>
        )}
         <Button variant="icon" onClick={() => onToggleActive(restaurant.id, !restaurant.is_active)} 
            className={restaurant.is_active ? "text-yellow-500 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300" : "text-green-500 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300"}
            title={restaurant.is_active ? "Çaktivizo" : "Aktivizo"}
        >
          {restaurant.is_active ? <XCircleIcon className="h-5 w-5" /> : <CheckCircleIcon className="h-5 w-5" />}
        </Button>
        <Button variant="icon" onClick={() => onDelete(restaurant.id)} className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200" title="Fshij">
          <TrashIcon className="h-5 w-5" />
        </Button>
      </td>
    </tr>
  );
};

export default RestaurantTableRow;

// End of File: src/modules/admin/components/RestaurantTableRow.jsx
//--------------------------------------------------

// File: src/modules/admin/components/UserFormModal.jsx

// src/modules/admin/components/UserFormModal.jsx
import React, { useState, useEffect } from 'react';
import ModalShell from '../../../components/ModalShell';
import Button from '../../../components/Button';
import { adminApi } from '../../../api/adminApi';
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext';

const UserFormModal = ({ isOpen, onClose, user: existingUser, onSave }) => {
  const { user: adminUser } = useAuth();
  const { showSuccess, showError } = useNotification();

  const initialFormData = {
    username: '',
    email: '',
    password: '',
    role: 'CUSTOMER',
    status: 'ACTIVE', // This might be deprecated if is_active is used primarily
    is_active: true, // Added for clarity, maps to backend's is_active
    first_name: '', // Optional
    last_name: '', // Optional
    is_staff: false, // Added
    is_available_for_delivery: false, // Added for DELIVERY_PERSONNEL
  };

  const [formData, setFormData] = useState(initialFormData);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen) {
      if (existingUser) {
        setFormData({
          username: existingUser.username || '',
          email: existingUser.email || '',
          password: '', // Keep password blank unless specifically changing
          role: existingUser.role || 'CUSTOMER',
          status: existingUser.status || 'ACTIVE', // Potentially map to is_active
          is_active: existingUser.is_active !== undefined ? existingUser.is_active : true,
          first_name: existingUser.first_name || '',
          last_name: existingUser.last_name || '',
          is_staff: existingUser.is_staff || false,
          is_available_for_delivery: existingUser.is_driver_available || existingUser.is_available_for_delivery || false, // check for driverProfile field
        });
      } else {
        setFormData(initialFormData);
      }
      setErrors({});
    }
  }, [existingUser, isOpen]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({ 
        ...prev, 
        [name]: type === 'checkbox' ? checked : value 
    }));
    if (errors[name]) setErrors(prev => ({ ...prev, [name]: null }));
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.username.trim()) newErrors.username = "Emri i përdoruesit është i detyrueshëm.";
    else if (formData.username.length < 3) newErrors.username = "Emri i përdoruesit duhet të jetë së paku 3 karaktere.";
    
    if (!formData.email.trim()) newErrors.email = "Email është i detyrueshëm.";
    else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = "Formati i email-it është invalid.";
    
    if (!existingUser && !formData.password) newErrors.password = "Fjalëkalimi është i detyrueshëm për përdorues të rinj.";
    else if (formData.password && formData.password.length < 6) newErrors.password = "Fjalëkalimi duhet të jetë së paku 6 karaktere.";
    
    if (!formData.role) newErrors.role = "Roli është i detyrueshëm.";
    // Status validation might be removed if is_active is the primary field
    // if (!formData.status) newErrors.status = "Statusi është i detyrueshëm.";
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;
    setIsLoading(true);
    
    const payload = { ...formData };
    if (!payload.password && existingUser) delete payload.password; // Don't send empty password if not changing for existing user
    if (!payload.first_name) delete payload.first_name; // Don't send if empty
    if (!payload.last_name) delete payload.last_name;   // Don't send if empty
    delete payload.status; // Remove if is_active is primary

    // Ensure is_available_for_delivery is only sent if role is DELIVERY_PERSONNEL
    if (payload.role !== 'DELIVERY_PERSONNEL' && payload.role !== 'DRIVER') {
        delete payload.is_available_for_delivery;
    }


    try {
      let savedUser;
      if (existingUser?.id) {
        const updatePayload = { ...payload };
        delete updatePayload.email; // Email should not be updatable
        savedUser = await adminApi.updateUser(existingUser.id, updatePayload, adminUser.token);
        showSuccess("Përdoruesi u përditësua me sukses!");
      } else {
        savedUser = await adminApi.createUser(payload, adminUser.token);
        showSuccess("Përdoruesi u shtua me sukses!");
      }
      onSave(savedUser);
      onClose();
    } catch (error) {
      console.error("Failed to save user", error);
      const errorMessage = error.response?.data?.detail || error.message || "Gabim gjatë ruajtjes së përdoruesit.";
      showError(errorMessage);
      if (error.response?.data?.errors) {
        setErrors(prev => ({...prev, ...error.response.data.errors}));
      } else if (errorMessage.toLowerCase().includes("username already exists")){
        setErrors(prev => ({...prev, username: "Ky emër përdoruesi ekziston."}));
      } else if (errorMessage.toLowerCase().includes("email already exists")){
        setErrors(prev => ({...prev, email: "Ky email ekziston."}));
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <ModalShell isOpen={isOpen} onClose={onClose} title={existingUser ? "Modifiko Përdoruesin" : "Shto Përdorues të Ri"} className="max-w-lg">
      <form onSubmit={handleSubmit} className="space-y-5 p-1">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-5 gap-y-4">
            <div>
                <label htmlFor="first_name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Emri (Opsional)</label>
                <input type="text" name="first_name" id="first_name" value={formData.first_name} onChange={handleChange}
                        className="input-form" />
            </div>
            <div>
                <label htmlFor="last_name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Mbiemri (Opsional)</label>
                <input type="text" name="last_name" id="last_name" value={formData.last_name} onChange={handleChange}
                        className="input-form" />
            </div>
        </div>
        <div>
          <label htmlFor="username" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Emri i Përdoruesit</label>
          <input type="text" name="username" id="username" value={formData.username} onChange={handleChange} required
                 className={`input-form ${errors.username ? 'input-form-error' : ''}`}/>
          {errors.username && <p className="input-error-message">{errors.username}</p>}
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input type="email" name="email" id="email" value={formData.email} onChange={handleChange} required
                 readOnly={!!existingUser} // Make email readOnly if editing
                 className={`input-form ${errors.email ? 'input-form-error' : ''} ${existingUser ? 'bg-gray-100 dark:bg-slate-700 cursor-not-allowed' : ''}`}/>
          {errors.email && <p className="input-error-message">{errors.email}</p>}
        </div>
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Fjalëkalimi {existingUser ? '(Lëre bosh nëse nuk e ndryshon)' : ''}
          </label>
          <input type="password" name="password" id="password" value={formData.password} onChange={handleChange} 
                 placeholder={existingUser ? "•••••••• (Nuk ndryshon)" : "Vendos fjalëkalimin"}
                 className={`input-form ${errors.password ? 'input-form-error' : ''}`}/>
          {errors.password && <p className="input-error-message">{errors.password}</p>}
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-5 gap-y-4">
            <div>
            <label htmlFor="role" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Roli</label>
            <select name="role" id="role" value={formData.role} onChange={handleChange} required
                    className={`input-form ${errors.role ? 'input-form-error' : ''}`}>
                <option value="CUSTOMER">Klient</option>
                <option value="RESTAURANT_OWNER">Pronar Restoranti</option>
                <option value="DELIVERY_PERSONNEL">Furnizues</option>
                <option value="ADMIN">Admin</option>
            </select>
            {errors.role && <p className="input-error-message">{errors.role}</p>}
            </div>
            <div>
            <label htmlFor="is_active" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Statusi</label>
            <select 
                name="is_active" 
                id="is_active" 
                value={formData.is_active.toString()} // Convert boolean to string for select value
                onChange={(e) => setFormData(prev => ({ ...prev, is_active: e.target.value === 'true' }))} 
                required
                className={`input-form ${errors.is_active ? 'input-form-error' : ''}`}
            >
                <option value="true">Aktiv</option>
                <option value="false">Joaktiv/Pezulluar</option>
            </select>
            {errors.is_active && <p className="input-error-message">{errors.is_active}</p>}
            </div>
        </div>
        <div className="space-y-2 pt-2">
            <div className="flex items-center">
                <input id="is_staff" name="is_staff" type="checkbox" checked={formData.is_staff} onChange={handleChange}
                    className="h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-500 rounded focus:ring-primary-500"/>
                <label htmlFor="is_staff" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">Pjesë e Stafit (Admin Access)</label>
            </div>
            {(formData.role === 'DELIVERY_PERSONNEL' || formData.role === 'DRIVER') && (
                <div className="flex items-center">
                    <input id="is_available_for_delivery" name="is_available_for_delivery" type="checkbox" checked={formData.is_available_for_delivery} onChange={handleChange}
                        className="h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-500 rounded focus:ring-primary-500"/>
                    <label htmlFor="is_available_for_delivery" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">Disponueshëm për Dërgesa (për Shoferët)</label>
                </div>
            )}
        </div>
        <div className="pt-3 flex justify-end space-x-3">
          <Button type="button" variant="ghost" onClick={onClose} disabled={isLoading}>Anulo</Button>
          <Button type="submit" variant="primary" isLoading={isLoading} disabled={isLoading}>
            {existingUser ? 'Ruaj Ndryshimet' : 'Shto Përdorues'}
          </Button>
        </div>
      </form>
    </ModalShell>
  );
};

export default UserFormModal;

// End of File: src/modules/admin/components/UserFormModal.jsx
//--------------------------------------------------

// File: src/modules/admin/components/UserTableRow.jsx

// src/modules/admin/components/UserTableRow.jsx
import React from "react";
// import HeroIcon from "../../../components/HeroIcon"; // FSHIJE KËTË
import { PencilIcon, TrashIcon, CheckCircleIcon, XCircleIcon, KeyIcon, ShieldCheckIcon, UserCircleIcon } from '@heroicons/react/24/outline';
import Button from "../../../components/Button";

const UserTableRow = ({ user, onEdit, onDelete, onToggleStatus, onResetPassword }) => {
  const getRoleDisplay = (role) => {
    switch (role) {
      case 'ADMIN':
        return 'Admin';
      case 'CUSTOMER':
        return 'Klient';
      case 'RESTAURANT_OWNER':
        return 'Pronar Restoranti';
      case 'DELIVERY_PERSONNEL':
        return 'Furnizues';
      default:
        return role;
    }
  };

  const getStatusPill = (isActive) => {
    return isActive ? (
      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-100">
        <CheckCircleIcon className="h-4 w-4 mr-1 text-green-500 dark:text-green-300" /> Aktiv
      </span>
    ) : (
      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-100">
        <XCircleIcon className="h-4 w-4 mr-1 text-red-500 dark:text-red-300" /> Joaktiv
      </span>
    );
  };

  return (
    <tr className="hover:bg-gray-50 dark:hover:bg-slate-700/30 transition-colors">
      <td className="px-4 py-3 whitespace-nowrap">
        <div className="flex items-center">
          <div className="flex-shrink-0 h-10 w-10">
            <img 
                className="h-10 w-10 rounded-full object-cover" 
                src={user.profile_picture_url || `https://ui-avatars.com/api/?name=${user.first_name || user.email[0]}&background=random&color=fff`} 
                alt={`${user.first_name} ${user.last_name}`} 
            />
          </div>
          <div className="ml-3">
            <div className="text-sm font-medium text-gray-900 dark:text-white">{user.first_name} {user.last_name}</div>
            <div className="text-xs text-gray-500 dark:text-slate-400">{user.email}</div>
          </div>
        </div>
      </td>
      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{getRoleDisplay(user.role)}</td>
      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{user.phone_number || 'N/A'}</td>
      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-400">{new Date(user.date_joined).toLocaleDateString('sq-AL')}</td>
      <td className="px-4 py-3 whitespace-nowrap">
        {getStatusPill(user.is_active)}
      </td>
      <td className="px-4 py-3 whitespace-nowrap text-right text-sm font-medium space-x-1">
        <Button variant="icon" onClick={() => onEdit(user)} className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200" title="Modifiko">
          <PencilIcon className="h-5 w-5" />
        </Button>
        <Button variant="icon" onClick={() => onToggleStatus(user.id, !user.is_active)} 
            className={user.is_active ? "text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-200" : "text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-200"}
            title={user.is_active ? "Çaktivizo" : "Aktivizo"}
        >
          {user.is_active ? <XCircleIcon className="h-5 w-5" /> : <CheckCircleIcon className="h-5 w-5" />}
        </Button>
        <Button variant="icon" onClick={() => onResetPassword(user.id)} className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" title="Reset Fjalëkalimin">
          <KeyIcon className="h-5 w-5" />
        </Button>
        <Button variant="icon" onClick={() => onDelete(user.id)} className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200" title="Fshij">
          <TrashIcon className="h-5 w-5" />
        </Button>
      </td>
    </tr>
  );
};

export default UserTableRow;

// End of File: src/modules/admin/components/UserTableRow.jsx
//--------------------------------------------------

// File: src/modules/admin/pages/AdminOrdersPage.jsx

// src/modules/admin/pages/AdminOrdersPage.jsx
import React, { useState, useEffect, useCallback } from "react";
import { adminApi } from "../../../api/adminApi";
import { useNotification } from "../../../context/NotificationContext";
import Button from "../../../components/Button"; // Assuming Button.jsx or Button/index.jsx
// import HeroIcon from "../../../components/HeroIcon"; // FSHIJE KËTË
import { ArrowPathIcon, EyeIcon, ShoppingCartIcon, FunnelIcon, MagnifyingGlassIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import OrderDetailModal from "../../restaurant/components/OrderDetailModal"; // Assuming path, adjust if necessary

const AdminOrdersPage = () => {
  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showSuccess, showError } = useNotification();
  
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const [pagination, setPagination] = useState({
    currentPage: 1,
    totalPages: 1,
    count: 0,
  });

  const fetchOrders = useCallback(async (page = 1) => {
    setIsLoading(true);
    setError(null);
    try {
      const params = { 
        page,
        search: searchTerm,
        status: filterStatus,
      };
      const data = await adminApi.getAllOrders(params);
      setOrders(data.results || []);
      setPagination({
        currentPage: data.current_page || 1,
        totalPages: data.total_pages || 1,
        count: data.count || 0,
      });
    } catch (err) {
      console.error("Failed to load orders:", err);
      setError(err.message || "Problem në ngarkimin e porosive.");
      showError(err.message || "Problem në ngarkimin e porosive.");
    } finally {
      setIsLoading(false);
    }
  }, [searchTerm, filterStatus, showError]);

  useEffect(() => {
    fetchOrders(pagination.currentPage);
  }, [fetchOrders, pagination.currentPage]);

  const handleViewOrderDetails = (order) => {
    setSelectedOrder(order);
    setIsModalOpen(true);
  };
  
  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await adminApi.updateOrderStatus(orderId, newStatus);
      showSuccess(`Statusi i porosisë #${orderId} u ndryshua.`);
      fetchOrders(pagination.currentPage); // Refresh orders
    } catch (err) {
      showError(err.message || "Problem në ndryshimin e statusit të porosisë.");
      console.error("Failed to update order status:", err);
    }
  };

  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= pagination.totalPages) {
      setPagination(prev => ({ ...prev, currentPage: newPage }));
    }
  };
  
  const getStatusColor = (status) => {
    // ... (same as in ManageOrdersPage for restaurant if applicable)
    const colors = {
        PENDING: "text-yellow-600 dark:text-yellow-400 bg-yellow-100 dark:bg-yellow-700/30",
        CONFIRMED: "text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-700/30",
        PREPARING: "text-indigo-600 dark:text-indigo-400 bg-indigo-100 dark:bg-indigo-700/30",
        READY_FOR_PICKUP: "text-purple-600 dark:text-purple-400 bg-purple-100 dark:bg-purple-700/30",
        OUT_FOR_DELIVERY: "text-pink-600 dark:text-pink-400 bg-pink-100 dark:bg-pink-700/30",
        DELIVERED: "text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-700/30",
        CANCELLED: "text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-700/30",
        FAILED: "text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-700/30",
    };
    return colors[status] || "text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-700/30";
  };


  if (error && !isLoading && orders.length === 0) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
            <Button onClick={() => fetchOrders(1)} variant="outline" size="sm" className="ml-auto">Provo Përsëri</Button>
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <ShoppingCartIcon className="h-7 w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Të Gjitha Porositë
        </h1>
        <Button onClick={() => fetchOrders(1)} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading}>
            Rifresko Porositë
        </Button>
      </div>

      {/* Search and Filter Bar */}
      <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
          <div className="relative md:col-span-2">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <MagnifyingGlassIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <input
              type="text"
              placeholder="Kërko (ID, klient, restorant)..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onBlur={() => fetchOrders(1)} // Fetch on blur or use a search button
              className="input-form w-full pl-10"
            />
          </div>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FunnelIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <select
              value={filterStatus}
              onChange={(e) => { setFilterStatus(e.target.value); fetchOrders(1);}}
              className="input-form w-full pl-10"
            >
              <option value="">Të gjitha Statuset</option>
              <option value="PENDING">Në Pritje</option>
              <option value="CONFIRMED">Konfirmuar</option>
              <option value="PREPARING">Në Përgatitje</option>
              <option value="READY_FOR_PICKUP">Gati për Marrje</option>
              <option value="OUT_FOR_DELIVERY">Në Dërgesë</option>
              <option value="DELIVERED">Dorëzuar</option>
              <option value="CANCELLED">Anuluar</option>
              <option value="FAILED">Dështuar</option>
            </select>
          </div>
        </div>
      </div>

      {isLoading && orders.length === 0 && (
         <div className="flex justify-center items-center py-20">
            <ArrowPathIcon className="h-12 w-12 animate-spin text-primary-500" />
         </div>
      )}
      
      {!isLoading && orders.length === 0 && !error && (
        <div className="text-center py-10 bg-white dark:bg-slate-800 rounded-lg shadow">
          <ShoppingCartIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
          <p className="text-xl text-gray-600 dark:text-slate-300">Nuk u gjet asnjë porosi.</p>
          { (searchTerm || filterStatus) && <p className="text-sm text-gray-500 dark:text-slate-400">Provoni të ndryshoni filtrat.</p>}
        </div>
      )}

      {orders.length > 0 && (
        <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-slate-700">
            {/* ... table head ... */}
            <thead className="bg-gray-50 dark:bg-slate-700/50">
              <tr>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">ID Porosie</th>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">Klienti</th>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">Restoranti</th>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">Statusi</th>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">Totali</th>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">Data</th>
                <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">Veprime</th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-slate-700">
              {orders.map((order) => (
                <tr key={order.id} className="hover:bg-gray-50 dark:hover:bg-slate-700/30 transition-colors">
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">#{order.id}</td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{order.customer_name || order.customer_email || 'N/A'}</td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{order.restaurant_name || 'N/A'}</td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm">
                    <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(order.status)}`}>
                      {order.status_display || order.status}
                    </span>
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-300">{parseFloat(order.total_price).toFixed(2)} €</td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-slate-400">{new Date(order.created_at).toLocaleDateString('sq-AL')}</td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium">
                    <Button variant="icon" onClick={() => handleViewOrderDetails(order)} className="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-200" title="Shiko Detajet">
                      <EyeIcon className="h-5 w-5" />
                    </Button>
                    {/* Add other actions like change status if needed */}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      {/* Pagination */}
      {pagination.totalPages > 1 && (
          <div className="flex justify-between items-center pt-4">
              <Button 
                  onClick={() => handlePageChange(pagination.currentPage - 1)} 
                  disabled={pagination.currentPage === 1 || isLoading}
                  variant="outline"
              >
                  Para
              </Button>
              <span className="text-sm text-gray-700 dark:text-slate-300">
                  Faqja {pagination.currentPage} nga {pagination.totalPages} (Totali: {pagination.count} porosi)
              </span>
              <Button 
                  onClick={() => handlePageChange(pagination.currentPage + 1)} 
                  disabled={pagination.currentPage === pagination.totalPages || isLoading}
                  variant="outline"
              >
                  Pas
              </Button>
          </div>
      )}

      {selectedOrder && (
        <OrderDetailModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          order={selectedOrder}
          onUpdateStatus={handleStatusChange} // Admin might have different status update logic
          // isAdminView={true} // Potentially pass a prop if modal behaves differently for admin
        />
      )}
    </div>
  );
};

export default AdminOrdersPage;

// End of File: src/modules/admin/pages/AdminOrdersPage.jsx
//--------------------------------------------------

// File: src/modules/admin/pages/AdminOverviewPage.jsx

// src/modules/admin/pages/AdminOverviewPage.jsx
import React, { useEffect, useState, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { 
    UsersIcon, BuildingStorefrontIcon, ClockIcon, ShoppingCartIcon, CurrencyEuroIcon, 
    ChartPieIcon, ArrowPathIcon, UserPlusIcon, CheckBadgeIcon, UserMinusIcon, ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import { adminApi } from '../../../api/adminApi';
import Button from '../../../components/Button'; // Assuming path

// Modified StatCard to accept IconComponent
const StatCard = ({ title, value, icon: IconComponent, unit, linkTo, color = "primary", isLoading }) => (
    <div className={`bg-white dark:bg-slate-800 shadow-lg rounded-xl p-4 sm:p-5 flex items-center justify-between transition-all hover:shadow-xl`}>
        <div>
            <p className="text-xs sm:text-sm font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">{title}</p>
            {isLoading ? (
                <ArrowPathIcon className="h-6 w-6 animate-spin text-gray-400 dark:text-slate-500 my-1" />
            ) : (
                <p className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-white">
                    {value} {unit && <span className="text-sm font-normal">{unit}</span>}
                </p>
            )}
            {linkTo && !isLoading && (
                <Link to={linkTo} className={`text-xs text-${color}-600 dark:text-${color}-400 hover:underline`}>
                    Shiko më shumë
                </Link>
            )}
        </div>
        {IconComponent && (
            <div className={`p-2.5 bg-${color}-100 dark:bg-${color}-500/20 rounded-full`}>
                <IconComponent className={`h-6 w-6 text-${color}-600 dark:text-${color}-400`} />
            </div>
        )}
    </div>
);

// Helper Component for Activity Items
const ActivityItem = ({ icon: IconComponent, color = "gray", children }) => (
    <li className="flex items-start space-x-3 py-2">
        {IconComponent && (
            <div className={`flex-shrink-0 h-8 w-8 rounded-full bg-${color}-100 dark:bg-${color}-500/20 flex items-center justify-center`}>
                <IconComponent className={`h-5 w-5 text-${color}-600 dark:text-${color}-400`} />
            </div>
        )}
        <div className="flex-1 text-sm text-gray-700 dark:text-slate-300">
            {children}
        </div>
    </li>
);


const AdminOverviewPage = () => {
  const [stats, setStats] = useState(null);
  const [recentActivity, setRecentActivity] = useState([]);
  const [isLoading, setIsLoading] = useState({ stats: true, activities: true });
  const [error, setError] = useState(null);

  const fetchOverviewData = useCallback(async () => {
    setIsLoading({ stats: true, activities: true });
    setError(null);
    try {
      // Simulating fetching multiple data points.
      // In a real scenario, you might have a single dashboard API endpoint or multiple specific ones.
      const [usersData, restaurantsData /*, ordersTodayData */] = await Promise.all([
        adminApi.fetchAllUsers(), // Using existing mock API
        adminApi.fetchAllRestaurants(), // Using existing mock API
        // adminApi.fetchOrdersSummaryForToday(), // Placeholder for orders data
      ]);

      const mockOrdersToday = [ // Mocking some orders for revenue calculation
        { total_amount: "25.50", status: "DELIVERED" },
        { total_amount: "15.00", status: "DELIVERED" },
        { total_amount: "30.00", status: "PREPARING" }, // Active order
      ];

      const activeRestaurants = restaurantsData.filter(r => r.is_active && r.is_approved).length;
      const pendingApprovals = restaurantsData.filter(r => !r.is_approved).length; // Restaurants pending approval
      
      const totalOrdersToday = mockOrdersToday.length;
      const totalRevenueToday = mockOrdersToday
        .filter(o => o.status === 'DELIVERED') // Only count delivered for revenue
        .reduce((sum, order) => sum + parseFloat(order.total_amount), 0);

      setStats({
        totalUsers: usersData.length,
        activeRestaurants: activeRestaurants,
        pendingApprovals: pendingApprovals,
        totalOrdersToday: totalOrdersToday,
        totalRevenueToday: totalRevenueToday,
      });

      // Mock recent activities based on fetched data or a separate API call
      const activities = [];
      if (usersData.length > 0) activities.push({ id: `user-${usersData[usersData.length-1].id}`, type: 'NEW_USER', description: `Përdoruesi "${usersData[usersData.length-1].username}" u shtua.`, timestamp: usersData[usersData.length-1].date_joined });
      if (restaurantsData.length > 0 && pendingApprovals > 0) {
        const pendingRestaurant = restaurantsData.find(r => !r.is_approved);
        if (pendingRestaurant) activities.push({ id: `rest-${pendingRestaurant.id}`, type: 'NEW_RESTAURANT', description: `Restoranti "${pendingRestaurant.name}" kërkon miratim.`, timestamp: pendingRestaurant.date_created });
      }
      // Sort activities by timestamp desc, take latest 5
      setRecentActivity(activities.sort((a,b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0,5));
      setIsLoading(prev => ({ ...prev, stats: false }));

    } catch (err) {
      console.error("Failed to load overview data", err);
      setError(err.message || "S'u mund të ngarkoheshin të dhënat.");
      setIsLoading({ stats: false, activities: false });
    } finally {
      // Simulate activities loading separately or if it's part of a different flow
      setTimeout(() => setIsLoading(prev => ({ ...prev, activities: false })), 500);
    }
  }, []);

  useEffect(() => {
    fetchOverviewData();
  }, [fetchOverviewData]);


  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white">Pasqyra e Administratorit</h1>
        <Button variant="outline" onClick={fetchOverviewData} isLoading={isLoading.stats || isLoading.activities} disabled={isLoading.stats || isLoading.activities}
                iconLeft={ArrowPathIcon} 
                iconLeftClassName={`h-4 w-4 ${ (isLoading.stats || isLoading.activities) ? 'animate-spin': ''}`}>
          Rifresko
        </Button>
      </div>

      {error && <div className="bg-red-100 border-l-4 border-red-500 text-red-700 dark:bg-red-700/20 dark:text-red-300 p-4 rounded-md mb-6" role="alert">
        <p className="font-bold">Gabim</p>
        <p>{error}</p>
      </div>}

      {/* Stats Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 mb-8">
        <StatCard title="Përdorues Gjithsej" value={stats?.totalUsers} icon={UsersIcon} linkTo="/admin/users" color="blue" isLoading={isLoading.stats} />
        <StatCard title="Restorante Aktive" value={stats?.activeRestaurants} icon={BuildingStorefrontIcon} linkTo="/admin/restaurants" color="green" isLoading={isLoading.stats} />
        <StatCard title="Miratime në Pritje" value={stats?.pendingApprovals} icon={ClockIcon} linkTo="/admin/restaurants?approval=PENDING" color="yellow" isLoading={isLoading.stats}/>
        <StatCard title="Porosi Sot" value={stats?.totalOrdersToday} icon={ShoppingCartIcon} linkTo="/admin/orders" color="purple" isLoading={isLoading.stats} />
        <StatCard title="Të Ardhura Sot" value={stats?.totalRevenueToday?.toFixed(2)} unit="€" icon={CurrencyEuroIcon} linkTo="/admin/orders" color="teal" isLoading={isLoading.stats}/>
      </div>

      {/* Main Content Area: Charts and Recent Activities */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5">
          <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-3">Analitika e Shitjeve (Shembull)</h2>
          <div className="h-64 bg-gray-100 dark:bg-slate-700 rounded-md flex items-center justify-center border border-dashed border-gray-300 dark:border-gray-600">
            <p className="text-gray-400 dark:text-slate-500">
                <ChartPieIcon className="h-10 w-10 mx-auto mb-2 text-gray-400 dark:text-gray-500"/>
                Grafiku i shitjeve do të shfaqet këtu.
            </p>
            {/* Example: <LineChart width={500} height={300} data={chartData}>...</LineChart> */}
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5">
          <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-3">Aktivitetet e Fundit</h2>
          {isLoading.activities ? (
            <div className="flex justify-center items-center h-40">
                <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-gray-500"></div>
            </div>
          ) : (
            <ul className="divide-y divide-gray-200 dark:divide-slate-700 max-h-80 overflow-y-auto">
              {recentActivity.length > 0 ? (
                recentActivity.map(activity => (
                  <ActivityItem 
                    key={activity.id} 
                    icon={
                        activity.type === 'NEW_USER' ? UserPlusIcon :
                        activity.type === 'NEW_RESTAURANT' ? BuildingStorefrontIcon :
                        activity.type === 'ORDER_PLACED' ? ShoppingCartIcon :
                        activity.type === 'USER_SUSPENDED' ? UserMinusIcon :
                        activity.type === 'RESTAURANT_APPROVED' ? CheckBadgeIcon :
                        ClockIcon // Default icon
                    }
                    color={
                        activity.type === 'NEW_USER' ? 'green' :
                        activity.type === 'NEW_RESTAURANT' ? 'sky' :
                        activity.type === 'ORDER_PLACED' ? 'blue' :
                        activity.type === 'USER_SUSPENDED' ? 'red' :
                        activity.type === 'RESTAURANT_APPROVED' ? 'teal' :
                        'gray'
                    }
                  >
                    <p dangerouslySetInnerHTML={{ __html: activity.description }} /> {/* Assuming description is safe HTML or plain text */}
                    <time className="text-xs text-gray-400 dark:text-slate-500">{new Date(activity.timestamp).toLocaleString('sq-AL')}</time>
                  </ActivityItem>
                ))
              ) : (
                <p className="text-sm text-gray-500 dark:text-slate-400 py-5 text-center">Nuk ka aktivitete të fundit për të shfaqur.</p>
              )}
            </ul>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminOverviewPage;

// End of File: src/modules/admin/pages/AdminOverviewPage.jsx
//--------------------------------------------------

// File: src/modules/admin/pages/AdminSettingsPage.jsx

// src/modules/admin/pages/AdminSettingsPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import Button from '../../../components/Button';
import { IdentificationIcon, BanknotesIcon, MegaphoneIcon, TagIcon, CheckCircleIcon, ArrowPathIcon, Cog6ToothIcon, ExclamationTriangleIcon, InformationCircleIcon } from '@heroicons/react/24/outline';
import { adminApi } from '../../../api/adminApi'; // Using mock API
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext';

const AdminSettingsPage = () => {
  const { user } = useAuth();
  const { showSuccess, showError } = useNotification();
  
  const initialSettings = {
    platformName: 'FoodDash Pro',
    platformEmail: 'support@fooddash.com',
    commissionRate: '0.10', // 10%
    deliveryFeeFixed: '1.50', // 1.50 EUR
    minOrderValue: '5.00', // Minimum order value for delivery
    currencySymbol: '€',
    globalAnnouncement: '',
    maintenanceMode: false,
  };
  const [settings, setSettings] = useState(initialSettings);
  const [isLoading, setIsLoading] = useState(false);
  const [isFetching, setIsFetching] = useState(true);
  const [errors, setErrors] = useState({});

  const fetchSettings = useCallback(async () => {
    if (!user?.token) {
        setIsFetching(false); // Ensure fetching stops if no token
        return;
    }
    setIsFetching(true);
    setErrors({});
    try {
      // const currentSettings = await adminApi.getPlatformSettings(user.token);
      setSettings(initialSettings); 
    } catch (error) {
      console.error("Failed to fetch settings:", error);
      showError(error.message || "S'u mund të ngarkoheshin konfigurimet.");
    } finally {
      setIsFetching(false);
    }
  }, [user?.token, showError]); // Removed initialSettings from deps as it's constant here

  useEffect(() => {
    fetchSettings();
  }, [fetchSettings]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setSettings(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
    if (errors[name]) setErrors(prev => ({ ...prev, [name]: null }));
  };

  const validateField = (name, value) => {
    let errorMsg = '';
    if (['commissionRate', 'deliveryFeeFixed', 'minOrderValue'].includes(name)) {
        if (value === '' || isNaN(parseFloat(value)) || parseFloat(value) < 0) { // Check for empty string too
            errorMsg = "Vlera duhet të jetë një numër pozitiv.";
        } else if (name === 'commissionRate' && (parseFloat(value) > 1)) { // Max 100%
            errorMsg = "Komisioni duhet të jetë ndërmjet 0 dhe 1 (p.sh., 0.1 për 10%).";
        }
    }
    if (name === 'platformEmail' && value && !/\S+@\S+\.\S+/.test(value)) {
        errorMsg = "Formati i email-it është invalid.";
    }
    // Update errors state only if there's a change to avoid infinite loops if validateField is in useEffect
    setErrors(prev => {
        if (prev[name] !== (errorMsg || null)) {
            return {...prev, [name]: errorMsg || null};
        }
        return prev;
    });
    return !errorMsg;
  };

  const handleSaveSettings = async (e) => {
    e.preventDefault();
    if (!user?.token) return;

    let formIsValid = true;
    // Create a temporary errors object to collect all validation messages at once
    const currentValidationErrors = {};
    Object.keys(settings).forEach(key => {
        if (!validateField(key, settings[key])) { // validateField now updates errors state directly
            formIsValid = false; // though its direct return value indicates validity for this field
            // We re-check errors state after loop to be sure
        }
    });
    // After all fields validated, check the errors state
     if (Object.values(errors).some(err => err !== null)) { // Re-check based on state after all validations
        formIsValid = false;
    }


    if (!formIsValid) {
        showError("Ju lutem korrigjoni gabimet në formular.");
        return;
    }

    setIsLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log("Settings saved (mock):", settings);
      showSuccess("Konfigurimet u ruajtën me sukses!");
    } catch (error) {
      console.error("Failed to save settings:", error);
      showError(error.message || "Gabim gjatë ruajtjes së konfigurimeve.");
    } finally {
      setIsLoading(false);
    }
  };

  // SettingSection is defined outside if it doesn't depend on AdminSettingsPage's state/props directly
  // Or inside if it needs access to its scope (less common for this kind of structure)

  if (isFetching) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-150px)]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary-500"></div>
      </div>
    );
  }
  
  // JSX return part:
  return (
    <div className="container mx-auto">
      <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white mb-8">Konfigurimet e Platformës</h1>

      <form onSubmit={handleSaveSettings} className="bg-white dark:bg-gray-800 shadow-xl rounded-xl p-6 md:p-8 space-y-8">
        
        <SettingSection title="Informacionet Bazë të Platformës" description="Emri dhe logoja e platformës." icon={IdentificationIcon}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                <div>
                    <label htmlFor="platformName" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Emri i Platformës</label>
                    <input type="text" name="platformName" id="platformName" value={settings.platformName} onChange={handleChange} className="input-form"/>
                </div>
                <div>
                    <label htmlFor="platformEmail" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Email Kryesor i Suportit</label>
                    <input type="email" name="platformEmail" id="platformEmail" value={settings.platformEmail} onChange={(e) => {handleChange(e); validateField(e.target.name, e.target.value);}} className={`input-form ${errors.platformEmail ? 'input-form-error' : ''}`}/>
                    {errors.platformEmail && <p className="input-error-message">{errors.platformEmail}</p>}
                </div>
            </div>
        </SettingSection> {/* Correctly closed */}

        <SettingSection title="Financat & Pagesat" description="Konfigurime për monedhën, tarifat, etj." icon={BanknotesIcon}>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4">
            <div>
              <label htmlFor="commissionRate" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Norma e Komisionit (0.0 - 1.0)</label>
              <input type="number" name="commissionRate" id="commissionRate" value={settings.commissionRate} onChange={(e) => {handleChange(e); validateField(e.target.name, e.target.value);}} step="0.01" min="0" max="1" className={`input-form ${errors.commissionRate ? 'input-form-error' : ''}`} placeholder="P.sh., 0.10"/>
              {errors.commissionRate && <p className="input-error-message">{errors.commissionRate}</p>}
            </div>
            <div>
              <label htmlFor="deliveryFeeFixed" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Tarifa Fikse e Dërgesës ({settings.currencySymbol})</label>
              <input type="number" name="deliveryFeeFixed" id="deliveryFeeFixed" value={settings.deliveryFeeFixed} onChange={(e) => {handleChange(e); validateField(e.target.name, e.target.value);}} step="0.01" min="0" className={`input-form ${errors.deliveryFeeFixed ? 'input-form-error' : ''}`} placeholder="P.sh., 1.50"/>
               {errors.deliveryFeeFixed && <p className="input-error-message">{errors.deliveryFeeFixed}</p>}
            </div>
            <div>
              <label htmlFor="minOrderValue" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Vlera Minimale e Porosisë ({settings.currencySymbol})</label>
              <input type="number" name="minOrderValue" id="minOrderValue" value={settings.minOrderValue} onChange={(e) => {handleChange(e); validateField(e.target.name, e.target.value);}} step="0.01" min="0" className={`input-form ${errors.minOrderValue ? 'input-form-error' : ''}`} placeholder="P.sh., 5.00"/>
              {errors.minOrderValue && <p className="input-error-message">{errors.minOrderValue}</p>}
            </div>
          </div>
        </SettingSection> {/* Correctly closed */}

        <SettingSection title="Njoftimet & Marketingu" description="Menaxho shabllonet e email-eve dhe fushatat." icon={MegaphoneIcon}>
          <div>
            <label htmlFor="globalAnnouncement" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Njoftim Global (shfaqet në krye)</label>
            <textarea name="globalAnnouncement" id="globalAnnouncement" rows="3" value={settings.globalAnnouncement} onChange={handleChange} className="input-form" placeholder="Shkruani njoftimin tuaj këtu..."></textarea>
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">Lëreni bosh për të mos shfaqur asnjë njoftim.</p>
          </div>
           <div className="flex items-center pt-2">
                <input id="maintenanceMode" name="maintenanceMode" type="checkbox" checked={settings.maintenanceMode} onChange={handleChange}
                    className="h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-500 rounded focus:ring-primary-500"/>
                <label htmlFor="maintenanceMode" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">Aktivizo Modin e Mirëmbajtjes</label>
            </div>
            {settings.maintenanceMode && <p className="text-xs text-yellow-600 dark:text-yellow-400 mt-1">Kujdes: Aktivizimi i këtij modi do të kufizojë aksesin në platformë për përdoruesit e rregullt.</p>}
        </SettingSection> {/* Correctly closed */}
        
         <SettingSection title="Kategoritë & Etiketat" description="Menaxho llojet e kuzhinave dhe etiketat e tjera." icon={TagIcon}>
            <p className="text-sm text-gray-600 dark:text-gray-400">Ky seksion do të lejojë shtimin, modifikimin, dhe fshirjen e kategorive globale të kuzhinës (p.sh., "Italiane", "Kineze", "Tradicionale") që restorantet mund të zgjedhin.</p>
            <div className="mt-3">
                 <span className="text-xs italic text-gray-500 dark:text-gray-400">(Funksionalitet në zhvillim)</span>
            </div>
        </SettingSection> {/* Correctly closed */}

        <div className="pt-6 flex justify-end border-t border-gray-200 dark:border-gray-700">
          <Button type="submit" variant="primary" size="lg" isLoading={isLoading} disabled={isLoading || isFetching}>
            <CheckCircleIcon className="h-5 w-5 mr-2"/>
            Ruaj Konfigurimet
          </Button>
        </div>
      </form> {/* Correctly closed form */}
    </div> // Correctly closed main div
  ); // Correctly closed return parenthesis
}; // Correctly closed component

// Define SettingSection here if it's not imported
const SettingSection = ({ title, description, icon: IconComponent, children }) => (
  <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6">
    <div className="flex items-start mb-3">
      {IconComponent && <IconComponent className="h-7 w-7 text-primary-500 dark:text-primary-400 mr-3 flex-shrink-0" />}
      <div>
        <h2 className="text-lg sm:text-xl font-semibold text-gray-800 dark:text-white">{title}</h2>
        {description && <p className="text-xs sm:text-sm text-gray-500 dark:text-slate-400 mt-0.5">{description}</p>}
      </div>
    </div>
    <div className="space-y-4">
      {children}
    </div>
  </div>
);

export default AdminSettingsPage;

// End of File: src/modules/admin/pages/AdminSettingsPage.jsx
//--------------------------------------------------

// File: src/modules/admin/pages/ManageRestaurantsPage.jsx

// src/modules/admin/pages/ManageRestaurantsPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { adminApi } from '../../../api/adminApi';
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext';
import Button from '../../../components/Button';
import { ArrowPathIcon, PlusCircleIcon, MagnifyingGlassIcon, FunnelIcon, XCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import RestaurantTableRow from '../components/RestaurantTableRow';
import RestaurantFormModal from '../components/RestaurantFormModal';
import ConfirmationModal from '../../../components/ConfirmationModal';

const ManageRestaurantsPage = () => {
  const [restaurants, setRestaurants] = useState([]);
  const [allGlobalCategories, setAllGlobalCategories] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth(); // Assuming user token is needed for adminApi calls implicitly via apiService
  const { showSuccess, showError } = useNotification();

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingRestaurant, setEditingRestaurant] = useState(null);
  
  const [confirmActionProps, setConfirmActionProps] = useState({ isOpen: false });

  const [filters, setFilters] = useState({
    activity: 'ALL', // 'ALL', 'ACTIVE', 'INACTIVE'
    approval: 'ALL', // 'ALL', 'APPROVED', 'PENDING'
    searchTerm: '',
  });

  const fetchRestaurantsAndCategories = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      // Pass filters to API call if backend supports it
      // Example: const restaurantsData = await adminApi.fetchAllRestaurants({ 
      //   is_active: filters.activity === 'ACTIVE' ? true : filters.activity === 'INACTIVE' ? false : undefined,
      //   is_approved: filters.approval === 'APPROVED' ? true : filters.approval === 'PENDING' ? false : undefined,
      //   search: filters.searchTerm
      // });
      const [restaurantsData, categoriesData] = await Promise.all([
        adminApi.fetchAllRestaurants(), // Modify to pass filters if backend supports
        adminApi.fetchAllRestaurantCategories()
      ]);
      
      // Apply filtering on frontend if backend doesn't support it (less efficient for large datasets)
      let filteredRestaurants = restaurantsData || [];
      if (filters.activity !== 'ALL') {
        filteredRestaurants = filteredRestaurants.filter(r => r.is_active === (filters.activity === 'ACTIVE'));
      }
      if (filters.approval !== 'ALL') {
        filteredRestaurants = filteredRestaurants.filter(r => r.is_approved === (filters.approval === 'APPROVED'));
      }
      if (filters.searchTerm) {
        const lowerSearchTerm = filters.searchTerm.toLowerCase();
        filteredRestaurants = filteredRestaurants.filter(r => 
            r.name.toLowerCase().includes(lowerSearchTerm) ||
            (r.owner_details?.username && r.owner_details.username.toLowerCase().includes(lowerSearchTerm)) ||
            r.address.toLowerCase().includes(lowerSearchTerm)
        );
      }

      setRestaurants(filteredRestaurants);
      setAllGlobalCategories(categoriesData || []);
    } catch (err) {
      console.error("Failed to fetch restaurants or categories:", err);
      const errMsg = err.message || "S'u mund të ngarkoheshin të dhënat.";
      setError(errMsg);
      showError(errMsg);
    } finally {
      setIsLoading(false);
    }
  }, [user?.token, showError, filters]);

  useEffect(() => {
    fetchRestaurantsAndCategories();
  }, [fetchRestaurantsAndCategories]);

  const handleOpenModal = (restaurant = null) => {
    setEditingRestaurant(restaurant);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingRestaurant(null);
  };

  const handleSaveRestaurant = (savedRestaurant) => {
    // Instead of optimistic update, re-fetch for consistency, 
    // especially since mock API might not return perfectly nested objects.
    fetchRestaurantsAndCategories(); // This will re-apply filters
    handleCloseModal();
  };

  const handleToggleRestaurantActive = async (restaurantId, currentIsActive) => {
    openConfirmation(
        `Ndrysho Statusin e Aktivitetit`,
        `Jeni të sigurt që doni të ${currentIsActive ? 'çaktivizoni' : 'aktivizoni'} këtë restorant?`,
        async () => {
            try {
                setIsLoading(true); // Consider a more specific loading state
                await adminApi.toggleRestaurantActiveStatus(restaurantId, !currentIsActive);
                showSuccess(`Restoranti u ${!currentIsActive ? 'aktivizua' : 'çaktivizua'} me sukses.`);
                fetchRestaurantsAndCategories();
            } catch (err) {
                showError(err.message || "Gabim gjatë ndryshimit të statusit të aktivitetit.");
            } finally {
                setIsLoading(false);
                setConfirmActionProps({ isOpen: false });
            }
        },
        currentIsActive ? "Çaktivizo" : "Aktivizo",
        'warning'
    );
  };

  const handleApproveRestaurant = async (restaurantId) => {
     openConfirmation(
        `Mirato Restorantin`,
        `Jeni të sigurt që doni të miratoni këtë restorant? Ky veprim nuk mund të kthehet.`,
        async () => {
            try {
                setIsLoading(true); // Consider a more specific loading state
                await adminApi.approveRestaurant(restaurantId);
                showSuccess("Restoranti u miratua me sukses.");
                fetchRestaurantsAndCategories();
            } catch (err) {
                showError(err.message || "Gabim gjatë miratimit të restorantit.");
            } finally {
                setIsLoading(false);
                setConfirmActionProps({ isOpen: false });
            }
        },
        "Mirato",
        'success'
    );
  };


  const openConfirmation = (title, message, onConfirmCallback, confirmText = "Konfirmo", iconType = 'warning') => {
    setConfirmActionProps({
        isOpen: true,
        title,
        message,
        onConfirm: async () => { // Make onConfirm async to handle loading states within it
            await onConfirmCallback();
            // No need to setConfirmActionProps({ isOpen: false }) here, callback should handle it or it's handled in finally
        },
        onClose: () => setConfirmActionProps({ isOpen: false }),
        confirmText,
        iconType
    });
  };

  const handleSearchChange = (e) => setFilters(prev => ({ ...prev, searchTerm: e.target.value }));
  const handleFilterChange = (filterName, value) => {
    setFilters(prev => ({ ...prev, [filterName]: value }));
    // Optionally, debounce fetchRestaurantsAndCategories or call it on a search button click
  };

  useEffect(() => {
    fetchRestaurantsAndCategories();
  }, [filters.activity, filters.approval, fetchRestaurantsAndCategories]); // Add searchTerm if it should auto-search

  if (error) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white">Menaxho Restorantet</h1>
        <div className="flex gap-2">
            <Button onClick={fetchRestaurantsAndCategories} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading}>
                Rifresko
            </Button>
            <Button onClick={() => handleOpenModal()} iconLeft={PlusCircleIcon}>
                 Shto Restorant
            </Button>
        </div>
      </div>
      
      {/* Search and Filter Bar */}
      <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
          <div className="relative md:col-span-2">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <MagnifyingGlassIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <input
              type="text"
              placeholder="Kërko restorant (emër, email, qytet)..."
              value={filters.searchTerm}
              onChange={(e) => setFilters(prev => ({ ...prev, searchTerm: e.target.value }))}
              className="input-form w-full pl-10"
            />
          </div>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FunnelIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <select
              value={filters.activity}
              onChange={(e) => setFilters(prev => ({ ...prev, activity: e.target.value }))}
              className="input-form w-full pl-10"
            >
              <option value="ALL">Të gjitha Aktivitetet</option>
              <option value="ACTIVE">Aktiv</option>
              <option value="INACTIVE">Joaktiv</option>
            </select>
          </div>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FunnelIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <select
              value={filters.approval}
              onChange={(e) => setFilters(prev => ({ ...prev, approval: e.target.value }))}
              className="input-form w-full pl-10"
            >
              <option value="ALL">Të gjitha Miratimet</option>
              <option value="APPROVED">E Miratuar</option>
              <option value="PENDING">Në Pritje</option>
            </select>
          </div>
        </div>
      </div>

      {isLoading && !isModalOpen && !confirmActionProps.isOpen && (
        <div className="flex justify-center items-center py-10">
          <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary-500"></div>
        </div>
      )}
      
      {!isLoading && !error && (
        <div className="bg-white dark:bg-gray-800 shadow-xl rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                {['Restoranti', 'Adresa', 'Pronari', 'Kategoritë', 'Krijuar Më', 'Aktiv', 'Miratuar', 'Veprime'].map(header => (
                  <th key={header} scope="col" className="px-5 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    {header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {filteredRestaurants.length > 0 ? (
                filteredRestaurants.map((restaurant) => (
                  <RestaurantTableRow 
                    key={restaurant.id} 
                    restaurant={restaurant} 
                    onEdit={handleOpenModal}
                    onDelete={(id) => openConfirmation("Konfirmo Fshirjen", `Jeni të sigurt që doni të fshini restorantin "${restaurants.find(r=>r.id===id)?.name || id}"? Ky veprim nuk mund të kthehet.`, () => handleDelete(id), "Fshij", "danger")}
                    onToggleActive={(id, currentVal) => openConfirmation("Ndrysho Statusin e Aktivitetit", `Ndrysho statusin e aktivitetit për restorantin "${restaurants.find(r=>r.id===id)?.name}" në "${!currentVal ? 'Aktiv' : 'Joaktiv'}"?`, () => handleToggleField(id, 'is_active', currentVal))}
                    onToggleApproval={(id, currentVal) => openConfirmation("Nrysho Statusin e Miratimit", `Ndrysho statusin e miratimit për restorantin "${restaurants.find(r=>r.id===id)?.name}" në "${!currentVal ? 'Miratuar' : 'Në Pritje'}"?`, () => handleToggleField(id, 'is_approved', currentVal))}
                    onApprove={(id) => handleApproveRestaurant(id)}
                  />
                ))
              ) : (
                <tr>
                  <td colSpan="8" className="px-6 py-10 text-center text-sm text-gray-500 dark:text-gray-400">
                    {restaurants.length === 0 ? "Nuk ka restorante të regjistruara." : "Nuk u gjetën restorante që përputhen me kërkimin/filtrat tuaj."}
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
      {/* TODO: Add Pagination */}

      <RestaurantFormModal 
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        restaurant={editingRestaurant}
        onSave={handleSaveRestaurant}
      />
      <ConfirmationModal
        isOpen={confirmActionProps.isOpen}
        onClose={() => setConfirmActionProps(prev => ({ ...prev, isOpen: false }))}
        onConfirm={confirmActionProps.onConfirm}
        title={confirmActionProps.title}
        message={confirmActionProps.message}
        confirmText={confirmActionProps.confirmText}
        iconType={confirmActionProps.iconType}
        isLoading={isLoading} // General loading for any action
      />
    </div>
  );
};

export default ManageRestaurantsPage;

// End of File: src/modules/admin/pages/ManageRestaurantsPage.jsx
//--------------------------------------------------

// File: src/modules/admin/pages/ManageUsersPage.jsx

// src/modules/admin/pages/ManageUsersPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { adminApi } from '../../../api/adminApi';
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext';
import Button from '../../../components/Button';
import { ArrowPathIcon, UserPlusIcon, UsersIcon, MagnifyingGlassIcon, FunnelIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import UserTableRow from '../components/UserTableRow';
import UserFormModal from '../components/UserFormModal';
import ConfirmationModal from '../../../components/ConfirmationModal';

const ManageUsersPage = () => {
  const { user: adminUser } = useAuth();
  const { showSuccess, showError } = useNotification();

  const [users, setUsers] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  
  const [confirmActionProps, setConfirmActionProps] = useState({
      isOpen: false,
      title: '',
      message: '',
      onConfirm: () => {},
      confirmText: 'Konfirmo',
      iconType: 'warning'
  });

  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({ role: 'ALL', status: 'ALL' });

  const fetchUsers = useCallback(async () => {
    if (!adminUser?.token) return;
    setIsLoading(true);
    setError(null);
    try {
      const data = await adminApi.fetchAllUsers(adminUser.token);
      setUsers(data || []);
    } catch (err) {
      console.error("Failed to fetch users:", err);
      const errMsg = err.message || "S'u mund të ngarkoheshin përdoruesit.";
      setError(errMsg);
      showError(errMsg);
    } finally {
      setIsLoading(false);
    }
  }, [adminUser?.token, showError]);

  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  const handleOpenModal = (user = null) => {
    setEditingUser(user);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingUser(null);
  };

  const handleSaveUser = (savedUser) => {
    fetchUsers(); // Re-fetch for consistency
  };

  const openConfirmation = (title, message, onConfirmCallback, confirmText = "Konfirmo", iconType = 'warning') => {
    setConfirmActionProps({
        isOpen: true,
        title,
        message,
        onConfirm: () => {
            onConfirmCallback();
            setConfirmActionProps(prev => ({ ...prev, isOpen: false }));
        },
        confirmText,
        iconType
    });
  };

  const handleDelete = async (userId) => {
    try {
        // REAL API: await adminApi.deleteUser(userId);
        setIsLoading(true);
        await adminApi.deleteUser(userId, adminUser.token);
        setUsers(prev => prev.filter(u => u.id !== userId));
        showSuccess(`Përdoruesi (ID: ${userId}) u fshi me sukses.`);
    } catch (err) { showError(err.message || `Gabim gjatë fshirjes.`); }
    finally { setIsLoading(false); }
  };

  const handleToggleStatus = async (userId, currentIsActive) => { // Changed currentStatus to currentIsActive
    const newIsActive = !currentIsActive;
    
    try {
        setIsLoading(true);
        // Pass adminUser.token if your apiService doesn't automatically inject it from AuthContext
        const updatedUser = await adminApi.updateUser(userId, { is_active: newIsActive }); 
        setUsers(prev => prev.map(u => u.id === userId ? { ...u, is_active: newIsActive } : u)); // Update local state
        showSuccess(`Statusi i përdoruesit (ID: ${userId}) u ndryshua në ${newIsActive ? 'Aktiv' : 'Joaktiv'}.`);
    } catch (err) { 
        showError(err.message || `Gabim gjatë ndryshimit të statusit.`); 
        // Optionally revert local state if API call fails
    }
    finally { setIsLoading(false); }
  };
  
  const handleResetPassword = async (userId) => {
    // For a real app, this would trigger an email or show a new generated password.
    try {
        setIsLoading(true);
        await adminApi.resetUserPasswordAdmin(userId); // Call the new API function
        showSuccess(`Kërkesa për resetimin e fjalëkalimit për përdoruesin (ID: ${userId}) u dërgua.`);
    } catch (err) { showError(err.message || `Gabim gjatë resetimit të fjalëkalimit.`); }
    finally { setIsLoading(false); } // Corrected finally block
  };
  
  const handleSearchChange = (e) => setSearchTerm(e.target.value);
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
  };

  const filteredUsers = users.filter(user => {
    const searchTermLower = searchTerm.toLowerCase();
    let matchesSearch = true;
    if (searchTerm) {
        matchesSearch = (
            user.username.toLowerCase().includes(searchTermLower) ||
            user.email.toLowerCase().includes(searchTermLower) ||
            (user.first_name && user.first_name.toLowerCase().includes(searchTermLower)) ||
            (user.last_name && user.last_name.toLowerCase().includes(searchTermLower)) ||
            user.id.toString().includes(searchTermLower)
        );
    }
    let matchesRole = filters.role === 'ALL' || user.role === filters.role;
    let matchesStatus = filters.status === 'ALL' || user.status === filters.status;
    return matchesSearch && matchesRole && matchesStatus;
  }).sort((a, b) => new Date(b.date_joined) - new Date(a.date_joined));


  if (error) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <UsersIcon className="h-7 w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Menaxho Përdoruesit
        </h1>
        <div className="flex gap-2">
            <Button onClick={() => fetchData(1)} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading}>
                Rifresko
            </Button>
            <Button onClick={() => { setSelectedUser(null); setIsModalOpen(true); }} iconLeft={UserPlusIcon}>
                Shto Përdorues
            </Button>
        </div>
      </div>
      
      {/* Search and Filter Bar */}
      <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
          <div className="relative md:col-span-2">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <MagnifyingGlassIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <input
              type="text"
              placeholder="Kërko përdorues (emër, email)..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="input-form w-full pl-10"
            />
          </div>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FunnelIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <select
              value={filterRole}
              onChange={(e) => setFilterRole(e.target.value)}
              className="input-form w-full pl-10"
            >
              <option value="">Të gjitha Rolet</option>
              <option value="CUSTOMER">Klient</option>
              <option value="RESTAURANT_OWNER">Pronar Restoranti</option>
              <option value="COURIER">Korrier</option>
              <option value="ADMIN">Admin</option>
            </select>
          </div>
        </div>
      </div>

      {isLoading && !isModalOpen && !confirmActionProps.isOpen && (
        <div className="flex justify-center items-center py-10">
          <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary-500"></div>
        </div>
      )}
      
      {!isLoading && (
        <div className="bg-white dark:bg-gray-800 shadow-xl rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                {['ID', 'Përdoruesi', 'Email', 'Roli', 'Regjistruar Më', 'Statusi', 'Veprime'].map(header => (
                  <th key={header} scope="col" className="px-5 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    {header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {filteredUsers.length > 0 ? (
                filteredUsers.map((user) => (
                  <UserTableRow 
                    key={user.id} 
                    user={user} 
                    onEdit={handleOpenModal}
                    onDelete={(id) => openConfirmation("Konfirmo Fshirjen", `Jeni të sigurt që doni të fshini përdoruesin "${users.find(u=>u.id===id)?.username || id}"?`, () => handleDelete(id), "Fshij", "danger")}
                    onToggleStatus={(id, currentStatus) => openConfirmation("Ndrysho Statusin", `Ndrysho statusin e përdoruesit "${users.find(u=>u.id===id)?.username}"?`, () => handleToggleStatus(id, currentStatus))}
                    onResetPassword={(id) => openConfirmation("Reset Fjalëkalimin", `Dëshironi të resetoni fjalëkalimin për "${users.find(u=>u.id===id)?.username}"? (Mock: Kjo do të simulojë dërgimin e një linku).`, () => handleResetPassword(id), "Po, Reseto")}
                  />
                ))
              ) : (
                 <tr>
                  <td colSpan="7" className="px-6 py-10 text-center text-sm text-gray-500 dark:text-gray-400">
                    {users.length === 0 ? "Nuk ka përdorues të regjistruar." : "Nuk u gjetën përdorues që përputhen me kërkimin/filtrat tuaj."}
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
      {/* TODO: Add Pagination */}

      <UserFormModal 
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        user={editingUser}
        onSave={handleSaveUser}
      />
      <ConfirmationModal
        isOpen={confirmActionProps.isOpen}
        onClose={() => setConfirmActionProps(prev => ({ ...prev, isOpen: false }))}
        onConfirm={confirmActionProps.onConfirm}
        title={confirmActionProps.title}
        message={confirmActionProps.message}
        confirmText={confirmActionProps.confirmText}
        iconType={confirmActionProps.iconType}
        isLoading={isLoading}
      />
    </div>
  );
};

export default ManageUsersPage;

// End of File: src/modules/admin/pages/ManageUsersPage.jsx
//--------------------------------------------------

// File: src/modules/admin/routes.jsx

// src/modules/admin/routes.jsx
import React from 'react';
import { Route } from 'react-router-dom'; // Route është OK për t'u përdorur kështu kur kthehet si array

// Importo faqet e Adminit
import AdminOverviewPage from './pages/AdminOverviewPage.jsx';
import ManageUsersPage from './pages/ManageUsersPage.jsx';
import ManageRestaurantsPage from './pages/ManageRestaurantsPage.jsx';
import AdminOrdersPage from './pages/AdminOrdersPage.jsx';
import AdminSettingsPage from './pages/AdminSettingsPage.jsx';
// import AdminLayout dhe ProtectedRoute NUK duhen këtu, ato aplikohen te AppRoutes.jsx

const AdminRoutes = [
  // Këto rrugë do të jenë relative ndaj path-it prind ("/admin") të definuar te AppRoutes.jsx
  // Layout-i dhe ProtectedRoute do të aplikohen nga ai prind.
  <Route key="admin-overview-index" index element={<AdminOverviewPage />} />,
  <Route key="admin-overview-path" path="overview" element={<AdminOverviewPage />} />,
  <Route key="admin-dashboard-alias" path="dashboard" element={<AdminOverviewPage />} />,
  <Route key="admin-users" path="users" element={<ManageUsersPage />} />,
  <Route key="admin-restaurants" path="restaurants" element={<ManageRestaurantsPage />} />,
  <Route key="admin-orders" path="orders" element={<AdminOrdersPage />} />,
  <Route key="admin-settings" path="settings" element={<AdminSettingsPage />} />,
  // Fallback brenda /admin/* mund të shtohet këtu nëse dëshiron,
  // por AppRoutes.jsx ka një fallback global.
  // <Route key="admin-not-found" path="*" element={<Navigate to="overview" replace />} />,
];

export default AdminRoutes;

// End of File: src/modules/admin/routes.jsx
//--------------------------------------------------

// File: src/modules/auth/pages/AdminLoginPage.jsx

// src/modules/auth/pages/AdminLoginPage.jsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
import Button from '../../../components/Button.jsx';
import { ShieldCheckIcon, XCircleIcon } from '@heroicons/react/24/solid';
import { useNotification } from '../../../context/NotificationContext.jsx'; // Added for showError

const AdminLoginPage = () => { 
    const { adminLogin, loadingAuth, error: authError, setError: setAuthError, isAuthenticated, user } = useAuth();
    const navigate = useNavigate();
    const { showError } = useNotification(); // Get showError from context

    const [email, setEmail] = useState(''); 
    const [password, setPassword] = useState(''); 

    useEffect(() => {
        // Redirect if already authenticated as admin
        if (isAuthenticated && user?.role === 'ADMIN') {
            navigate('/admin/dashboard', { replace: true });
        }
        // Cleanup auth error on component unmount
        return () => {
            if (setAuthError) setAuthError(null);
        };
    }, [isAuthenticated, user, navigate, setAuthError]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if(setAuthError) setAuthError(null); 

        if (!email || !password) {
            showError("Ju lutem plotësoni email-in dhe fjalëkalimin.");
            return;
        }

        try {
            const loggedInUser = await adminLogin({ email, password }); 
            
            if (loggedInUser && loggedInUser.role === 'ADMIN') {
                 // AuthContext's fetchAndSetUser and subsequent isAuthenticated update 
                 // should trigger the useEffect for navigation.
                 // Explicit navigation can be a fallback or primary method.
                 navigate('/admin/dashboard', { replace: true });
            } else if (loggedInUser) {
                // Logged in but not an admin
                const message = 'Kyçja u krye, por ju nuk keni privilegje administratori.';
                if(setAuthError) setAuthError(message);
                showError(message);
                // Consider logging out the user if they are not an admin
                // await logout(); 
            }
            // If adminLogin fails, it should throw an error caught below,
            // and AuthContext should set its own error state.
        } catch (err) {
            // Error should be set by adminLogin in AuthContext.
            // Display it via showError if not already handled by a global authError display.
            const displayMessage = authError || err.message || 'Gabim gjatë kyçjes së administratorit.';
            showError(displayMessage); 
            // Ensure authError in context is also set if not already
            if (setAuthError && !authError) {
                 setAuthError(displayMessage);
            }
            console.error("Admin Login page error:", err);
        }
    };

    return (
        <div className="w-full"> {/* AuthLayout will provide the main card styling */}
            <div className="flex justify-center mb-4">
                <ShieldCheckIcon className="w-16 h-16 text-primary-600 dark:text-primary-400" />
            </div>
            <h2 className="mb-6 text-center text-2xl sm:text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
                Paneli i Administratorit
            </h2>
            <form onSubmit={handleSubmit} className="space-y-5">
                {authError && (
                    <div className="rounded-md bg-red-50 dark:bg-red-900/30 p-3">
                        <div className="flex">
                            <div className="flex-shrink-0">
                                <XCircleIcon className="h-5 w-5 text-red-400 dark:text-red-300" aria-hidden="true" />
                            </div>
                            <div className="ml-3">
                                <p className="text-sm font-medium text-red-700 dark:text-red-200">{authError}</p>
                            </div>
                        </div>
                    </div>
                )}
                <div>
                    <label htmlFor="email-address-admin" className="label-form">Email</label>
                    <input id="email-address-admin" name="email" type="email" autoComplete="email" required 
                           className="input-form w-full" placeholder="admin@shembull.com" 
                           value={email} onChange={(e) => { setEmail(e.target.value); if (authError) setAuthError(null); }} />
                </div>
                <div>
                    <label htmlFor="password-admin" className="label-form">Fjalëkalimi</label>
                    <input id="password-admin" name="password" type="password" autoComplete="current-password" required 
                           className="input-form w-full" placeholder="••••••••" 
                           value={password} onChange={(e) => { setPassword(e.target.value); if (authError) setAuthError(null); }} />
                </div>
                <div>
                    <Button type="submit" fullWidth variant="primary" isLoading={loadingAuth} disabled={loadingAuth} size="lg">
                        {loadingAuth ? 'Duke u kyçur...' : 'Kyçu si Admin'}
                    </Button>
                </div>
            </form>
            <p className="mt-6 text-center text-sm">
                <Link to="/auth/login" className="font-medium text-gray-500 hover:text-gray-700 dark:text-slate-400 dark:hover:text-slate-200">
                    Nuk jeni admin? Kyçu si përdorues.
                </Link>
            </p>
        </div>
    );
};
export default AdminLoginPage;

// End of File: src/modules/auth/pages/AdminLoginPage.jsx
//--------------------------------------------------

// File: src/modules/auth/pages/Login.jsx

// src/modules/auth/pages/Login.jsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext';
import Button from '../../../components/Button';
import { XCircleIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/solid'; // Për ikonën e gabimit dhe shfaqjen e fjalëkalimit
import { useNotification } from '../../../context/NotificationContext';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false); // Për toggle të fjalëkalimit
  const { login, isLoading: loadingAuth, error: authError, setError: setAuthError, isAuthenticated, user, clearAuthError } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const { showNotification } = useNotification(); // Correctly destructure showNotification

  // useEffect for clearing authError (e.g., on unmount or when setAuthError changes)
  useEffect(() => {
    // This effect now primarily serves to clear the error when the component unmounts
    // or if setAuthError itself changes (which is unlikely to be a dependency here).
    // The previous logic for clearing on authError change was removed as it might conflict
    // with displaying a new error.
    return () => {
      if (setAuthError) { // Check if setAuthError is available from context
        // setAuthError(null); // Clears error when component unmounts
      }
      // If clearAuthError from context is preferred for unmount logic:
      // if (clearAuthError) clearAuthError();
    };
  }, [setAuthError]); // Dependency on setAuthError to ensure it's available

  // Simplified useEffect for navigation after login
  useEffect(() => {
    if (isAuthenticated && user) {
        let redirectTo = null;
        // Determine redirect based on role only for now
        if (user.role === 'ADMIN') {
            redirectTo = '/admin/dashboard';
        } else if (user.role === 'RESTAURANT_OWNER') {
            redirectTo = '/restaurant/overview';
        } else if (user.role === 'DRIVER' || user.role === 'DELIVERY_PERSONNEL') {
            redirectTo = '/driver/dashboard';
        } else if (user.role === 'CUSTOMER') {
            redirectTo = '/customer/restaurants';
        } else {
            redirectTo = '/customer/restaurants'; // Default fallback
        }

        if (redirectTo && location.pathname !== redirectTo) {
            console.log(`LOGIN_PAGE (Simplified Navigation): Navigating to: ${redirectTo} from ${location.pathname}`);
            navigate(redirectTo, { replace: true });
        } else if (location.pathname === redirectTo) {
            console.warn(`LOGIN_PAGE (Simplified Navigation): Already on target path ${redirectTo}. Navigation skipped.`);
        }
    }
  // Try with minimal stable dependencies to isolate the loop cause
  // location.state is removed for this test. location.pathname is kept to prevent re-navigation to the same page.
  }, [isAuthenticated, user?.role, user?.id, navigate, location.pathname]); // Using user?.role and user?.id for more stability than the whole user object.


  const handleSubmit = async (e) => {
    e.preventDefault();
    if (setAuthError) setAuthError(null); // Clear previous auth errors from context

    if (!email || !password) {
      showNotification("Ju lutem plotësoni email-in dhe fjalëkalimin.", "error");
      return;
    }
    
    try {
      const userData = await login({ email, password }); 
      
      if (userData) { 
        showNotification('Kyçja u krye me sukses!', "success");
        // Navigation is now handled by the useEffect above based on isAuthenticated and user.
      }
      // No explicit navigation here, useEffect will handle it.
    } catch (err) {
      // AuthContext should set 'authError' state, which will be displayed by the component.
      // If authError is not set by login function in context, then:
      // showNotification(err.message || "Gabim gjatë kyçjes. Provoni përsëri.", "error");
      // But ideally, AuthContext's login handles setting its own error state.
    }
  };

  return (
    // Mbështjellësi kryesor i këtij komponenti specifik (brenda AuthLayout)
    // AuthLayout tashmë e ofron sfondin dhe qendërzimin e përgjithshëm.
    // Ky div është për stilimin e vetë "kutisë" së login-it.
    <div className="w-full"> {/* Hiq max-w-md dhe space-y-8 nga këtu, AuthLayout e menaxhon */}
      <h2 className="mb-6 text-center text-2xl sm:text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
        Kyçu në llogarinë tënde
      </h2>
      {authError && (
              <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-600 text-red-700 dark:text-red-300 rounded-md text-sm">
                <p>{authError}</p> {/* Shfaq gabimin nga AuthContext */}
              </div>
            )}
      <form onSubmit={handleSubmit} className="space-y-5"> {/* Zvogëlo pak hapësirën */}
        <div>
          <label htmlFor="email" className="label-form"> {/* Krijo klasën 'label-form' në CSS global */}
            Adresa Email
          </label>
          {/* mt-1 hiqet pasi label-form ka mb-1 */}
          <input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="input-form w-full" // Sigurohu që 'input-form' është stiluar mirë
            placeholder="ju@shembull.com"
          />
        </div>

        <div>
          <label htmlFor="password" className="label-form">
            Fjalëkalimi
          </label>
          <div className="relative"> {/* Shto relative për pozicionimin e ikonës */}
            <input
              id="password"
              name="password"
              type={showPassword ? "text" : "password"}
              autoComplete="current-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input-form w-full pr-10" // Shto padding-right për ikonën
              placeholder="••••••••"
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 dark:text-slate-400 hover:text-gray-700 dark:hover:text-slate-200 focus:outline-none"
              aria-label={showPassword ? "Fshih fjalëkalimin" : "Shfaq fjalëkalimin"}
            >
              {showPassword ? <EyeSlashIcon className="h-5 w-5"/> : <EyeIcon className="h-5 w-5"/>}
            </button>
          </div>
        </div>
        
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center">
            <input
              id="remember-me"
              name="remember-me"
              type="checkbox"
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-slate-600 rounded dark:bg-slate-700"
            />
            <label htmlFor="remember-me" className="ml-2 block text-gray-900 dark:text-slate-300">
              Më mbaj mend
            </label>
          </div>
          <div>
            <Link to="/auth/forgot-password" // Sigurohu që kjo rrugë ekziston nëse e përdor
                className="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300">
              Keni harruar fjalëkalimin?
            </Link>
          </div>
        </div>

        <div>
          <Button type="submit" fullWidth variant="primary" isLoading={loadingAuth} disabled={loadingAuth} size="lg">
            Kyçu
          </Button>
        </div>
      </form>

      <div className="mt-6 text-center">
        <p className="text-sm text-gray-600 dark:text-slate-400">
          Nuk keni llogari?{' '}
          <Link 
              to="/auth/register" // Path i plotë
              state={{ backgroundLocation: location.state?.backgroundLocation || location }} 
              className="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300"
          >
              Regjistrohu këtu
          </Link>
        </p>
         <p className="mt-2 text-sm">
          <Link to="/auth/admin-login" // Path i plotë
              className="font-medium text-gray-500 hover:text-gray-700 dark:text-slate-400 dark:hover:text-slate-200">
            Kyçu si Administrator
          </Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

// End of File: src/modules/auth/pages/Login.jsx
//--------------------------------------------------

// File: src/modules/auth/pages/RegisterPage.jsx

import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
import Button from '../../../components/Button.jsx'; // Sigurohu që ky path është korrekt
import { XCircleIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/solid';
import { useNotification } from '../../../context/NotificationContext.jsx';

const RegisterPage = () => {
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone_number: '',
    password: '',
    password_confirm: '',
    role: 'CUSTOMER',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  const { register, loadingAuth, error: authError, setError: setAuthError, isAuthenticated, user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  // Get the whole notification context object
  const notification = useNotification();

  useEffect(() => {
    if (isAuthenticated && user) {
      const from = location.state?.from?.pathname || (user.role === 'RESTAURANT_OWNER' ? '/restaurant/overview' : user.role === 'DRIVER' ? '/driver/dashboard' : '/customer/restaurants');
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, user, navigate, location.state]);

   useEffect(() => {
    return () => {
      if (setAuthError) setAuthError(null);
    };
  }, [setAuthError]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    if (authError) setAuthError(null); 
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (setAuthError) setAuthError(null);

    if (formData.password !== formData.password_confirm) {
      if (notification && typeof notification.showError === 'function') {
        notification.showError("Fjalëkalimet nuk përputhen.");
      } else {
        console.warn('[RegisterPage] showError function is not available from NotificationContext.');
      }
      if (setAuthError) setAuthError("Fjalëkalimet nuk përputhen.");
      return;
    }
    if (formData.password.length < 6) { 
      if (notification && typeof notification.showError === 'function') {
        notification.showError("Fjalëkalimi duhet të ketë të paktën 6 karaktere.");
      } else {
        console.warn('[RegisterPage] showError function is not available from NotificationContext.');
      }
      if (setAuthError) setAuthError("Fjalëkalimi duhet të ketë të paktën 6 karaktere.");
      return;
    }

    try {
      const payload = {
        email: formData.email,
        first_name: formData.first_name,
        last_name: formData.last_name,
        password: formData.password,
        password_confirm: formData.password_confirm,
        role: formData.role,
        phone_number: formData.phone_number || null,
      };
      await register(payload); 
      if (notification && typeof notification.showSuccess === 'function') {
        notification.showSuccess('Regjistrimi u krye me sukses! Ju lutem kyçuni.');
      } else {
        console.warn('[RegisterPage] showSuccess function is not available from NotificationContext.');
      }
      navigate('/auth/login'); 
    } catch (err) {
      let errorMessage = "Gabim gjatë regjistrimit.";
      // Check if err.response exists and has data (from apiService enriched error)
      if (err.response && err.response.detail) {
          errorMessage = err.response.detail;
      } else if (err.response && typeof err.response === 'object') {
          // Fallback for other types of object errors if detail is not present
          const fieldErrors = Object.entries(err.response)
            .map(([key, value]) => {
              let fieldName = key.replace("_", " ");
              fieldName = fieldName.charAt(0).toUpperCase() + fieldName.slice(1);
              return `${fieldName}: ${Array.isArray(value) ? value.join(', ') : value}`;
            })
            .join('; ');
          if (fieldErrors) errorMessage = fieldErrors;
          else if (err.message) errorMessage = err.message;
      } else if (err.message) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      }
      
      if (setAuthError) setAuthError(errorMessage);
      if (notification && typeof notification.showError === 'function') {
        notification.showError(errorMessage);
      } else {
        console.warn('[RegisterPage] showError function is not available from NotificationContext. Error to display:', errorMessage);
        // As a fallback, you might want to alert the error or handle it differently
        // For example, if AuthContext's error display is the primary, this might be acceptable.
        // alert(errorMessage); // Or some other fallback UI
      }
      console.error("Register page error:", err);
    }
  };
  
  return (
    <div className="w-full">
      <h2 className="mb-6 text-center text-2xl sm:text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
        Krijo një llogari të re
      </h2>
      {authError && (
        <div className="mb-4 rounded-md bg-red-50 dark:bg-red-900/30 p-3">
            <div className="flex">
                <div className="flex-shrink-0">
                    <XCircleIcon className="h-5 w-5 text-red-400 dark:text-red-300" aria-hidden="true" />
                </div>
                <div className="ml-3">
                    <p className="text-sm font-medium text-red-700 dark:text-red-200">{authError}</p>
                </div>
            </div>
        </div>
      )}
      <form onSubmit={handleSubmit} className="space-y-5">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-5 gap-y-4">
          <div>
            <label htmlFor="first_name_register" className="label-form">Emri</label>
            <input id="first_name_register" name="first_name" type="text" required 
                   value={formData.first_name} onChange={handleChange} 
                   className="input-form w-full mt-1" placeholder="Emri juaj"/>
          </div>
          <div>
            <label htmlFor="last_name_register" className="label-form">Mbiemri</label>
            <input id="last_name_register" name="last_name" type="text" required 
                   value={formData.last_name} onChange={handleChange} 
                   className="input-form w-full mt-1" placeholder="Mbiemri juaj"/>
          </div>
        </div>
        
        <div>
          <label htmlFor="email_register_page" className="label-form">Adresa Email</label>
          <input id="email_register_page" name="email" type="email" autoComplete="email" required 
                 value={formData.email} onChange={handleChange} 
                 className="input-form w-full mt-1" placeholder="ju@shembull.com"/>
        </div>

        <div>
          <label htmlFor="phone_number_register" className="label-form">Numri i Telefonit (Opsional)</label>
          <input id="phone_number_register" name="phone_number" type="tel" 
                 value={formData.phone_number} onChange={handleChange} 
                 className="input-form w-full mt-1" placeholder="+383 4X XXX XXX"/>
        </div>
        
        <div>
          <label htmlFor="password_register_page" className="label-form">Fjalëkalimi</label>
          <div className="relative mt-1">
            <input id="password_register_page" name="password" type={showPassword ? "text" : "password"} required minLength="6" 
                   value={formData.password} onChange={handleChange} 
                   className="input-form w-full pr-10" placeholder="Min. 6 karaktere"/>
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 dark:text-slate-400 hover:text-gray-700 dark:hover:text-slate-200 focus:outline-none"
              aria-label={showPassword ? "Fshih fjalëkalimin" : "Shfaq fjalëkalimin"}
            >
              {showPassword ? <EyeSlashIcon className="h-5 w-5"/> : <EyeIcon className="h-5 w-5"/>}
            </button>
          </div>
        </div>

        <div>
          <label htmlFor="password_confirm_register" className="label-form">Konfirmo Fjalëkalimin</label>
           <div className="relative mt-1">
            <input id="password_confirm_register" name="password_confirm" type={showConfirmPassword ? "text" : "password"} required minLength="6" 
                   value={formData.password_confirm} onChange={handleChange} 
                   className="input-form w-full pr-10" placeholder="Përsërit fjalëkalimin"/>
            <button
              type="button"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 dark:text-slate-400 hover:text-gray-700 dark:hover:text-slate-200 focus:outline-none"
              aria-label={showConfirmPassword ? "Fshih fjalëkalimin" : "Shfaq fjalëkalimin"}
            >
              {showConfirmPassword ? <EyeSlashIcon className="h-5 w-5"/> : <EyeIcon className="h-5 w-5"/>}
            </button>
          </div>
        </div>

        <div>
            <label htmlFor="role_register_select" className="label-form">Dëshiroj të regjistrohem si:</label>
            <select id="role_register_select" name="role" value={formData.role} onChange={handleChange} className="input-form w-full mt-1">
                <option value="CUSTOMER">Klient</option>
                <option value="RESTAURANT_OWNER">Pronar Restoranti</option>
                <option value="DRIVER">Shofer</option>
            </select>
        </div>

        <div className="pt-2">
          <Button type="submit" fullWidth variant="primary" isLoading={loadingAuth} disabled={loadingAuth} size="lg">
            Regjistrohu
          </Button>
        </div>
      </form>
      <p className="mt-6 text-center text-sm text-gray-600 dark:text-slate-400">
        Keni llogari?{' '}
        <Link 
            to="/auth/login" 
            className="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300"
        >
            Kyçu këtu
        </Link>
      </p>
    </div>
  );
};

export default RegisterPage;


// End of File: src/modules/auth/pages/RegisterPage.jsx
//--------------------------------------------------

// File: src/modules/auth/routes.jsx

// src/modules/auth/routes.jsx
import React from 'react';
import { Route } from 'react-router-dom';
import LoginPage from './pages/Login.jsx';
import RegisterPage from './pages/Register.jsx';
// import AdminLoginPage from './pages/AdminLoginPage.jsx'; // If you have a separate one
// import ForgotPasswordPage from './pages/ForgotPasswordPage.jsx'; // If you implement this

const AuthRoutes = [
  <Route key="login" path="login" element={<LoginPage />} />,
  <Route key="register" path="register" element={<RegisterPage />} />,
  // <Route key="admin-login" path="admin/login" element={<AdminLoginPage />} />, // Example if separate admin login
  // <Route key="forgot-password" path="forgot-password" element={<ForgotPasswordPage />} />,
];

export default AuthRoutes;

// End of File: src/modules/auth/routes.jsx
//--------------------------------------------------

// File: src/modules/courier/components/ActiveDeliverySection.jsx

// src/modules/courier/components/ActiveDeliverySection.jsx
import React from 'react';
import { ArrowPathIcon, TruckIcon, BuildingStorefrontIcon, MapPinIcon, QueueListIcon, ArchiveBoxArrowDownIcon, CheckBadgeIcon, CheckCircleIcon, PhoneIcon } from '@heroicons/react/24/outline';
import Button from '../../../components/Button';
import { useTasks } from '../../../context/TaskContext.jsx';
import { useNotification } from '../../../context/NotificationContext.jsx';

const ActiveDeliverySection = () => {
  const { activeTask, updateActiveTaskStatus, isLoadingActiveTask, isLoadingUpdateStatus } = useTasks();
  
  const notification = useNotification(); 

  if (isLoadingActiveTask && !activeTask) {
    return (
      <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-6 text-center">
        <svg className="animate-spin h-8 w-8 text-primary-500 mx-auto mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V4a10 10 0 00-9.95 9.5H2a1 1 0 00-1 1v2a1 1 0 001 1h.05A10 10 0 0012 22v-4a8 8 0 01-8-8H4z"></path>
        </svg>
        <p className="text-gray-600 dark:text-slate-300">Duke kontrolluar për detyrë aktive...</p>
      </div>
    );
  }

  if (!activeTask) {
    return (
      <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-6 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400 dark:text-slate-500 mx-auto mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
          <path strokeLinecap="round" strokeLinejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
        </svg>
        <p className="text-lg font-semibold text-gray-700 dark:text-slate-200">Nuk keni asnjë detyrë aktive.</p>
        <p className="text-sm text-gray-500 dark:text-slate-400 mt-1">Detyrat e pranuara do të shfaqen këtu.</p>
      </div>
    );
  }

  const handleStatusUpdate = (newFrontendStatus) => {
    if (activeTask) {
      updateActiveTaskStatus(newFrontendStatus);
    }
  };

  let nextActions = [];
  if (activeTask.status === 'assigned' || activeTask.status === 'accepted') {
    nextActions.push({ label: 'Kam Arritur te Restoranti', newStatus: 'REACHED_RESTAURANT' });
  } else if (activeTask.status === 'reached restaurant') {
    nextActions.push({ label: 'Kam Marrë Porosinë', newStatus: 'PICKED_UP' });
  } else if (activeTask.status === 'picked up') {
    nextActions.push({ label: 'Kam Arritur te Klienti', newStatus: 'REACHED_CUSTOMER' });
  } else if (activeTask.status === 'reached customer') {
    nextActions.push({ label: 'Porosia u Dorëzua', newStatus: 'DELIVERED' });
    nextActions.push({ label: 'Dorëzimi Dështoi', newStatus: 'FAILED_DELIVERY' });
  }


  return (
    <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6">
      <h2 className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-white mb-4">Detyra Aktive</h2>
      <div className="border border-gray-200 dark:border-slate-700 rounded-lg p-4 space-y-3">
        <div>
          <span className="text-xs font-medium text-gray-500 dark:text-slate-400">ID Porosisë:</span>
          <p className="text-gray-800 dark:text-slate-100 font-semibold">#{activeTask.orderId}</p>
        </div>
        <div>
          <span className="text-xs font-medium text-gray-500 dark:text-slate-400">Statusi:</span>
          <p className={`text-sm font-semibold capitalize px-2 py-0.5 inline-block rounded-full ${
            activeTask.status === 'delivered' ? 'bg-green-100 text-green-700 dark:bg-green-700 dark:text-green-200' :
            activeTask.status === 'picked up' ? 'bg-blue-100 text-blue-700 dark:bg-blue-700 dark:text-blue-200' :
            activeTask.status === 'failed delivery' ? 'bg-red-100 text-red-700 dark:bg-red-700 dark:text-red-200' :
            'bg-yellow-100 text-yellow-700 dark:bg-yellow-700 dark:text-yellow-200'
          }`}>
            {activeTask.status}
          </p>
        </div>
        <div>
          <span className="text-xs font-medium text-gray-500 dark:text-slate-400">Restoranti:</span>
          <p className="text-gray-800 dark:text-slate-100">{activeTask.restaurantName}</p>
          <p className="text-xs text-gray-500 dark:text-slate-400">{activeTask.restaurantAddress}</p>
        </div>
        <div>
          <span className="text-xs font-medium text-gray-500 dark:text-slate-400">Klienti:</span>
          <p className="text-gray-800 dark:text-slate-100">{activeTask.customerName}</p>
          <p className="text-xs text-gray-500 dark:text-slate-400">{activeTask.customerAddress}</p>
        </div>
        {activeTask.itemsSummary && (
          <div>
            <span className="text-xs font-medium text-gray-500 dark:text-slate-400">Artikujt:</span>
            <p className="text-xs text-gray-600 dark:text-slate-300">{activeTask.itemsSummary}</p>
          </div>
        )}
        {activeTask.deliveryInstructions && (
          <div>
            <span className="text-xs font-medium text-gray-500 dark:text-slate-400">Shënime Dërgese:</span>
            <p className="text-xs text-gray-600 dark:text-slate-300 bg-yellow-50 dark:bg-yellow-500/10 p-2 rounded-md">{activeTask.deliveryInstructions}</p>
          </div>
        )}
         <div>
          <span className="text-xs font-medium text-gray-500 dark:text-slate-400">Pagesa për Ty:</span>
          <p className="text-lg font-bold text-green-600 dark:text-green-400">{activeTask.payout?.toFixed(2) || '0.00'}€</p>
        </div>
      </div>

      {nextActions.length > 0 && (
        <div className="mt-5 space-y-2">
          <p className="text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">Përditëso Statusin:</p>
          {nextActions.map(action => (
            <button
              key={action.newStatus}
              onClick={() => handleStatusUpdate(action.newStatus)} // Pass backend status directly
              disabled={isLoadingUpdateStatus}
              className="w-full px-4 py-2.5 text-sm font-semibold text-white bg-primary-600 rounded-lg shadow-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 disabled:opacity-50 disabled:cursor-not-allowed transition ease-in-out duration-150"
            >
              {isLoadingUpdateStatus ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V4a10 10 0 00-9.95 9.5H2a1 1 0 00-1 1v2a1 1 0 001 1h.05A10 10 0 0012 22v-4a8 8 0 01-8-8H4z"></path>
                </svg>
              ) : null}
              {action.label}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default ActiveDeliverySection;

// End of File: src/modules/courier/components/ActiveDeliverySection.jsx
//--------------------------------------------------

// File: src/modules/courier/components/AvailabilityToggle.jsx

// src/modules/courier/components/AvailabilityToggle.jsx
import React from 'react';
import Button from '../../../components/Button';
import { ArrowPathIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline'; // For loading or status indication if needed
import { useTasks } from '../../../context/TaskContext.jsx';

const AvailabilityToggle = () => {
  const { isDriverOnline, toggleDriverAvailability, isLoadingAvailabilityToggle } = useTasks();

  return (
    <div className={`p-4 rounded-lg shadow-md flex items-center justify-between ${isDriverOnline ? 'bg-green-50 dark:bg-green-800/30' : 'bg-red-50 dark:bg-red-800/30'}`}>
      <div>
        <p className={`text-sm font-medium ${isDriverOnline ? 'text-green-700 dark:text-green-200' : 'text-red-700 dark:text-red-200'}`}>
          Statusi i Disponueshmërisë:
        </p>
        <p className={`text-lg font-semibold ${isDriverOnline ? 'text-green-600 dark:text-green-300' : 'text-red-600 dark:text-red-300'}`}>
          {isDriverOnline ? 'I Disponueshëm për Dërgesa' : 'Jo i Disponueshëm'}
        </p>
      </div>
      <Button 
        onClick={toggleDriverAvailability} 
        isLoading={isLoadingAvailabilityToggle}
        variant={isDriverOnline ? 'danger' : 'success'}
        className="w-40 text-xs sm:text-sm"
        iconLeft={isLoadingAvailabilityToggle ? ArrowPathIcon : (isDriverOnline ? XCircleIcon : CheckCircleIcon)}
        iconLeftClassName="h-5 w-5" // Assuming h-5 w-5 was intended, default is h-4 w-4
        disabled={isLoadingAvailabilityToggle}
      >
        {isLoadingAvailabilityToggle ? 'Ndryshon...' : (isDriverOnline ? 'Bëhu Jo Aktiv' : 'Bëhu Aktiv')}
      </Button>
    </div>
  );
};

export default AvailabilityToggle;

// End of File: src/modules/courier/components/AvailabilityToggle.jsx
//--------------------------------------------------

// File: src/modules/courier/components/AvailableTasksSection.jsx

// src/modules/courier/components/AvailableTasksSection.jsx
import React, { useEffect, useCallback } from "react";
import Button from "../../../components/Button.jsx";
// import HeroIcon from "../../../components/HeroIcon.jsx"; // FSHIJE KËTË
import { BuildingStorefrontIcon, MapIcon, MapPinIcon, CurrencyDollarIcon as CurrencyEuroIcon, CheckCircleIcon, ArrowPathIcon, InboxIcon } from '@heroicons/react/24/outline';
import { useTasks } from "../../../context/TaskContext.jsx";
import { useAuth } from "../../../context/AuthContext.jsx";

const AvailableTasksSection = () => {
  const { availableTasks, fetchAvailableTasks, acceptTask, isLoadingAccept, errorAccept } = useTasks();
  const { user } = useAuth(); // To ensure courier is available

  const loadTasks = useCallback(() => {
    if (user?.is_available_for_delivery) { // Only fetch if courier is available
      fetchAvailableTasks();
    }
  }, [fetchAvailableTasks, user?.is_available_for_delivery]);

  useEffect(() => {
    loadTasks();
    // Optional: Set up an interval to refresh tasks periodically
    // const intervalId = setInterval(loadTasks, 30000); // Refresh every 30 seconds
    // return () => clearInterval(intervalId);
  }, [loadTasks]);

  if (!user?.is_available_for_delivery) {
    return (
      <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-6 text-center">
        <InboxIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-2">Ju nuk jeni aktiv për dërgesa.</h3>
        <p className="text-gray-500 dark:text-slate-400">Aktivizohuni për të parë detyrat e disponueshme.</p>
      </div>
    );
  }
  
  if (isLoadingAccept && availableTasks.length === 0) { // Show loading only if no tasks are displayed
      return (
        <div className="flex flex-col justify-center items-center min-h-[200px]">
            <ArrowPathIcon className="animate-spin h-10 w-10 text-primary-500 mb-3" />
            <p className="text-gray-500 dark:text-slate-400">Duke kërkuar detyra...</p>
        </div>
    );
  }


  if (availableTasks.length === 0) {
    return (
      <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-6 text-center">
        <InboxIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-2">Nuk ka detyra të disponueshme për momentin.</h3>
        <p className="text-gray-500 dark:text-slate-400 mb-4">Provoni të rifreskoni listën.</p>
        <Button onClick={loadTasks} isLoading={isLoadingAccept} iconLeft={ArrowPathIcon}>
          Rifresko Detyrat
        </Button>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-5 sm:p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl sm:text-2xl font-semibold text-gray-800 dark:text-white">Detyrat e Disponueshme</h2>
        <Button onClick={loadTasks} variant="ghost" size="sm" isLoading={isLoadingAccept && availableTasks.length > 0} disabled={isLoadingAccept} iconLeft={ArrowPathIcon} className="text-sm">
          {isLoadingAccept && availableTasks.length > 0 ? 'Rifreskim...' : 'Rifresko'}
        </Button>
      </div>
      {errorAccept && <p className="text-red-500 text-sm mb-3">{errorAccept}</p>}
      <div className="space-y-4">
        {availableTasks.map((task) => (
          <div key={task.id} className="border dark:border-slate-700 rounded-lg p-4 hover:shadow-md transition-shadow">
            <h3 className="text-lg font-medium text-primary-600 dark:text-primary-400 mb-2">Porosia #{task.order_id}</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-2 text-sm mb-3">
              <div className="flex items-start">
                <BuildingStorefrontIcon className="h-5 w-5 text-gray-400 dark:text-slate-500 mr-2 mt-0.5 flex-shrink-0" />
                <div>
                  <span className="font-medium text-gray-700 dark:text-slate-300">Nga Restoranti:</span>
                  <p className="text-gray-600 dark:text-slate-400">{task.restaurant_name}</p>
                  <p className="text-gray-500 dark:text-slate-500 text-xs">{task.restaurant_address}</p>
                </div>
              </div>
              <div className="flex items-start">
                <MapPinIcon className="h-5 w-5 text-gray-400 dark:text-slate-500 mr-2 mt-0.5 flex-shrink-0" />
                <div>
                  <span className="font-medium text-gray-700 dark:text-slate-300">Për Klientin:</span>
                  <p className="text-gray-600 dark:text-slate-400">{task.customer_name}</p>
                  <p className="text-gray-500 dark:text-slate-500 text-xs">{task.delivery_address}</p>
                </div>
              </div>
              <div className="flex items-center">
                <MapIcon className="h-5 w-5 text-gray-400 dark:text-slate-500 mr-2 flex-shrink-0" />
                <span className="text-gray-600 dark:text-slate-400">Distanca: {task.distance_km ? `${task.distance_km.toFixed(1)} km` : 'N/A'}</span>
              </div>
              <div className="flex items-center">
                <CurrencyEuroIcon className="h-5 w-5 text-green-500 dark:text-green-400 mr-2 flex-shrink-0" />
                <span className="text-gray-600 dark:text-slate-400 font-semibold">Pagesa: {task.delivery_fee ? `${parseFloat(task.delivery_fee).toFixed(2)} €` : 'N/A'}</span>
              </div>
            </div>
            <Button 
              onClick={() => acceptTask(task.id)} 
              isLoading={isLoadingAccept} // Consider a specific loading state per task if needed
              disabled={isLoadingAccept}
              iconLeft={CheckCircleIcon}
              fullWidth
              size="md"
            >
              Prano Detyrën
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AvailableTasksSection;

// End of File: src/modules/courier/components/AvailableTasksSection.jsx
//--------------------------------------------------

// File: src/modules/courier/components/DeliveryHistorySection.jsx

// src/modules/courier/components/DeliveryHistorySection.jsx
import React, { useEffect, useState } from "react"; // Added useState
import { useTasks } from "../../../context/TaskContext.jsx";
// import HeroIcon from "../../../components/HeroIcon.jsx"; // FSHIJE KËTË
import { ArrowPathIcon, ArchiveBoxXMarkIcon, CheckCircleIcon, ClockIcon } from '@heroicons/react/24/outline';
import Button from "../../../components/Button.jsx";

const DeliveryHistorySection = () => {
  const { completedTasks, fetchCompletedTasks, isLoadingCompleted } = useTasks();
  const [visibleCount, setVisibleCount] = useState(5);

  useEffect(() => {
    fetchCompletedTasks();
  }, [fetchCompletedTasks]);

  const loadMore = () => {
    setVisibleCount(prevCount => prevCount + 5);
  };
  
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString('sq-AL', {
      day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'
    });
  };

  if (isLoadingCompleted && completedTasks.length === 0) {
    return (
        <div className="flex flex-col justify-center items-center min-h-[200px]">
            <ArrowPathIcon className="animate-spin h-10 w-10 text-primary-500 mb-3" />
            <p className="text-gray-500 dark:text-slate-400">Duke ngarkuar historikun...</p>
        </div>
    );
  }

  if (completedTasks.length === 0) {
    return (
      <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-6 text-center">
        <ArchiveBoxXMarkIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-2">Nuk keni histori dërgesash.</h3>
        <p className="text-gray-500 dark:text-slate-400">Dërgesat e kompletuara do të shfaqen këtu.</p>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-5 sm:p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl sm:text-2xl font-semibold text-gray-800 dark:text-white">Historiku i Dërgesave</h2>
         <Button onClick={fetchCompletedTasks} variant="ghost" size="sm" isLoading={isLoadingCompleted && completedTasks.length > 0} disabled={isLoadingCompleted} iconLeft={ArrowPathIcon} className="text-sm">
          {isLoadingCompleted && completedTasks.length > 0 ? 'Rifreskim...' : 'Rifresko'}
        </Button>
      </div>
      <div className="space-y-3">
        {completedTasks.slice(0, visibleCount).map((task) => (
          <div key={task.id} className="border dark:border-slate-700 rounded-md p-3 bg-slate-50 dark:bg-slate-700/30">
            <div className="flex justify-between items-center mb-1">
              <h4 className="text-sm font-medium text-gray-700 dark:text-slate-200">Porosia #{task.order_id}</h4>
              <span className="text-xs text-green-600 dark:text-green-400 flex items-center">
                <CheckCircleIcon className="h-4 w-4 mr-1" /> Kompletuar
              </span>
            </div>
            <p className="text-xs text-gray-500 dark:text-slate-400">
              <ClockIcon className="h-3.5 w-3.5 mr-1 inline align-text-bottom"/>
              Dorëzuar më: {formatDate(task.delivered_at || task.updated_at)}
            </p>
            <p className="text-xs text-gray-600 dark:text-slate-300 mt-0.5">Pagesa: {task.delivery_fee ? `${parseFloat(task.delivery_fee).toFixed(2)} €` : 'N/A'}</p>
            {/* Add more details if needed, e.g., restaurant, customer */}
          </div>
        ))}
      </div>
      {visibleCount < completedTasks.length && (
        <div className="mt-4 text-center">
          <Button onClick={loadMore} variant="outline" size="sm">
            Shfaq Më Shumë
          </Button>
        </div>
      )}
    </div>
  );
};

export default DeliveryHistorySection;

// End of File: src/modules/courier/components/DeliveryHistorySection.jsx
//--------------------------------------------------

// File: src/modules/courier/pages/DriverDashboardPage.jsx

// src/modules/courier/pages/DriverDashboardPage.jsx
import React from 'react';
// Nuk ka nevojë për useAuth këtu pasi DriverLayout e menaxhon
import ActiveDeliverySection from '../components/ActiveDeliverySection.jsx';
import AvailableTasksSection from '../components/AvailableTasksSection.jsx';
import DeliveryHistorySection from '../components/DeliveryHistorySection.jsx';
import AvailabilityToggle from '../components/AvailabilityToggle.jsx'; 
// TaskProvider mbështjell DriverLayout, kështu që useTasks() funksionon te komponentët fëmijë.

const DriverDashboardPage = () => {
  return (
    <div className="container mx-auto px-2 sm:px-0 py-2 md:py-6 space-y-6 md:space-y-8">
      {/* 
        AvailabilityToggle tani është te DriverLayout.jsx (header).
        Nëse dëshiron ta kesh edhe këtu si një kartë më të madhe, mund ta shtosh:
        <section aria-labelledby="availability-heading-main">
          <h2 id="availability-heading-main" className="sr-only">Disponueshmëria</h2>
          <AvailabilityToggle />
        </section> 
        Por kujdes mos të kesh dy instanca që kontrollojnë të njëjtin state pa sinkronizim.
        Mënyra më e mirë është që AvailabilityToggle të marrë props nga TaskContext.
      */}
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8 items-start">
        <div className="lg:col-span-2 space-y-6 md:space-y-8">
          <section aria-labelledby="active-delivery-heading">
            <h2 id="active-delivery-heading" className="sr-only">Dërgesa Aktive</h2>
            <ActiveDeliverySection />
          </section>
          
          <section aria-labelledby="available-tasks-heading" className="pt-2">
             <h2 id="available-tasks-heading" className="sr-only">Dërgesa të Disponueshme</h2>
            <AvailableTasksSection />
          </section>
        </div>

        <div className="lg:col-span-1 space-y-6 md:space-y-8">
          {/* Mund të shtosh këtu një kartë përmbledhëse për statistika të shoferit nëse dëshiron */}
          <section aria-labelledby="delivery-history-heading">
            <h2 id="delivery-history-heading" className="sr-only">Historiku i Dërgesave</h2>
            <DeliveryHistorySection />
          </section>
        </div>
      </div>
    </div>
  );
};

export default DriverDashboardPage;

// End of File: src/modules/courier/pages/DriverDashboardPage.jsx
//--------------------------------------------------

// File: src/modules/courier/routes.jsx

// src/modules/courier/routes.jsx
import React from 'react';
import { Route } from 'react-router-dom';
import DriverDashboardPage from './pages/DriverDashboardPage.jsx';
// Import other driver-specific pages if you create them, e.g., DriverProfilePage

const CourierRoutes = [
  // Assuming DriverLayout handles the /driver or /courier prefix and protection
  <Route key="driver-dashboard" index element={<DriverDashboardPage />} />, // Default for /driver or /courier
  // <Route key="driver-profile" path="profile" element={<DriverProfilePage />} />,
  // <Route key="driver-earnings" path="earnings" element={<DriverEarningsPage />} />,
];

export default CourierRoutes;

// End of File: src/modules/courier/routes.jsx
//--------------------------------------------------

// File: src/modules/customer/components/AddressCard.jsx

import React from 'react';
import Button from '../../../components/Button'; // Assuming Button is in src/components
import { PencilIcon, TrashIcon } from '@heroicons/react/24/outline';

const AddressCard = ({ address, onSelect, onEdit, onDelete, isSelected }) => {
  if (!address) return null;

  return (
    <div 
      className={`p-3 border rounded-lg cursor-pointer transition-all ${isSelected ? 'border-primary-500 ring-2 ring-primary-500 bg-primary-50 dark:bg-primary-500/10' : 'border-gray-300 dark:border-slate-700 hover:border-primary-300 dark:hover:border-primary-600'}`}
      onClick={() => onSelect && onSelect(address.id.toString())} // Ensure address.id is passed if onSelect expects it
    >
      <div className="flex justify-between items-start">
          <div>
              <p className="font-medium text-gray-800 dark:text-slate-100">{address.street}</p>
              <p className="text-sm text-gray-600 dark:text-slate-300">{address.city}, {address.postal_code}</p>
              <p className="text-xs text-gray-500 dark:text-slate-400">{address.country}</p>
          </div>
          <div className="flex-shrink-0 space-x-1">
              {onEdit && 
                <Button variant="icon" size="sm" onClick={(e) => { e.stopPropagation(); onEdit(address);}} title="Modifiko">
                    <PencilIcon className="h-4 w-4 text-blue-500"/>
                </Button>
              }
              {onDelete && 
                <Button variant="icon" size="sm" onClick={(e) => { e.stopPropagation(); onDelete(address.id);}} title="Fshij">
                    <TrashIcon className="h-4 w-4 text-red-500"/>
                </Button>
              }
          </div>
      </div>
      {address.is_default_shipping && (
        <span className="mt-1 inline-block text-xs bg-blue-100 text-blue-700 dark:bg-blue-700 dark:text-blue-200 px-1.5 py-0.5 rounded-full">Primare</span>
      )}
    </div>
  );
};

export default AddressCard;


// End of File: src/modules/customer/components/AddressCard.jsx
//--------------------------------------------------

// File: src/modules/customer/components/AddressForm.jsx

// src/modules/customer/components/AddressForm.jsx
import React, { useState, useEffect } from 'react';
import Button from '../../../components/Button.jsx'; // Sigurohu që ky path është korrekt
import { ArrowPathIcon, CheckCircleIcon } from '@heroicons/react/24/outline'; // Importo ikonat

// Shto props: onSubmit, onCancel, isLoading, submitButtonText
const AddressForm = ({ initialData = {}, onSubmit, onCancel, submitButtonText = "Ruaj Adresën", isLoading = false }) => {
    const [formData, setFormData] = useState({
        street: '',
        city: '',
        postal_code: '', // Përdor postal_code siç e pret backend-i
        country: 'Kosovo', // Default
        is_default_shipping: false,
    });
    const [error, setError] = useState('');

    useEffect(() => {
        setFormData({
            street: initialData.street || '',
            city: initialData.city || '',
            postal_code: initialData.postal_code || initialData.zipCode || '', // Mbulo të dy rastet
            country: initialData.country || 'Kosovo',
            is_default_shipping: initialData.is_default_shipping || false,
        });
    }, [initialData]);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
        if(error) setError(''); // Clear error on change
    };

    const handleSubmitLocal = async (e) => {
        e.preventDefault();
        setError(''); 
        if (!formData.street.trim() || !formData.city.trim() || !formData.postal_code.trim() || !formData.country.trim()) {
            setError("Të gjitha fushat e adresës janë të detyrueshme.");
            return;
        }
        // Thirr onSubmit të kaluar nga prindi (AddressFormModal -> CheckoutPage)
        if (onSubmit) {
            onSubmit(formData); 
        }
    };

    return (
        <form onSubmit={handleSubmitLocal} className="space-y-4">
            {error && <p className="text-red-600 dark:text-red-400 text-sm bg-red-50 dark:bg-red-900/30 p-2 rounded-md">{error}</p>}
            <div>
                <label htmlFor="address-street" className="label-form">Rruga</label>
                <input type="text" name="street" id="address-street" value={formData.street} onChange={handleChange} required className="input-form w-full" />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label htmlFor="address-city" className="label-form">Qyteti</label>
                    <input type="text" name="city" id="address-city" value={formData.city} onChange={handleChange} required className="input-form w-full" />
                </div>
                <div>
                    <label htmlFor="address-postal_code" className="label-form">Kodi Postar</label>
                    <input type="text" name="postal_code" id="address-postal_code" value={formData.postal_code} onChange={handleChange} required className="input-form w-full" />
                </div>
            </div>
             <div>
                <label htmlFor="address-country" className="label-form">Shteti</label>
                <input type="text" name="country" id="address-country" value={formData.country} onChange={handleChange} required className="input-form w-full" />
            </div>
            <div className="flex items-center">
                <input id="address-is_default_shipping" name="is_default_shipping" type="checkbox" checked={formData.is_default_shipping} onChange={handleChange} className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-slate-600 rounded" />
                <label htmlFor="address-is_default_shipping" className="ml-2 block text-sm text-gray-900 dark:text-slate-200">Cakto si adresë primare</label>
            </div>
            <div className="flex flex-col sm:flex-row gap-3 pt-2">
                {onCancel && (
                    <Button type="button" onClick={onCancel} variant="outline" fullWidth>
                        Anulo
                    </Button>
                )}
                <Button type="submit" variant="primary" isLoading={isLoading} disabled={isLoading} fullWidth
                        iconLeft={isLoading ? ArrowPathIcon : CheckCircleIcon}
                        iconLeftClassName="h-5 w-5" // Assuming h-5 w-5 was intended
                >
                    {submitButtonText}
                </Button>
            </div>
        </form>
    );
};

export default AddressForm;

// End of File: src/modules/customer/components/AddressForm.jsx
//--------------------------------------------------

// File: src/modules/customer/components/AddressFormModal.jsx

import React from 'react';
import ModalShell from '../../../components/ModalShell.jsx'; // Verifiko path-in e saktë
import AddressForm from './AddressForm.jsx'; // Supozojmë se AddressForm është në të njëjtin folder

const AddressFormModal = ({ isOpen, onClose, onSaveAddress, existingAddress, userId }) => {
  // userId kalohet te AddressForm nëse AddressForm bën direkt API calls,
  // por në CheckoutPage, logjika e API call bëhet te CheckoutPage vetë.

  const handleFormSubmit = async (addressData) => {
    // Kjo funksion do të thirret nga AddressForm kur forma bëhet submit.
    // Pastaj, ne thërrasim onSaveAddress (që është handleAddressSave te CheckoutPage).
    if (onSaveAddress) {
      // onSaveAddress te CheckoutPage pret (savedAddress), jo (addressData, existingAddress?.id)
      // Pra, AddressForm duhet të bëjë API call dhe të kthejë adresën e ruajtur,
      // OSE ky modal duhet të bëjë API call.
      // Për momentin, po e kalojmë thjesht te onSaveAddress.
      // Do të jetë më mirë që onSaveAddress te CheckoutPage të bëjë API call.
      onSaveAddress(addressData, existingAddress?.id); 
    }
  };

  return (
    <ModalShell
      isOpen={isOpen}
      onClose={onClose}
      title={existingAddress ? "Modifiko Adresën" : "Shto Adresë të Re"}
      size="md"
    >
      <AddressForm
        initialData={existingAddress || {}} // Të dhënat fillestare për formën
        onSubmit={handleFormSubmit} // Funksioni që thirret kur forma bëhet submit brenda AddressForm
        onCancel={onClose} // Funksioni për të mbyllur modalin nga butoni Cancel i AddressForm
        // isLoading={...} // Duhet një state për loading nëse API call bëhet këtu
        submitButtonText={existingAddress ? "Ruaj Ndryshimet" : "Shto Adresën"}
      />
    </ModalShell>
  );
};

export default AddressFormModal;


// End of File: src/modules/customer/components/AddressFormModal.jsx
//--------------------------------------------------

// File: src/modules/customer/components/MenuItemCard.jsx

// filepath: frontend/src/modules/customer/components/MenuItemCard.jsx
import React from 'react';
import Button from '../../../components/Button';
import { PlusCircleIcon, InformationCircleIcon } from '@heroicons/react/24/outline';

const MenuItemCard = ({ item, onAddToCart }) => {
  const displayImage = item.image_url || `https://placehold.co/300x200/FDC830/78350F?text=${encodeURIComponent(item.name)}`;

  return (
    <div className={`bg-white dark:bg-slate-800 shadow-lg rounded-lg overflow-hidden flex flex-col group transition-all duration-300 hover:shadow-xl ${!item.is_available ? 'opacity-60' : ''}`}>
      <div className="relative h-40 sm:h-48 overflow-hidden">
        <img 
          src={displayImage}
          alt={item.name} 
          className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
        />
        {!item.is_available && (
          <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
            <span className="text-white text-sm font-semibold px-2 py-1 bg-red-600 rounded">
              I Padisponueshëm
            </span>
          </div>
        )}
      </div>
      
      <div className="p-4 flex flex-col flex-grow">
        <h3 className="text-md sm:text-lg font-semibold text-gray-800 dark:text-white mb-1 truncate" title={item.name}>
          {item.name}
        </h3>
        {item.description && (
          <p className="text-xs sm:text-sm text-gray-500 dark:text-slate-400 mb-2 line-clamp-2" title={item.description}>
            {item.description}
          </p>
        )}
        
        <div className="mt-auto"> {/* Pushes price and actions to the bottom */}
          <p className="text-lg sm:text-xl font-bold text-primary-600 dark:text-primary-400 mb-3">
            {parseFloat(item.price).toFixed(2)} €
          </p>

          {item.is_available ? (
            <Button onClick={() => onAddToCart(item)} variant="primary" fullWidth iconLeft={PlusCircleIcon}>
              Shto në Shportë
            </Button>
          ) : (
            <Button variant="secondary" fullWidth disabled iconLeft={InformationCircleIcon}>
              I Padisponueshëm
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default MenuItemCard;

// End of File: src/modules/customer/components/MenuItemCard.jsx
//--------------------------------------------------

// File: src/modules/customer/components/OrderHistoryItem.jsx

// src/modules/customer/components/OrderHistoryItem.jsx
import React from 'react';
import { Link } from 'react-router-dom'; // For future "View Order Detail" page

const OrderHistoryItem = ({ order }) => {
    // Function to get a user-friendly status display
    const getDisplayStatus = (status) => {
        return status?.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) || 'N/A';
    };

    const getStatusColorClass = (status) => {
        const s = status?.toUpperCase();
        if (s === 'DELIVERED') return 'bg-green-100 text-green-700';
        if (s === 'PREPARING' || s === 'ON_THE_WAY' || s === 'CONFIRMED' || s === 'READY_FOR_PICKUP') return 'bg-yellow-100 text-yellow-700';
        if (s && s.includes('CANCELLED')) return 'bg-red-100 text-red-700';
        if (s === 'PENDING') return 'bg-blue-100 text-blue-700';
        return 'bg-gray-100 text-gray-700';
    };

    return (
        <div className="bg-white p-4 sm:p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow mb-4">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-3 pb-3 border-b border-gray-200">
                <div>
                    <h3 className="text-lg font-semibold text-indigo-700">
                        Order ID: <span className="font-bold">{order.id}</span>
                    </h3>
                    <p className="text-xs text-gray-500">
                        Placed on: {new Date(order.created_at).toLocaleDateString('en-GB', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}
                    </p>
                </div>
                <span className={`mt-2 sm:mt-0 px-3 py-1 text-xs font-semibold rounded-full ${getStatusColorClass(order.status)}`}>
                    {getDisplayStatus(order.status)}
                </span>
            </div>
            {order.restaurant_details && 
                <p className="text-sm text-gray-700 mb-2">
                    Restaurant: <span className="font-medium">{order.restaurant_details.name}</span>
                </p>
            }
            <div className="mb-3">
                <p className="text-xs text-gray-500 mb-1">Items:</p>
                <ul className="list-disc list-inside pl-4 text-sm text-gray-600">
                    {(order.items && order.items.length > 0) ? order.items.map((item, index) => (
                        <li key={index /* Ideally item.id if available from backend OrderItemSerializer */}>
                            {item.quantity} x {item.menu_item_name_at_purchase || item.menu_item_details?.name || 'Unknown Item'}
                        </li>
                    )) : <li>No items information.</li>}
                </ul>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center pt-3 border-t border-gray-200">
                <p className="text-md font-semibold text-gray-800 mb-2 sm:mb-0">
                    Total: <span className="text-indigo-700">€{parseFloat(order.total_amount).toFixed(2)}</span>
                </p>
                <Link 
                    // TODO: Create an Order Detail page for customers too
                    to={`/my-orders/${order.id}`} // Example path for a future detailed order view
                    className="text-sm text-indigo-600 hover:text-indigo-800 font-medium py-2 px-4 rounded-md hover:bg-indigo-50 transition-colors"
                >
                    View Details / Track
                </Link>
            </div>
        </div>
    );
};
export default OrderHistoryItem;

// End of File: src/modules/customer/components/OrderHistoryItem.jsx
//--------------------------------------------------

// File: src/modules/customer/components/OrderSummaryCard.jsx

// src/modules/customer/components/OrderSummaryCard.jsx
import React from 'react';

const OrderSummaryCard = ({ cart }) => {
    if (!cart || !cart.items || cart.items.length === 0) {
        return (
            <div className="bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-xl font-semibold text-gray-800 mb-4 border-b pb-2">Order Summary</h3>
                <p className="text-gray-500">Your cart is empty.</p>
            </div>
        );
    }

    // Ensure item.menu_item_details and item.menu_item_details.price exist and are numbers
    const subtotal = cart.items.reduce((sum, item) => {
        const price = parseFloat(item.menu_item_details?.price || 0);
        const quantity = item.quantity || 0;
        return sum + price * quantity;
    }, 0);
    
    // Example delivery fee - this should ideally come from backend or be calculated based on rules
    const deliveryFee = 5.00; 
    const total = subtotal + deliveryFee;

    return (
        <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold text-gray-800 mb-4 border-b pb-2">Order Summary</h3>
            <div className="space-y-2 mb-4 max-h-60 overflow-y-auto"> {/* Added max-height and overflow */}
                {cart.items.map(item => (
                    <div key={item.id || item.menu_item} className="flex justify-between text-sm">
                        <span className="text-gray-600 truncate pr-2 flex-1">
                            {item.menu_item_details?.name || 'Unknown Item'} x {item.quantity || 0}
                        </span>
                        <span className="text-gray-800 whitespace-nowrap">
                            €{(parseFloat(item.menu_item_details?.price || 0) * (item.quantity || 0)).toFixed(2)}
                        </span>
                    </div>
                ))}
            </div>
            <div className="border-t pt-4 space-y-1">
                <div className="flex justify-between text-sm">
                    <span className="text-gray-600">Subtotal</span>
                    <span className="text-gray-800 font-medium">€{subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between text-sm">
                    <span className="text-gray-600">Est. Delivery Fee</span>
                    <span className="text-gray-800 font-medium">€{deliveryFee.toFixed(2)}</span>
                </div>
                {/* You can add taxes or other fees here */}
                <div className="flex justify-between text-lg font-semibold mt-3 pt-3 border-t">
                    <span className="text-gray-800">Total</span>
                    <span className="text-gray-800">€{total.toFixed(2)}</span>
                </div>
            </div>
        </div>
    );
};
export default OrderSummaryCard;

// End of File: src/modules/customer/components/OrderSummaryCard.jsx
//--------------------------------------------------

// File: src/modules/customer/components/RestaurantCard.jsx

// filepath: frontend/src/modules/customer/components/RestaurantCard.jsx
import React from 'react';
// import { Link } from 'react-router-dom'; // KOMENTOJE KETE
import { useNavigate } from 'react-router-dom'; // SHTO KETE
import { StarIcon as StarIconSolid, ChevronRightIcon } from '@heroicons/react/24/solid';
import { StarIcon as StarIconOutline } from '@heroicons/react/24/outline';

const RestaurantCard = ({ restaurant }) => {
  const navigate = useNavigate(); // SHTO KETE

  if (!restaurant) {
    return null; // Or some placeholder/error display
  }

  const imageUrl = restaurant.main_image_url || restaurant.image_url || restaurant.image || 'https://placehold.co/600x400/E2E8F0/A0AEC0?text=Restaurant';
  
  // Log for debugging
  console.log("RestaurantCard - restaurant.id:", restaurant.id);
  const targetPath = `/customer/restaurants/${restaurant.id}`;
  console.log("RestaurantCard - targetPath:", targetPath);

  const ratingValue = parseFloat(restaurant.average_rating);
  const starCount = 5;

  const handleCardClick = () => {
    // const path = `/customer/restaurants/${restaurant.id}`; // Already defined as targetPath
    console.log("Navigating programmatically to:", targetPath);
    navigate(targetPath);
  };

  return (
    // NDRYSHO Link ME DIV DHE onClick
    <div
      onClick={handleCardClick} // SHTO KETE
      className="bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden cursor-pointer hover:shadow-2xl transition-shadow duration-300 ease-in-out flex flex-col group"
      role="link" // Added for accessibility, as it behaves like a link
      tabIndex={0} // Make it focusable
      onKeyPress={(e) => { if (e.key === 'Enter' || e.key === ' ') handleCardClick(); }} // Keyboard navigation
    >
      <div className="w-full h-48 overflow-hidden">
        <img 
          src={imageUrl} 
          alt={restaurant.name || 'Restaurant image'} 
          className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"
          onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/600x400/E2E8F0/A0AEC0?text=Image+Not+Found'; }}
        />
      </div>
      <div className="p-4 flex flex-col flex-grow">
        <h3 className="text-lg font-semibold text-gray-800 dark:text-white truncate group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors" title={restaurant.name}>
          {restaurant.name || 'Unnamed Restaurant'}
        </h3>
        <p className="text-sm text-gray-500 dark:text-slate-400 truncate" title={restaurant.cuisine_type || 'N/A'}>
          {restaurant.cuisine_type || 'Cuisine not specified'}
        </p>
        
        <div className="flex items-center my-2">
          {/* Star Rating Display */}
          {Array.from({ length: starCount }, (_, index) => {
            const starValue = index + 1;
            if (starValue <= Math.floor(ratingValue)) {
              return <StarIconSolid key={index} className="h-5 w-5 text-yellow-400" />;
            } else if (starValue - 0.5 <= ratingValue) {
              // This logic for half star might need a specific half-star icon or more complex SVG
              // For now, let's treat it as an outline or solid based on rounding, or simplify
              return <StarIconSolid key={index} className="h-5 w-5 text-yellow-400" />; // Simplified: show solid for .5 or more
            } else {
              return <StarIconOutline key={index} className="h-5 w-5 text-yellow-400" />;
            }
          })}
          <span className="ml-2 text-sm text-gray-600 dark:text-slate-300">
            {ratingValue ? ratingValue.toFixed(1) : 'N/A'} ({restaurant.reviews_count || 0} reviews)
          </span>
        </div>

        <p className="text-xs text-gray-500 dark:text-slate-400">
          {restaurant.address?.street || 'Address not available'}
        </p>

        <div className="mt-auto pt-3">
          <span className="inline-flex items-center text-sm font-medium text-primary-600 dark:text-primary-400 group-hover:text-primary-700 dark:group-hover:text-primary-300">
              Shiko Menunë
              <ChevronRightIcon className="ml-1 h-4 w-4 transition-transform duration-200 group-hover:translate-x-0.5" />
          </span>
        </div>
      </div>
    </div>
  );
};

export default RestaurantCard;

// End of File: src/modules/customer/components/RestaurantCard.jsx
//--------------------------------------------------

// File: src/modules/customer/components/ReviewCard.jsx

import React from 'react';
// import HeroIcon from '../../../components/HeroIcon'; // Remove this
import { StarIcon as StarIconSolid } from '@heroicons/react/24/solid';
import { StarIcon as StarIconOutline } from '@heroicons/react/24/outline'; // For empty stars if needed
import { UserCircleIcon, ChatBubbleLeftEllipsisIcon } from '@heroicons/react/24/outline'; // For user and reply icon
import Button from '../../../components/Button'; // If you have reply functionality

const ReviewCard = ({ review, onReply, currentUserId, onEditReply, onDeleteReply }) => {
  const renderStars = (rating) => {
    const totalStars = 5;
    let stars = [];
    for (let i = 1; i <= totalStars; i++) {
      stars.push(
        i <= rating ? (
          <StarIconSolid key={i} className="h-5 w-5 text-yellow-400" />
        ) : (
          <StarIconOutline key={i} className="h-5 w-5 text-yellow-400" />
        )
      );
    }
    return stars;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Datë e panjohur';
    return new Date(dateString).toLocaleDateString('sq-AL', {
      year: 'numeric', month: 'long', day: 'numeric',
    });
  };

  return (
    <div className="bg-white dark:bg-slate-800 shadow-md rounded-lg p-4 sm:p-5">
      <div className="flex items-start mb-2">
        <UserCircleIcon className="h-8 w-8 text-gray-400 dark:text-slate-500 mr-3 flex-shrink-0" />
        <div>
          <h4 className="text-sm font-semibold text-gray-800 dark:text-slate-100">
            {review.user_details?.first_name || review.user_details?.email || 'Përdorues Anonim'}
          </h4>
          <p className="text-xs text-gray-500 dark:text-slate-400">{formatDate(review.created_at)}</p>
        </div>
        <div className="ml-auto flex items-center">{renderStars(review.rating)}</div>
      </div>
      <p className="text-sm text-gray-700 dark:text-slate-300 mb-3 leading-relaxed">{review.comment}</p>

      {review.reply && (
        <div className="mt-3 pt-3 border-t border-gray-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700/50 p-3 rounded-md">
          <div className="flex items-start">
            <ChatBubbleLeftEllipsisIcon className="h-6 w-6 text-primary-500 dark:text-primary-400 mr-2.5 flex-shrink-0" />
            <div>
              <p className="text-xs font-semibold text-primary-600 dark:text-primary-300 mb-0.5">
                Përgjigje nga Restoranti ({formatDate(review.reply.created_at)})
              </p>
              <p className="text-sm text-gray-600 dark:text-slate-300 leading-relaxed">{review.reply.text}</p>
            </div>
          </div>
           {/* Optional: Edit/Delete reply for restaurant owner */}
           {currentUserId && review.reply.user === currentUserId && onEditReply && onDeleteReply && (
             <div className="mt-2 text-right">
                <Button size="xs" variant="ghost" onClick={() => onEditReply(review.id, review.reply)} className="mr-1">Modifiko</Button>
                <Button size="xs" variant="ghost" onClick={() => onDeleteReply(review.id, review.reply.id)} className="text-red-500">Fshij</Button>
             </div>
           )}
        </div>
      )}
      
      {/* Placeholder for reply button if the current user is the restaurant owner and there's no reply yet */}
      {/* This logic would typically be in a different view (Restaurant Owner's review management) */}
      {/* {onReply && !review.reply && currentUserId === review.restaurant_owner_id && (
        <div className="mt-3 text-right">
          <Button onClick={() => onReply(review.id)} size="sm" variant="outline">
            Përgjigju
          </Button>
        </div>
      )} */}
    </div>
  );
};

export default ReviewCard;


// End of File: src/modules/customer/components/ReviewCard.jsx
//--------------------------------------------------

// File: src/modules/customer/components/ReviewForm.jsx

import React, { useState } from 'react';
import Button from '../../../components/Button.jsx'; // Sigurohu që ky path është korrekt
import { StarIcon as StarIconSolid } from '@heroicons/react/20/solid'; // Për yje të mbushur
import { StarIcon as StarIconOutline } from '@heroicons/react/24/outline'; // Për yje bosh (opsionale)
import { customerApi } from '../../../api/customerApi.js'; // Për të dërguar review-in
import { useNotification } from '../../../context/NotificationContext.jsx';

const ReviewForm = ({ restaurantId, onReviewSubmitted, onCancel }) => {
  const [rating, setRating] = useState(0); // 0 do të thotë pa vlerësim
  const [comment, setComment] = useState('');
  const [hoverRating, setHoverRating] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const { showSuccess, showError } = useNotification();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (rating === 0) {
      showError("Ju lutem jepni një vlerësim (rating) duke klikuar mbi yje.");
      return;
    }
    setIsLoading(true);
    try {
      // Backend-i pret: restaurant (ID), user (nga token), rating, comment
      // 'restaurant' do të jetë restaurantId i kaluar si prop
      // 'user' do të merret nga backend-i bazuar te tokeni
      const newReview = await customerApi.submitRestaurantReview(restaurantId, { rating, comment });
      showSuccess("Vlerësimi u dërgua me sukses!");
      if (onReviewSubmitted) {
        onReviewSubmitted(newReview); // Kalo review-in e ri te prindi
      }
      setRating(0); // Reset form
      setComment('');
    } catch (error) {
      console.error("Error submitting review:", error);
      showError(error.message || "Gabim gjatë dërgimit të vlerësimit.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 p-4 border border-gray-200 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 shadow-md mt-4 mb-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">Vlerësimi Juaj:</label>
        <div className="flex items-center space-x-1">
          {[1, 2, 3, 4, 5].map((star) => (
            <button
              type="button"
              key={star}
              onClick={() => setRating(star)}
              onMouseEnter={() => setHoverRating(star)}
              onMouseLeave={() => setHoverRating(0)}
              className="focus:outline-none p-0.5 rounded-full hover:bg-yellow-100 dark:hover:bg-yellow-500/20 transition-colors"
              aria-label={`Rate ${star} out of 5 stars`}
            >
              <StarIconSolid
                className={`h-6 w-6 cursor-pointer transition-colors 
                            ${(hoverRating >= star || rating >= star) 
                                ? 'text-yellow-400 dark:text-yellow-300' 
                                : 'text-gray-300 dark:text-slate-600 hover:text-yellow-300/70'}`}
              />
            </button>
          ))}
        </div>
        {rating === 0 && <p className="text-xs text-red-500 mt-1">Zgjidhni një vlerësim.</p>}
      </div>
      <div>
        <label htmlFor="comment" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Komenti Juaj (opsional):</label>
        <textarea
          id="comment"
          name="comment"
          rows="3"
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          className="input-form mt-1 w-full"
          placeholder="Shkruani komentin tuaj këtu..."
        />
      </div>
      <div className="flex justify-end space-x-3">
        {onCancel && (
            <Button type="button" variant="ghost" onClick={onCancel} disabled={isLoading}>
                Anulo
            </Button>
        )}
        <Button type="submit" variant="primary" isLoading={isLoading} disabled={isLoading || rating === 0}>
          Dërgo Vlerësimin
        </Button>
      </div>
    </form>
  );
};

export default ReviewForm;


// End of File: src/modules/customer/components/ReviewForm.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/CartPage.jsx

// src/modules/customer/pages/CartPage.jsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useCart } from '../../../context/CartContext.jsx';
import { useAuth } from '../../../context/AuthContext.jsx';
import Button from '../../../components/Button.jsx';
import { ShoppingCartIcon, TrashIcon, BuildingStorefrontIcon, InformationCircleIcon, MinusCircleIcon, PlusCircleIcon } from '@heroicons/react/24/outline';
import { customerApi } from '../../../api/customerApi.js'; // For fetching restaurant details

const CartPage = () => {
  const {
    cart, // cart is an object: { items: [], total_amount: ..., ... }
    removeCartItem, // Correct name from context
    updateCartItemQuantity, // Correct name from context
    clearCart,
    getCartTotalAmount, // Correct name from context
    getRestaurantIdFromCart,
    fetchCart, // Added to potentially re-fetch cart if needed
  } = useCart();
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();
  const [restaurantDetails, setRestaurantDetails] = useState(null);
  const [isLoadingRestaurant, setIsLoadingRestaurant] = useState(false);
  
  const cartRestaurantId = getRestaurantIdFromCart();

  useEffect(() => {
    const fetchRestaurantName = async () => {
      if (cartRestaurantId) {
        setIsLoadingRestaurant(true);
        try {
          const details = await customerApi.fetchRestaurantById(cartRestaurantId);
          setRestaurantDetails(details);
        } catch (error) {
          console.error("CartPage: Failed to fetch restaurant details for cart:", error);
          // Potentially show a notification to the user
        } finally {
          setIsLoadingRestaurant(false);
        }
      } else {
        setRestaurantDetails(null);
      }
    };

    fetchRestaurantName();
  }, [cartRestaurantId]);

  const handleCheckout = () => {
    if (!isAuthenticated) {
      navigate('/auth/login', { state: { from: { pathname: '/customer/checkout' } } });
    } else {
      navigate('/customer/checkout');
    }
  };

  // Main change here: check cart.items
  if (!cart || !cart.items || cart.items.length === 0) {
    return (
      <div className="container mx-auto py-8 text-center">
        <ShoppingCartIcon className="h-24 w-24 text-gray-300 dark:text-slate-600 mx-auto mb-6" />
        <h1 className="text-2xl font-semibold text-gray-700 dark:text-slate-200 mb-3">Shporta juaj është bosh</h1>
        <p className="text-gray-500 dark:text-slate-400 mb-6">Shtoni artikuj nga restorantet për të vazhduar.</p>
        <Button onClick={() => navigate('/customer/restaurants')} variant="primary" size="lg" iconLeft={BuildingStorefrontIcon}>
          Shfleto Restorantet
        </Button>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6 sm:py-8">
      <div className="flex flex-col lg:flex-row gap-6 sm:gap-8">
        {/* Cart Items Section */}
        <div className="lg:w-2/3">
          <div className="flex justify-between items-center mb-4 sm:mb-6">
            <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white">Shporta Juaj</h1>
            {/* Also here, check cart.items.length */}
            {cart.items && cart.items.length > 0 && (
              <Button onClick={clearCart} variant="outline" size="sm" iconLeft={TrashIcon} className="text-red-500 border-red-500 hover:bg-red-50 dark:text-red-400 dark:border-red-400 dark:hover:bg-red-500/10">
                Pastro Shportën
              </Button>
            )}
          </div>

          {isLoadingRestaurant && (
            <div className="mb-4 p-3 bg-blue-50 dark:bg-blue-800/30 rounded-lg border border-blue-200 dark:border-blue-700 text-center">
              <p className="text-sm text-blue-700 dark:text-blue-300">Duke ngarkuar detajet e restorantit...</p>
            </div>
          )}

          {restaurantDetails && (
            <div className="mb-4 p-3 bg-primary-50 dark:bg-primary-800/30 rounded-lg border border-primary-200 dark:border-primary-700">
              <p className="text-sm text-primary-700 dark:text-primary-300">
                <InformationCircleIcon className="h-5 w-5 inline mr-1.5 align-text-bottom" />
                Ju po porosisni nga: <Link to={`/customer/restaurants/${restaurantDetails.id}`} className="font-semibold hover:underline">{restaurantDetails.name}</Link>.
                Për të porositur nga një restorant tjetër, ju lutem pastroni shportën aktuale.
              </p>
            </div>
          )}

          <div className="space-y-4">
            {/* AND HERE: use cart.items.map */}
            {cart.items.map(item => (
              // item here is an object from cart.items array
              // It should have: id (of CartItem), quantity, menu_item (ID of MenuItem),
              // and menu_item_details (the full MenuItemSerializer object)
              <div key={item.id} className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-md flex flex-col sm:flex-row items-start sm:items-center gap-4">
                <img 
                  src={item.menu_item_details?.image || `https://placehold.co/100x100/eee/ccc?text=${item.menu_item_details?.name?.[0] || 'P'}`} 
                  alt={item.menu_item_details?.name || 'Artikull'} 
                  className="w-24 h-24 sm:w-20 sm:h-20 object-cover rounded-md flex-shrink-0"
                />
                <div className="flex-grow">
                  <h3 className="text-md sm:text-lg font-medium text-gray-800 dark:text-slate-100">{item.menu_item_details?.name || 'Artikull i Panjohur'}</h3>
                  <p className="text-sm text-gray-500 dark:text-slate-400">Çmimi: {parseFloat(item.menu_item_details?.price || 0).toFixed(2)} €</p>
                </div>
                <div className="flex items-center space-x-2 sm:space-x-3 my-2 sm:my-0 flex-shrink-0">
                  <Button 
                    onClick={() => updateCartItemQuantity(item.id, item.quantity - 1)} 
                    disabled={item.quantity <= 1}
                    variant="ghost" 
                    size="icon" 
                    aria-label="Redukto sasinë"
                    className="p-1.5"
                  >
                    <MinusCircleIcon className="h-5 w-5 text-gray-500 dark:text-slate-400" />
                  </Button>
                  <span className="text-md font-medium text-gray-700 dark:text-slate-200 w-8 text-center">{item.quantity}</span>
                  <Button 
                    onClick={() => updateCartItemQuantity(item.id, item.quantity + 1)} 
                    variant="ghost" 
                    size="icon" 
                    aria-label="Shto sasinë"
                    className="p-1.5"
                  >
                    <PlusCircleIcon className="h-5 w-5 text-gray-500 dark:text-slate-400" />
                  </Button>
                </div>
                <p className="text-md sm:text-lg font-semibold text-gray-800 dark:text-slate-100 w-full sm:w-auto text-right sm:text-left">
                  {/* Subtotal for this item is calculated from menu_item_details.price */}
                  {(parseFloat(item.menu_item_details?.price || 0) * item.quantity).toFixed(2)} €
                </p>
                <Button 
                  onClick={() => removeCartItem(item.id)} // Note: item.id here is the ID of CartItem
                  variant="ghost" 
                  size="icon" 
                  aria-label="Hiqe artikullin"
                  className="text-red-500 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-500/10 p-1.5"
                >
                  <TrashIcon className="h-5 w-5" />
                </Button>
              </div>
            ))}
          </div>
        </div>

        {/* Order Summary Section */}
        <div className="lg:w-1/3">
          <div className="bg-white dark:bg-slate-800 p-5 sm:p-6 rounded-lg shadow-lg sticky top-24">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-4 border-b pb-3 dark:border-slate-700">Përmbledhja e Porosisë</h2>
            <div className="space-y-2 mb-4">
              <div className="flex justify-between text-gray-600 dark:text-slate-300">
                <span>Nëntotali:</span>
                {/* Use getCartTotalAmount() directly */}
                <span>{getCartTotalAmount().toFixed(2)} €</span>
              </div>
              <div className="flex justify-between text-gray-600 dark:text-slate-300">
                <span>Tarifa e Dërgesës:</span>
                {/* This should come from restaurantDetails */}
                <span>{(restaurantDetails?.delivery_fee_placeholder || restaurantDetails?.delivery_fee || 0.00).toFixed(2)} €</span>
              </div>
            </div>
            <div className="flex justify-between text-xl font-bold text-gray-800 dark:text-white pt-3 border-t dark:border-slate-700">
              <span>Totali:</span>
              <span>{(getCartTotalAmount() + (restaurantDetails?.delivery_fee_placeholder || restaurantDetails?.delivery_fee || 0.00)).toFixed(2)} €</span>
            </div>
            <Button onClick={handleCheckout} fullWidth size="lg" className="mt-6" disabled={isLoadingRestaurant}>
              {isLoadingRestaurant ? 'Duke pritur detajet...' : 'Vazhdo te Pagesa'}
            </Button>
            <Link to="/customer/restaurants" className="block text-center mt-4 text-sm text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300">
              Vazhdo Blerjen
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CartPage;

// End of File: src/modules/customer/pages/CartPage.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/CheckoutPage.jsx

// src/modules/customer/pages/CheckoutPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation, Navigate } from 'react-router-dom';
import { useCart } from "../../../context/CartContext.jsx";
import { useAuth } from "../../../context/AuthContext.jsx";
import { customerApi } from "../../../api/customerApi.js";
import { useNotification } from "../../../context/NotificationContext.jsx";
import Button from "../../../components/Button.jsx";
import AddressCard from '../components/AddressCard.jsx'; 
import AddressFormModal from '../components/AddressFormModal.jsx';
import { PlusCircleIcon, PencilIcon, TrashIcon, XMarkIcon } from '@heroicons/react/24/outline';
import OrderSummaryCard from '../components/OrderSummaryCard.jsx'; // SHTO KETE

const CheckoutPage = () => {
  const { cart, fetchCart, getCartTotalAmount, getCartItemCount } = useCart();
  const { user, token, isAuthenticated } = useAuth(); // Destructure from useAuth
  const { showNotification } = useNotification();
  const navigate = useNavigate();
  const location = useLocation();

  const [addresses, setAddresses] = useState([]);
  const [isLoadingAddresses, setIsLoadingAddresses] = useState(true);
  const [selectedAddressId, setSelectedAddressId] = useState('');
  const [showAddressFormModal, setShowAddressFormModal] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);
  const [deliveryNotes, setDeliveryNotes] = useState('');
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState('CASH_ON_DELIVERY');

  const restaurantDataForCart = cart.restaurant_details;
  const deliveryFee = parseFloat(restaurantDataForCart?.delivery_fee_placeholder || 2.00);
  const subtotal = getCartTotalAmount();
  const total = subtotal + deliveryFee;

  // Extract stable primitive values from user and token
  const userId = user?.id;
  const userToken = token;

  // Add this log to see when fetchAddressesCallback is re-created
  // console.log("CheckoutPage: Defining fetchAddressesCallback function object");

  const fetchAddressesCallback = useCallback(async () => {
    // console.log("CheckoutPage: fetchAddressesCallback RECREATED or CALLED. UserID:", userId, "Token:", userToken); // More detailed log
    if (!userId || !userToken) {
        setIsLoadingAddresses(false);
        return;
    }
    setIsLoadingAddresses(true);
    try {
      console.log("CheckoutPage: Attempting to fetch addresses with customerApi.fetchUserAddresses");
      const userAddresses = await customerApi.fetchUserAddresses();
      setAddresses(userAddresses || []);
      const defaultAddress = (userAddresses || []).find(addr => addr.is_default_shipping);
      if (defaultAddress) {
        setSelectedAddressId(defaultAddress.id.toString());
      } else if (userAddresses?.length > 0) {
        setSelectedAddressId(userAddresses[0].id.toString());
      } else {
        // setShowAddressFormModal(true); // Consider if this should always happen or only if no addresses and cart not empty
      }
    } catch (error) {
      showNotification(error.message || "Nuk mund të ngarkoheshin adresat.", "error");
    } finally {
      setIsLoadingAddresses(false);
    }
  }, [userId, userToken, showNotification]); // Use stable primitives userId, userToken

  useEffect(() => {
    console.log("CheckoutPage Addresses useEffect - MOUNTING/UPDATING. IsAuthenticated:", isAuthenticated, "UserID:", userId, "UserToken:", userToken);
    // ProtectedRoute should ensure that we are authenticated as a CUSTOMER before rendering this page.
    // Thus, the navigation logic for !isAuthenticated can be removed.
    if (isAuthenticated && userId && userToken) { // Check against stable primitives
        fetchAddressesCallback();
    }
    // Removed navigation logic for !isAuthenticated, as ProtectedRoute should handle this.
    return () => {
        console.log("CheckoutPage Addresses useEffect - UNMOUNTING/CLEANUP");
    };
  }, [isAuthenticated, userId, userToken, fetchAddressesCallback]); // Simplified dependencies
  
  const handleAddressSaveViaModal = async (addressDataFromForm, addressIdToUpdate = null) => {
    setIsLoadingAddresses(true); 
    try {
        let savedAddress;
        if (addressIdToUpdate) {
            savedAddress = await customerApi.updateUserAddress(addressIdToUpdate, addressDataFromForm);
            showNotification("Adresa u përditësua me sukses!", "success"); // PERDORE showNotification
        } else {
            savedAddress = await customerApi.createUserAddress(addressDataFromForm);
            showNotification("Adresa u shtua me sukses!", "success"); // PERDORE showNotification
        }
        await fetchAddressesCallback(); 
        setSelectedAddressId(savedAddress.id.toString());
        setShowAddressFormModal(false);
        setEditingAddress(null);
    } catch (error) {
        showNotification(error.message || "Gabim gjatë ruajtjes së adresës.", "error"); // PERDORE showNotification
    } finally {
        setIsLoadingAddresses(false);
    }
  };

  const handleEditAddress = (address) => {
    setEditingAddress(address);
    setShowAddressFormModal(true);
  };

  const handleDeleteAddress = async (addressId) => {
    if (window.confirm("Jeni i sigurt që dëshironi të fshini këtë adresë?")) {
      setIsLoadingAddresses(true);
      try {
        await customerApi.deleteUserAddress(addressId);
        showNotification("Adresa u fshi me sukses!", "success"); // PERDORE showNotification
        await fetchAddressesCallback(); 
        if (selectedAddressId === addressId.toString()) {
          setSelectedAddressId(''); 
        }
      } catch (error) {
        showNotification(error.message || "Gabim gjatë fshirjes së adresës.", "error"); // PERDORE showNotification
      } finally {
        setIsLoadingAddresses(false);
      }
    }
  };
  
  const handlePlaceOrder = async () => {
    if (!cart || cart.items.length === 0) {
        showNotification("Shporta është bosh.", "error");
        return;
    }
    if (!selectedAddressId) {
      showNotification("Ju lutem zgjidhni ose shtoni një adresë dërgese.", "error");
      return;
    }
    
    const restaurantIdForOrder = cart.restaurant; 
    if (!restaurantIdForOrder) {
        showNotification("Nuk mund të përcaktohej restoranti për porosinë. Provoni të rifreskoni shportën.", "error");
        return;
    }

    setIsPlacingOrder(true);
    try {
      const orderPayload = {
        restaurant_id: parseInt(restaurantIdForOrder),
        delivery_address_id: parseInt(selectedAddressId),
        payment_method: paymentMethod,
        delivery_address_notes: deliveryNotes,
      };

      const newOrder = await customerApi.createOrder(orderPayload);
      showNotification(`Porosia #${newOrder.id} u krijua me sukses!`, "success");
      await fetchCart(); 
      navigate(`/customer/order-confirmation/${newOrder.id}`, { state: { orderDetails: newOrder } });
    } catch (error) {
      console.error("CheckoutPage: Failed to place order:", error);
      showNotification(error.response?.data?.detail || error.message || "Gabim gjatë krijimit të porosisë.", "error");
    } finally {
      setIsPlacingOrder(false); 
    }
  };
  
  if (!isAuthenticated && !isLoadingAddresses && !cart?.items?.length) { 
      // If not authenticated, not loading addresses, and cart is empty, redirect to home or login.
      // This check is to prevent rendering checkout page if user lands here unauthenticated without items.
      return <Navigate to="/login" state={{ from: location }} replace />;
  }


  if (isLoadingAddresses && addresses.length === 0) { // Show loader only if addresses are truly being fetched for the first time or empty
    return (
      <div className="container mx-auto py-10 text-center">
        <svg className="animate-spin h-10 w-10 mx-auto mb-4 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4zm16 0a8 8 0 01-8 8v-8h8z"></path>
        </svg>
        <p className="text-lg font-semibold text-gray-700 dark:text-slate-200">Duke ngarkuar adresat...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-2 sm:px-4 py-6 sm:py-8">
      <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white mb-6 sm:mb-8 text-center">Përfundo Porosinë</h1>
      
      {isPlacingOrder && ( 
        <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl text-center">
            <svg className="h-12 w-12 text-primary-500 animate-spin mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4zm16 0a8 8 0 01-8 8v-8h8z"></path>
            </svg>
            <p className="text-lg font-semibold text-gray-700 dark:text-slate-200">Duke procesuar porosinë...</p>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8">
        <div className="lg:col-span-2 space-y-6">
          <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-4 flex items-center">
              <svg className="h-6 w-6 mr-2 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 14h18M9 10v11M15 10v11" />
              </svg>
              Adresa e Dërgesës
            </h2>
            {isLoadingAddresses && <svg className="h-6 w-6 animate-spin text-primary-500 my-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4zm16 0a8 8 0 01-8 8v-8h8z"></path>
            </svg>}
            {!isLoadingAddresses && addresses.length === 0 && !showAddressFormModal && (
              <p className="text-gray-500 dark:text-slate-400">Nuk keni adresa të ruajtura.</p>
            )}
            {!isLoadingAddresses && addresses.length > 0 && (
              <div className="space-y-3 mb-4">
                {addresses.map((address) => (
                  <AddressCard
                    key={address.id}
                    address={address}
                    isSelected={selectedAddressId === address.id.toString()}
                    onSelect={() => setSelectedAddressId(address.id.toString())}
                    onEdit={handleEditAddress}
                    onDelete={handleDeleteAddress}
                  />
                ))}
              </div>
            )}
            <Button 
                variant={showAddressFormModal ? "danger" : "outline"} 
                size="md" 
                onClick={() => { setShowAddressFormModal(!showAddressFormModal); setEditingAddress(null); }} 
                className="mt-1 w-full sm:w-auto"
                iconLeft={showAddressFormModal ? XMarkIcon : PlusCircleIcon}
                iconLeftClassName="h-5 w-5"
            >
              {showAddressFormModal ? (editingAddress ? 'Anulo Modifikimin' : 'Anulo Shto Adresë') : 'Shto Adresë të Re'}
            </Button>
            <AddressFormModal
                isOpen={showAddressFormModal}
                onClose={() => { setShowAddressFormModal(false); setEditingAddress(null); }}
                onSaveAddress={handleAddressSaveViaModal} 
                existingAddress={editingAddress}
            />
          </div>

          <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-4 flex items-center">
                <svg className="h-6 w-6 mr-2 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v8m4-4H8" />
                </svg>
                Metoda e Pagesës
            </h2>
             <div className="mt-4 space-y-3">
              <div onClick={() => setPaymentMethod('CASH_ON_DELIVERY')}
                className={`p-3 sm:p-4 border rounded-lg cursor-pointer transition-all flex items-center justify-between ${paymentMethod === 'CASH_ON_DELIVERY' ? 'border-primary-500 ring-2 ring-primary-500/70 bg-primary-50 dark:bg-primary-500/10 dark:border-primary-500' : 'border-gray-300 dark:border-slate-600 hover:border-primary-400 dark:hover:border-primary-500/70'}`}>
                <div className="flex items-center">
                  <svg className="h-5 w-5 mr-3 text-gray-500 dark:text-slate-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 14h18M9 10v11M15 10v11" />
                  </svg>
                  <div>
                    <p className="font-semibold text-sm text-gray-800 dark:text-slate-100">Para në Dorë</p>
                    <p className="text-xs text-gray-500 dark:text-slate-400">Paguani kur të merrni porosinë.</p>
                  </div>
                </div>
                   {paymentMethod === 'CASH_ON_DELIVERY' && <svg className="h-6 w-6 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2l4 -4" />
                    </svg>}
              </div>
            </div>
          </div>
          
           <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-4 flex items-center">
                <svg className="h-6 w-6 mr-2 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
                </svg>
                Shënime për Dërgesën (Opsionale)
            </h2>
            <textarea 
                value={deliveryNotes}
                onChange={(e) => setDeliveryNotes(e.target.value)}
                rows="3"
                className="input-form w-full"
                placeholder="P.sh. Lëreni te dera, mos bini ziles, etj."
            />
          </div>

        </div>

        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6 sticky top-24">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-4 flex items-center">
              <svg className="h-6 w-6 mr-2 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 14h18M9 10v11M15 10v11" />
              </svg>
              Përmbledhja e Shportës
            </h2>
            {/* === NDRYSHO KETU === */}
            <OrderSummaryCard 
                cart={cart} 
                deliveryFee={deliveryFee} 
                // getCartItemCount={getCartItemCount} // Pass if needed by OrderSummaryCard
                // getCartTotalAmount={getCartTotalAmount} // Pass if needed by OrderSummaryCard
            />
            <Button 
              onClick={handlePlaceOrder} 
              variant="primary" 
              size="lg" 
              className="mt-6 w-full"
              isLoading={isPlacingOrder || isLoadingAddresses}
              disabled={isPlacingOrder || !selectedAddressId || !cart || cart.items.length === 0 || isLoadingAddresses}
            >
              {isPlacingOrder ? 'Duke Përfunduar...' : `Përfundo Porosinë (${total.toFixed(2)}€)`}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;

// End of File: src/modules/customer/pages/CheckoutPage.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/MyOrdersPage.jsx

// src/modules/customer/pages/MyOrdersPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
import { customerApi } from '../../../api/customerApi.js';
import OrderHistoryItem from '../components/OrderHistoryItem.jsx';
import { ArchiveBoxXMarkIcon, BuildingStorefrontIcon, EyeIcon, ArrowPathIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import Button from '../../../components/Button.jsx';

const MyOrdersPage = () => {
  const { user, token } = useAuth();
  const [orders, setOrders] = useState([]); // Initialize as an empty array
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const fetchOrders = useCallback(async () => {
    if (!user || !token) {
      setIsLoading(false);
      setOrders([]); // Ensure orders is an empty array if no user/token
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const userOrdersData = await customerApi.fetchUserOrders(); // customerApi.fetchUserOrders should return an array
      // Defensively ensure that what we set is an array.
      // customerApi.fetchUserOrders is expected to return response.results || []
      setOrders(Array.isArray(userOrdersData) ? userOrdersData : []);
    } catch (err) {
      console.error("Failed to fetch orders:", err);
      setError(err.message || "Nuk mund të ngarkoheshin porositë tuaja.");
      setOrders([]); // Set to empty array on error
    } finally {
      setIsLoading(false);
    }
  }, [user, token]);

  useEffect(() => {
    fetchOrders();
  }, [fetchOrders]);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary-500"></div>
        <p className="ml-4 text-lg text-gray-700 dark:text-gray-300">Duke ngarkuar porositë...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <div className="p-6 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg shadow-md">
          <ExclamationTriangleIcon className="h-12 w-12 text-red-500 dark:text-red-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-red-700 dark:text-red-300 mb-2">Gabim në Ngarkim</h2>
          <p className="text-red-600 dark:text-red-300">{error}</p>
          <Button onClick={fetchOrders} variant="danger" className="mt-6" iconLeft={ArrowPathIcon} iconLeftClassName="h-5 w-5">
            Provo Përsëri
          </Button>
        </div>
      </div>
    );
  }

  // At this point, isLoading is false, error is null, and orders is guaranteed to be an array.
  if (orders.length === 0) {
    return (
      <div className="text-center py-10">
        <ArchiveBoxXMarkIcon className="h-20 w-20 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
        <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-2">Nuk Ka Porosi</h2>
        <p className="text-gray-500 dark:text-slate-400 mb-6">Ju nuk keni bërë ende asnjë porosi.</p>
        <Button
          onClick={() => navigate('/customer/restaurants')}
          variant="primary"
          iconLeft={BuildingStorefrontIcon} 
          iconLeftClassName="h-5 w-5"
        >
          Shfleto Restorantet
        </Button>
      </div>
    );
  }

  // Orders is an array and has items
  return (
    <div className="container mx-auto py-6 sm:py-8 px-2">
      <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-8 md:mb-10">Porositë e Mia</h1>
      <div className="space-y-5 md:space-y-6">
        {orders.map(order => (
          <OrderHistoryItem key={order.id} order={order} />
        ))}
      </div>
    </div>
  );
};

export default MyOrdersPage;

// End of File: src/modules/customer/pages/MyOrdersPage.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/OrderConfirmationPage.jsx

// src/modules/customer/pages/OrderConfirmationPage.jsx
import React, { useEffect } from 'react';
import { Link, useLocation, Navigate } from 'react-router-dom';
import Button from '../../../components/Button';
import { CheckBadgeIcon, ArchiveBoxIcon, ArrowUturnLeftIcon } from '@heroicons/react/24/outline';
import { useCart } from '../../../context/CartContext';

const OrderConfirmationPage = () => {
  const location = useLocation();
  const { clearCart } = useCart();
  const orderDetails = location.state?.orderDetails;

  useEffect(() => {
    // Clear the cart when the confirmation page is loaded
    // Only if orderDetails are present, indicating a successful order placement
    if (orderDetails) {
      clearCart();
    }
  }, [clearCart, orderDetails]);

  if (!orderDetails) {
    // If there are no order details, redirect to home or orders page
    // This prevents accessing the page directly without placing an order
    return <Navigate to="/customer/my-orders" replace />;
  }

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('sq-AL', {
      year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
    });
  };

  return (
    <div className="container mx-auto py-8 sm:py-12 px-4">
      <div className="max-w-2xl mx-auto bg-white dark:bg-slate-800 shadow-xl rounded-lg p-6 sm:p-8 text-center">
        <CheckBadgeIcon className="h-16 w-16 sm:h-20 sm:w-20 text-green-500 dark:text-green-400 mx-auto mb-4" />
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white mb-3">Porosia u Konfirmua!</h1>
        <p className="text-gray-600 dark:text-slate-300 mb-1">
          Faleminderit për porosinë tuaj. ID e porosisë suaj është: 
          <strong className="text-primary-600 dark:text-primary-400"> #{orderDetails.id}</strong>
        </p>
        <p className="text-sm text-gray-500 dark:text-slate-400 mb-6">
          Ju do të merrni një email konfirmimi së shpejti.
        </p>

        <div className="text-left bg-gray-50 dark:bg-slate-700 p-4 rounded-md mb-6 space-y-2">
          <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-2">Detajet e Porosisë:</h2>
          <p className="text-sm text-gray-600 dark:text-slate-300"><strong>Restoranti:</strong> {orderDetails.restaurant_name || 'N/A'}</p>
          <p className="text-sm text-gray-600 dark:text-slate-300"><strong>Data e Porosisë:</strong> {formatDate(orderDetails.created_at)}</p>
          <p className="text-sm text-gray-600 dark:text-slate-300"><strong>Totali:</strong> {parseFloat(orderDetails.total_price).toFixed(2)} €</p>
          <p className="text-sm text-gray-600 dark:text-slate-300"><strong>Statusi:</strong> {orderDetails.status_display || orderDetails.status || 'Në Pritje'}</p>
          <p className="text-sm text-gray-600 dark:text-slate-300"><strong>Adresa e Dërgesës:</strong> {orderDetails.delivery_address_str || 'N/A'}</p>
        </div>

        <div className="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4">
          <Button 
            onClick={() => navigate('/customer/my-orders')} 
            variant="primary"
            iconLeft={ArchiveBoxIcon}
          >
            Shiko Porositë e Mia
          </Button>
          <Button 
            onClick={() => navigate('/customer/restaurants')} 
            variant="outline"
            iconLeft={ArrowUturnLeftIcon}
          >
            Kthehu te Restorantet
          </Button>
        </div>
      </div>
    </div>
  );
};

export default OrderConfirmationPage;

// End of File: src/modules/customer/pages/OrderConfirmationPage.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/ProfilePage.jsx

// src/modules/customer/pages/ProfilePage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../../context/AuthContext.jsx';
import Button from '../../../components/Button.jsx';
import AddressForm from '../components/AddressForm.jsx';
import { useNotification } from '../../../context/NotificationContext.jsx';
import { UserCircleIcon, KeyIcon, MapPinIcon, PlusCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { customerApi } from '../../../api/customerApi.js';

const ProfilePage = () => {
  const { user, fetchAndSetUser, isLoading: authLoading, error: authError, setError: setAuthError, token } = useAuth();
  const { showSuccess, showError } = useNotification();

  const initialProfileData = { username: '', email: '', first_name: '', last_name: '', phone_number: '', bio: '', profile_picture_url_placeholder: '' };
  const [profileData, setProfileData] = useState(initialProfileData);
  const [passwordData, setPasswordData] = useState({ current_password: '', new_password: '', confirm_password: '' });
  
  const [addresses, setAddresses] = useState([]);
  const [isLoadingAddresses, setIsLoadingAddresses] = useState(false);
  const [showAddressForm, setShowAddressForm] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);

  const [isUpdatingProfile, setIsUpdatingProfile] = useState(false);
  const [isUpdatingPassword, setIsUpdatingPassword] = useState(false);
  const [isDeletingAddress, setIsDeletingAddress] = useState(null); // For loading state on delete button

  useEffect(() => {
    if (user) {
      setProfileData({ 
        username: user.username || '', // Username nuk duhet të jetë i modifikueshëm nga useri zakonisht
        email: user.email || '',       // Email zakonisht nuk modifikohet lehtë
        first_name: user.first_name || '', 
        last_name: user.last_name || '',
        phone_number: user.phone_number || '',
        bio: user.bio || '',
        profile_picture_url_placeholder: user.profile_picture_url_placeholder || '',
      });
      fetchAddresses();
    } else {
      setProfileData(initialProfileData); // Reset nëse useri bën logout
      setAddresses([]);
    }
  }, [user]);

  const fetchAddresses = useCallback(async () => {
    if (!user?.id || !token) return; // Sigurohu që useri dhe tokeni ekzistojnë
    setIsLoadingAddresses(true);
    try {
      const userAddresses = await customerApi.fetchUserAddresses(); // Kjo tani thërret API reale
      setAddresses(userAddresses || []);
    } catch (error) {
      showError(error.message || "Nuk mund të ngarkoheshin adresat.");
    } finally {
      setIsLoadingAddresses(false);
    }
  }, [user?.id, token, showError]); // Shto token si dependencë

  const handleProfileChange = (e) => {
    setProfileData({ ...profileData, [e.target.name]: e.target.value });
  };

  const handleProfileSubmit = async (e) => {
    e.preventDefault();
    setIsUpdatingProfile(true);
    setAuthError(null); // Pastro gabimet e AuthContext
    try {
      // Dërgo vetëm fushat që lejohen të modifikohen
      const dataToUpdate = {
        first_name: profileData.first_name,
        last_name: profileData.last_name,
        phone_number: profileData.phone_number,
        bio: profileData.bio,
        profile_picture_url_placeholder: profileData.profile_picture_url_placeholder,
        // Nuk dërgojmë email ose username për modifikim këtu
      };
      // Supozojmë se UserMeAPIView.update pranon PATCH me këto fusha
      await apiService.request('/auth/me/', { method: 'PATCH', body: JSON.stringify(dataToUpdate) }); // Thirrje direkte me apiService
      await fetchAndSetUser(token); // Rifresko të dhënat e userit në AuthContext
      showSuccess('Profili u përditësua me sukses!');
    } catch (error) {
      showError(error.message || 'Gabim gjatë përditësimit të profilit.');
      setAuthError(error.message || 'Gabim.'); // Vendos gabimin te AuthContext për t'u shfaqur ndoshta
    } finally {
      setIsUpdatingProfile(false);
    }
  };

  const handlePasswordChange = (e) => {
    setPasswordData({ ...passwordData, [e.target.name]: e.target.value });
  };

  const handlePasswordChangeSubmit = async (e) => {
    e.preventDefault();
    if (passwordData.new_password !== passwordData.confirm_password) {
      showError('Fjalëkalimet e reja nuk përputhen.');
      return;
    }
    if (passwordData.new_password.length < 6) {
        showError('Fjalëkalimi i ri duhet të ketë të paktën 6 karaktere.');
        return;
    }
    setIsUpdatingPassword(true);
    setAuthError(null);
    try {
      // Ky endpoint duhet të krijohet në backend, p.sh., /api/auth/change-password/
      await apiService.request('/auth/change-password/', { // KRIJO KËTË ENDPOINT
          method: 'POST', 
          body: JSON.stringify({
              old_password: passwordData.current_password,
              new_password: passwordData.new_password,
          }) 
      });
      showSuccess('Fjalëkalimi u ndryshua me sukses!');
      setPasswordData({ current_password: '', new_password: '', confirm_password: '' });
    } catch (error) {
      showError(error.message || 'Gabim gjatë ndryshimit të fjalëkalimit. Sigurohuni që fjalëkalimi aktual është i saktë.');
      setAuthError(error.message || 'Gabim.');
    } finally {
      setIsUpdatingPassword(false);
    }
  };

  const handleAddressSave = (savedAddress) => {
    fetchAddresses(); 
    setShowAddressForm(false);
    setEditingAddress(null);
  };

  const handleDeleteAddress = async (addressId) => {
    // Mund të shtosh një ConfirmationModal këtu
    setIsDeletingAddress(addressId); // Për loading state
    try {
        await customerApi.deleteUserAddress(addressId);
        setAddresses(prev => prev.filter(addr => addr.id !== addressId));
        showSuccess("Adresa u fshi me sukses!");
    } catch (error) {
        showError(error.message || "Gabim gjatë fshirjes së adresës.");
    } finally {
        setIsDeletingAddress(null);
    }
  };
  
  // Import apiService nëse e përdor direkt
  // Ensure apiService is properly imported if used directly, or remove this placeholder if not.
  // For now, assuming it's needed for handleProfileUpdate and handlePasswordUpdate.
  // If those use a global apiService instance, this local one might be conflicting or unnecessary.
  // const apiService = { request: async (url, options) => { /* ... implementimi yt i apiService ... */ } }; // Placeholder, duhet ta importosh nga /api/apiService.js


  if (authLoading && !user) {
    return <div className="flex justify-center items-center h-64"><div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary-500"></div></div>;
  }
  if (!user) {
    return <div className="text-center py-10 text-gray-600 dark:text-gray-400">Ju lutem kyçuni për të parë profilin tuaj.</div>;
  }

  return (
    <div className="container mx-auto px-2 sm:px-0 py-6 md:py-8">
      <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-8 md:mb-10">Profili Im</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8 items-start">
        <div className="lg:col-span-2 space-y-8">
          <form onSubmit={handleProfileSubmit} className="bg-white dark:bg-slate-800 shadow-xl rounded-xl p-5 sm:p-6 md:p-8">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-5 border-b border-gray-200 dark:border-slate-700 pb-3 flex items-center">
              <UserCircleIcon className="h-6 w-6 mr-2.5 text-primary-500" /> Informacionet Personale
            </h2>
            {authError && <p className="text-sm text-red-500 dark:text-red-400 mb-4 bg-red-50 dark:bg-red-900/30 p-3 rounded-md">{authError}</p>}
            <div className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="first_name" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Emri</label>
                  <input type="text" name="first_name" id="first_name" value={profileData.first_name} onChange={handleProfileChange} required className="input-form mt-1" />
                </div>
                <div>
                  <label htmlFor="last_name" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Mbiemri</label>
                  <input type="text" name="last_name" id="last_name" value={profileData.last_name} onChange={handleProfileChange} required className="input-form mt-1" />
                </div>
              </div>
              <div>
                <label htmlFor="email_display" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Email (Nuk modifikohet)</label>
                <input type="email" name="email_display" id="email_display" value={profileData.email} readOnly disabled className="input-form mt-1 bg-gray-100 dark:bg-slate-700 cursor-not-allowed" />
              </div>
              <div>
                <label htmlFor="phone_number" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Numri i Telefonit</label>
                <input type="tel" name="phone_number" id="phone_number" value={profileData.phone_number} onChange={handleProfileChange} className="input-form mt-1" />
              </div>
              <div>
                <label htmlFor="bio" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Bio</label>
                <textarea name="bio" id="bio" value={profileData.bio} onChange={handleProfileChange} rows="3" className="input-form mt-1"></textarea>
              </div>
              <div>
                <label htmlFor="profile_picture_url_placeholder" className="block text-sm font-medium text-gray-700 dark:text-slate-300">URL e Fotos së Profilit</label>
                <input type="url" name="profile_picture_url_placeholder" id="profile_picture_url_placeholder" value={profileData.profile_picture_url_placeholder} onChange={handleProfileChange} placeholder="https://example.com/profile.jpg" className="input-form mt-1" />
                {profileData.profile_picture_url_placeholder && <img src={profileData.profile_picture_url_placeholder} alt="Profile preview" className="mt-2 h-20 w-20 rounded-full object-cover"/>}
              </div>
              <div className="pt-2 flex justify-end">
                <Button type="submit" variant="primary" isLoading={isUpdatingProfile || authLoading} disabled={isUpdatingProfile || authLoading}> Ruaj Ndryshimet </Button>
              </div>
            </div>
          </form>

          <form onSubmit={handlePasswordChangeSubmit} className="bg-white dark:bg-slate-800 shadow-xl rounded-xl p-5 sm:p-6 md:p-8">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-5 border-b border-gray-200 dark:border-slate-700 pb-3 flex items-center">
              <KeyIcon className="h-6 w-6 mr-2.5 text-primary-500" /> Ndrysho Fjalëkalimin
            </h2>
            <div className="space-y-4">
              <div>
                <label htmlFor="current_password" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Fjalëkalimi Aktual</label>
                <input type="password" name="current_password" id="current_password" value={passwordData.current_password} onChange={handlePasswordChange} required className="input-form mt-1" />
              </div>
              <div>
                <label htmlFor="new_password" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Fjalëkalimi i Ri</label>
                <input type="password" name="new_password" id="new_password" value={passwordData.new_password} onChange={handlePasswordChange} required className="input-form mt-1" />
              </div>
              <div>
                <label htmlFor="confirm_password" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Konfirmo Fjalëkalimin e Ri</label>
                <input type="password" name="confirm_password" id="confirm_password" value={passwordData.confirm_password} onChange={handlePasswordChange} required className="input-form mt-1" />
              </div>
              <div className="pt-2 flex justify-end">
                <Button type="submit" variant="primary" isLoading={isUpdatingPassword || authLoading} disabled={isUpdatingPassword || authLoading}> Ndrysho Fjalëkalimin </Button>
              </div>
            </div>
          </form>
        </div>
        
        <div className="lg:col-span-1 space-y-6">
           <section className="bg-white dark:bg-slate-800 shadow-xl rounded-xl p-5 sm:p-6 md:p-8">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-slate-200 mb-1 flex items-center border-b border-gray-200 dark:border-slate-700 pb-3">
              <MapPinIcon className="h-6 w-6 mr-2.5 text-primary-500" /> Adresat e Mia
            </h2>
            {isLoadingAddresses && <div className="text-center py-4"><div className="animate-spin rounded-full h-6 w-6 border-t-2 border-gray-400 mx-auto"></div></div>}
            {!isLoadingAddresses && addresses.length > 0 && !showAddressForm && (
              <div className="space-y-3 mt-4 max-h-80 overflow-y-auto custom-scrollbar-thin pr-2">
                {addresses.map(addr => (
                  <div key={addr.id} className={`p-3 border rounded-lg ${addr.is_default_shipping ? 'border-primary-400 bg-primary-50 dark:bg-primary-500/10 dark:border-primary-500' : 'border-gray-200 dark:border-slate-600 bg-gray-50 dark:bg-slate-700/40'}`}>
                    <div className="flex justify-between items-start">
                        <div>
                            <p className="font-medium text-sm text-gray-800 dark:text-slate-100">{addr.street}</p>
                            <p className="text-xs text-gray-600 dark:text-slate-300">{addr.city}, {addr.postal_code}, {addr.country}</p>
                        </div>
                         {addr.is_default_shipping && (<span className="text-xs bg-green-100 text-green-700 dark:bg-green-600/30 dark:text-green-200 px-2 py-0.5 rounded-full font-medium">Primare</span>)}
                    </div>
                    <div className="mt-2.5 space-x-2 flex items-center">
                        <Button variant="link" size="xs" className="p-0 text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300" onClick={() => { setEditingAddress(addr); setShowAddressForm(true); }}> Modifiko </Button>
                        <span className="text-gray-300 dark:text-slate-600">|</span>
                        <Button variant="link" size="xs" className="p-0 text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300" onClick={() => handleDeleteAddress(addr.id)} isLoading={isDeletingAddress === addr.id} disabled={isDeletingAddress === addr.id}> Fshij </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
             {!isLoadingAddresses && addresses.length === 0 && !showAddressForm && (<p className="text-sm text-gray-500 dark:text-slate-400 mt-4 py-4 text-center">Nuk keni adresa të ruajtura.</p>)}

            <Button
              variant={showAddressForm ? "danger" : "outline"}
              size="md"
              onClick={() => { setShowAddressForm(prev => !prev); setEditingAddress(null); }}
              className="mt-5 w-full"
              iconLeft={showAddressForm ? XMarkIcon : PlusCircleIcon}
              iconLeftClassName="h-5 w-5"
            >
              {showAddressForm ? (editingAddress ? 'Anulo Modifikimin' : 'Anulo Shto Adresë') : 'Shto Adresë të Re'}
            </Button>

            {showAddressForm && (
              <div className="mt-5 border-t border-gray-200 dark:border-slate-700 pt-5">
                <h3 className="text-md font-medium text-gray-700 dark:text-slate-300 mb-3"> {editingAddress ? 'Modifiko Adresën' : 'Shto Adresë të Re'} </h3>
                <AddressForm existingAddress={editingAddress} onSave={handleAddressSave} onCancel={() => { setShowAddressForm(false); setEditingAddress(null);}} userId={user.id} />
              </div>
            )}
          </section>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;

// End of File: src/modules/customer/pages/ProfilePage.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/RestaurantDetailPage.jsx

// src/modules/customer/pages/RestaurantDetailPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import { customerApi } from '../../../api/customerApi.js';
import { ArrowLeftIcon, MapPinIcon, StarIcon, ClockIcon, CurrencyDollarIcon as CurrencyEuroIcon } from '@heroicons/react/24/outline';
import MenuItemCard from '../components/MenuItemCard.jsx';
import Button from "../../../components/Button.jsx";
import ReviewCard from "../components/ReviewCard.jsx";
import ReviewForm from "../components/ReviewForm.jsx";
import { useAuth } from "../../../context/AuthContext.jsx";
import { useCart } from '../../../context/CartContext.jsx';

const RestaurantDetailPage = () => {
  const { restaurantId } = useParams();
  const [restaurant, setRestaurant] = useState(null);
  const [menuCategories, setMenuCategories] = useState([]);
  const [reviews, setReviews] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showReviewForm, setShowReviewForm] = useState(false);
  const { isAuthenticated, user } = useAuth();
  const { addItemToCart } = useCart();

  const fetchRestaurantData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const [detailsData, menuData, reviewsData] = await Promise.all([
        customerApi.fetchRestaurantById(restaurantId),
        customerApi.fetchMenuCategoriesWithItems(restaurantId),
        customerApi.fetchRestaurantReviews(restaurantId)
      ]);
      setRestaurant(detailsData);
      setMenuCategories(menuData || []);
      setReviews(reviewsData.results || reviewsData || []);
    } catch (err) {
      console.error("Failed to fetch restaurant data:", err.message, err.stack);
      setError(err.message || "Problem në ngarkimin e detajeve të restorantit.");
    } finally {
      setIsLoading(false);
    }
  }, [restaurantId]);

  useEffect(() => {
    fetchRestaurantData();
  }, [fetchRestaurantData]);

  const handleReviewSubmitted = (newReview) => {
    setReviews(prevReviews => [newReview, ...prevReviews]);
    setShowReviewForm(false);
  };
  
  const canLeaveReview = () => {
    if (!isAuthenticated || !user || !restaurant) return false;
    const existingReview = reviews.find(review => review.user === user.id || review.user?.id === user.id);
    if (existingReview) return false;
    return true; 
  };


  if (isLoading) {
    return (
      <div className="flex flex-col justify-center items-center min-h-[calc(100vh-200px)]">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-500 mb-4"></div>
        <p className="text-lg text-gray-600 dark:text-gray-400">Duke ngarkuar detajet e restorantit...</p>
      </div>
    );
  }

  if (error) {
    return <div className="text-center text-red-500 dark:text-red-400 py-10 text-xl bg-red-50 dark:bg-red-900/30 rounded-lg">{error}</div>;
  }

  if (!restaurant) {
    return <div className="text-center text-gray-600 dark:text-slate-300 py-10 text-xl">Restoranti nuk u gjet.</div>;
  }
  
  const displayImage = restaurant.main_image_url || `https://placehold.co/1200x400/FDC830/78350F?text=${encodeURIComponent(restaurant.name)}`;

  return (
    <div className="container mx-auto px-2 sm:px-0 py-2">
      <div className="mb-1">
        <Link to="/customer/restaurants" className="inline-flex items-center text-sm text-primary-600 dark:text-primary-400 hover:underline">
          <ArrowLeftIcon className="h-4 w-4 mr-1.5" /> Kthehu te Lista
        </Link>
      </div>
      <header className="mb-8 relative">
        <div className="h-48 md:h-64 lg:h-80 rounded-xl overflow-hidden shadow-2xl group">
            <img src={displayImage} alt={restaurant.name} className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105" />
            <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent"></div>
        </div>
        <div className="bg-white dark:bg-slate-800 shadow-xl rounded-xl p-5 sm:p-6 md:p-8 md:flex md:items-end md:justify-between -mt-12 md:-mt-16 relative z-10 mx-auto max-w-5xl border border-gray-200 dark:border-slate-700">
            <div>
                <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-1.5">{restaurant.name}</h1>
                <p className="text-xs sm:text-sm text-gray-500 dark:text-slate-400 mb-1">
                    {restaurant.cuisine_types?.map(cat => cat.name).join(' • ') || 'Pa kategori'}
                </p>
                <p className="text-xs sm:text-sm text-gray-600 dark:text-slate-300 flex items-center mb-2 sm:mb-3">
                    <MapPinIcon className="h-4 w-4 mr-1.5 text-gray-400 dark:text-slate-500" /> 
                    {restaurant.address_summary || restaurant.address?.street || 'Adresë e panjohur'}
                </p>
                <div className="flex items-center space-x-3 sm:space-x-4 text-xs sm:text-sm">
                    {restaurant.average_rating && parseFloat(restaurant.average_rating) > 0 && (
                        <div className="flex items-center text-gray-700 dark:text-slate-300">
                            <StarIcon className="h-4 sm:h-5 w-4 sm:w-5 text-yellow-400 mr-1" />
                            <span className="font-semibold">{parseFloat(restaurant.average_rating).toFixed(1)}</span>
                            <span className="ml-1 text-gray-500 dark:text-slate-400">({restaurant.review_count || 0} vlerësime)</span>
                        </div>
                    )}
                    {restaurant.delivery_time_estimate_display && (
                        <div className="flex items-center text-gray-700 dark:text-slate-300">
                            <ClockIcon className="h-4 sm:h-5 w-4 sm:w-5 text-primary-500 dark:text-primary-400 mr-1.5" />
                            <span className="font-medium">{restaurant.delivery_time_estimate_display}</span>
                        </div>
                    )}
                     {restaurant.price_range_display && (
                        <div className="flex items-center text-gray-700 dark:text-slate-300">
                            <CurrencyEuroIcon className="h-4 sm:h-5 w-4 sm:w-5 text-green-500 dark:text-green-400 mr-1.5" />
                            <span className="font-medium">{restaurant.price_range_display}</span>
                        </div>
                    )}
                </div>
            </div>
        </div>
        {restaurant.description && (
            <div className="max-w-3xl mx-auto mt-4 p-4 bg-white dark:bg-slate-800 rounded-lg shadow">
                <h3 className="text-md font-semibold text-gray-700 dark:text-slate-200 mb-1.5">Rreth Restorantit</h3>
                <p className="text-sm text-gray-600 dark:text-slate-300 leading-relaxed">{restaurant.description}</p>
            </div>
        )}
      </header>
      
      {/* Menu Section */}
      <section className="mb-6 sm:mb-8">
        <h2 className="text-xl sm:text-2xl font-semibold text-gray-700 dark:text-slate-200 mb-4">Menuja</h2>
        {menuCategories && menuCategories.length > 0 ? (
          menuCategories.map(category => (
            <div key={category.id} className="mb-6">
              <h3 className="text-lg sm:text-xl font-semibold text-gray-600 dark:text-slate-300 mb-3 border-b pb-1 dark:border-slate-700">{category.name}</h3>
              {category.menu_items && category.menu_items.filter(item => item.is_available).length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {category.menu_items.filter(item => item.is_available).map(item => (
                    <MenuItemCard key={item.id} item={item} onAddToCart={() => addItemToCart(item, 1, restaurant.id)} />
                  ))}
                </div>
              ) : (
                <p className="text-sm text-gray-500 dark:text-slate-400">Nuk ka artikuj të disponueshëm në këtë kategori.</p>
              )}
            </div>
          ))
        ) : (
          <p className="text-gray-600 dark:text-slate-400">Menuja për këtë restorant nuk është e disponueshme ende.</p>
        )}
      </section>

      {/* Reviews Section */}
      <section>
        <h2 className="text-xl sm:text-2xl font-semibold text-gray-700 dark:text-slate-200 mb-4">Vlerësimet e Klientëve</h2>
        {isAuthenticated && canLeaveReview() && !showReviewForm && (
          <div className="mb-4">
            <Button onClick={() => setShowReviewForm(true)} variant="primary">
              Lini një Vlerësim
            </Button>
          </div>
        )}
        {showReviewForm && (
          <ReviewForm 
            restaurantId={restaurantId} 
            onReviewSubmitted={handleReviewSubmitted}
            onCancel={() => setShowReviewForm(false)} 
          />
        )}
        {reviews && reviews.length > 0 ? (
          <div className="space-y-4">
            {reviews.map(review => (
              <ReviewCard key={review.id} review={review} />
            ))}
          </div>
        ) : (
          <p className="text-gray-600 dark:text-slate-400">Nuk ka ende vlerësime për këtë restorant.</p>
        )}
      </section>
    </div>
  );
};
export default RestaurantDetailPage;

// End of File: src/modules/customer/pages/RestaurantDetailPage.jsx
//--------------------------------------------------

// File: src/modules/customer/pages/RestaurantListPage.jsx

// src/modules/customer/pages/RestaurantListPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { customerApi } from '../../../api/customerApi'; 
import RestaurantCard from '../components/RestaurantCard'; 
import Button from '../../../components/Button'; 
import { MagnifyingGlassIcon, XCircleIcon, FaceFrownIcon } from '@heroicons/react/24/outline';
import { useNotification } from '../../../context/NotificationContext.jsx';

const RestaurantListPage = () => {
  const [restaurants, setRestaurants] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [allCategories, setAllCategories] = useState([]);
  const [activeFilters, setActiveFilters] = useState({ category: '', rating: 0 });
  const [visibleCount, setVisibleCount] = useState(12); // Initial number of restaurants to show
  const { showSuccess, showError } = useNotification(); // Assuming you might use notifications

  useEffect(() => {
    console.log("RestaurantListPage - Restaurants:", restaurants);
    console.log("RestaurantListPage - IsLoading:", isLoading);
    console.log("RestaurantListPage - Error:", error);
  }, [restaurants, isLoading, error]);

  const fetchRestaurantsAndCategories = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await customerApi.fetchActiveRestaurants(); 
      setRestaurants(data.results || data || []); 
      const categories = new Set();
      (data.results || data || []).forEach(r => r.cuisine_types?.forEach(cat => categories.add(cat.name)));
      setAllCategories(Array.from(categories).sort());
    } catch (err) {
      setError(err.message || "Problem në ngarkimin e restoranteve.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => { fetchRestaurantsAndCategories(); }, [fetchRestaurantsAndCategories]);

  const handleSearchChange = (e) => setSearchTerm(e.target.value);
  const handleFilterChange = (filterName, value) => {
    setVisibleCount(8); 
    setActiveFilters(prev => ({ ...prev, [filterName]: value }));
  }
  const handleClearFilters = () => {
    setActiveFilters({ category: '', rating: 0 });
    setSearchTerm('');
    setVisibleCount(8);
  };
  const showMoreRestaurants = () => setVisibleCount(prev => prev + 8);

  const filteredRestaurants = restaurants.filter(restaurant => {
    const searchTermLower = searchTerm.toLowerCase(); // DEFINOHET KËTU

    let matchesSearch = true; 
    if (searchTerm) {
        matchesSearch = (
            (restaurant.name && restaurant.name.toLowerCase().includes(searchTermLower)) ||
            (restaurant.address_summary && restaurant.address_summary.toLowerCase().includes(searchTermLower)) ||
            (restaurant.cuisine_types && restaurant.cuisine_types.some(cat => cat.name.toLowerCase().includes(searchTermLower)))
        );
    }
    
    const categoryFilterMatch = activeFilters.category 
        ? (restaurant.cuisine_types && restaurant.cuisine_types.some(cat => cat.name === activeFilters.category)) 
        : true;
    
    const ratingFilterMatch = activeFilters.rating > 0 
        ? ((parseFloat(restaurant.average_rating) || 0) >= activeFilters.rating) 
        : true;

    return matchesSearch && categoryFilterMatch && ratingFilterMatch;
  });
  
  if (isLoading && restaurants.length === 0) {
    return (
      <div className="flex flex-col justify-center items-center min-h-[calc(100vh-300px)]">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-500 mb-4"></div>
        <p className="text-lg text-gray-600 dark:text-gray-400">Duke ngarkuar restorantet...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-2 sm:px-0 py-2">
      <section className="mb-8 text-center bg-gradient-to-br from-primary-500 via-primary-600 to-secondary-600 dark:from-slate-800 dark:to-slate-900 py-10 sm:py-16 px-4 sm:px-6 rounded-xl shadow-2xl">
        <h1 className="text-3xl sm:text-4xl md:text-5xl font-extrabold text-white mb-3 sm:mb-4 leading-tight">
          Gjeni Ushqimin Tuaj <span className="text-yellow-300">Perfekt</span>
        </h1>
        <p className="text-md sm:text-lg text-primary-100 dark:text-slate-300 mb-6 sm:mb-8 max-w-2xl mx-auto">
          Eksploroni një larmi restorantesh dhe kuzhinash. Porositni lehtë dhe shijoni!
        </p>
        <div className="max-w-xl mx-auto relative">
          <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
            <MagnifyingGlassIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
          </div>
          <input type="search" placeholder="Kërko restorant, kuzhinë..." value={searchTerm} onChange={handleSearchChange}
            className="w-full py-3 px-4 pl-12 text-gray-700 dark:text-slate-200 bg-white dark:bg-slate-700 border-2 border-transparent focus:border-yellow-400 dark:focus:border-yellow-500 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-yellow-300 dark:focus:ring-yellow-600 transition-colors"
          />
        </div>
      </section>
      
      <section className="mb-6 p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md sticky top-16 z-20 print:hidden">
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4 items-end">
            <div>
                <label htmlFor="categoryFilter" className="block text-xs font-medium text-gray-600 dark:text-slate-400 mb-1">Kategoria:</label>
                <select id="categoryFilter" name="category" value={activeFilters.category} onChange={(e) => handleFilterChange('category', e.target.value)}
                    className="w-full input-form py-2 text-sm">
                    <option value="">Të gjitha</option>
                    {allCategories.map(catName => <option key={catName} value={catName}>{catName}</option>)}
                </select>
            </div>
             <div>
                <label htmlFor="ratingFilter" className="block text-xs font-medium text-gray-600 dark:text-slate-400 mb-1">Vlerësimi Min:</label>
                <select id="ratingFilter" name="rating" value={activeFilters.rating} onChange={(e) => handleFilterChange('rating', parseInt(e.target.value))}
                    className="w-full input-form py-2 text-sm">
                    <option value="0">Çdo Vlerësim</option> <option value="5">5 ★</option> <option value="4">4+ ★</option> <option value="3">3+ ★</option>
                </select>
            </div>
            <div className="col-span-1 sm:col-span-2 md:col-span-1">
                <Button onClick={handleClearFilters} variant="ghost" size="md" fullWidth className="text-sm text-gray-600 dark:text-slate-300 hover:bg-gray-200 dark:hover:bg-slate-700">
                    <XCircleIcon className="h-4 w-4 mr-1.5"/>Pastro Filtrat
                </Button>
            </div>
            <div className="md:col-span-1 text-right text-xs text-gray-500 dark:text-slate-400 self-center hidden md:block">
                 {isLoading ? 'Duke kërkuar...' : `${filteredRestaurants.length} restorante u gjetën`}
            </div>
          </div>
      </section>

      {isLoading && restaurants.length > 0 && (
          <div className="text-center py-4 text-sm text-gray-500 dark:text-slate-400">Duke rifreskuar listën...</div>
      )}

      {error && <div className="text-center text-red-500 dark:text-red-400 py-10 text-xl px-4 bg-red-50 dark:bg-red-900/30 rounded-lg">{error}</div>}

      {!isLoading && !error && filteredRestaurants.length > 0 ? (
        <>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 md:gap-6">
            {filteredRestaurants.slice(0, visibleCount).map(restaurant => (
              <RestaurantCard key={restaurant.id} restaurant={restaurant} />
            ))}
          </div>
          {visibleCount < filteredRestaurants.length && (
            <div className="mt-10 text-center">
              <Button variant="primary" size="lg" onClick={showMoreRestaurants} isLoading={isLoading}>
                Shfaq Më Shumë ({filteredRestaurants.length - visibleCount} mbetur)
              </Button>
            </div>
          )}
        </>
      ) : (
        !isLoading && !error && <div className="text-center py-12 min-h-[200px] flex flex-col justify-center items-center bg-white dark:bg-slate-800 rounded-lg shadow">
            <FaceFrownIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
            <p className="text-xl text-gray-600 dark:text-slate-300"> Asnjë restorant nuk përputhet me kërkimin. </p>
            <p className="text-sm text-gray-500 dark:text-slate-400 mt-2">Provoni të ndryshoni filtrat ose termin e kërkimit.</p>
        </div>
      )}
    </div>
  );
};

export default RestaurantListPage;

// End of File: src/modules/customer/pages/RestaurantListPage.jsx
//--------------------------------------------------

// File: src/modules/customer/routes.jsx

// src/modules/customer/routes.jsx
import React from 'react';
// import { Routes, Route, Navigate } from 'react-router-dom'; // Për module të veçanta
import { Route } from 'react-router-dom'; // Për array

// Faqet e Customer
import RestaurantListPage from './pages/RestaurantListPage.jsx';
import RestaurantDetailPage from './pages/RestaurantDetailPage.jsx';
import CartPage from './pages/CartPage.jsx';
import CheckoutPage from './pages/CheckoutPage.jsx';
import OrderConfirmationPage from './pages/OrderConfirmationPage.jsx';
import MyOrdersPage from './pages/MyOrdersPage.jsx';
import ProfilePage from './pages/ProfilePage.jsx'; // ProfilePage mund të jetë i përbashkët

// CustomerLayout dhe ProtectedRoute aplikohen nga AppRoutes.jsx

const CustomerRoutesArray = [
    // Rruga default për /customer/ do të jetë lista e restoranteve
    <Route key="customer-index" index element={<RestaurantListPage />} />,
    <Route key="customer-restaurants" path="restaurants" element={<RestaurantListPage />} />,
    <Route key="customer-restaurant-detail" path="restaurants/:restaurantId" element={<RestaurantDetailPage />} />,
    <Route key="customer-cart" path="cart" element={<CartPage />} />, // ProtectedRoute aplikohet te AppRoutes
    <Route key="customer-checkout" path="checkout" element={<CheckoutPage />} />, // ProtectedRoute aplikohet
    <Route key="customer-order-confirmation" path="order-confirmation/:orderId" element={<OrderConfirmationPage />} />, // ProtectedRoute aplikohet
    <Route key="customer-my-orders" path="my-orders" element={<MyOrdersPage />} />, // ProtectedRoute aplikohet
    <Route key="customer-profile" path="profile" element={<ProfilePage />} /> // ProtectedRoute aplikohet
];

export default CustomerRoutesArray;

// End of File: src/modules/customer/routes.jsx
//--------------------------------------------------

// File: src/modules/driver/components/ActiveDeliverySection.jsx

import React, { useState, useEffect, useCallback } from 'react';
import { apiService } from '../../../api/apiService';
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext'; // Ensure this path is correct
import Button from '../../../components/Button';
// ... other imports

const ActiveDeliverySection = () => {
  // ... other state variables
  const { user } = useAuth();
  // const { showError, showSuccess } = useNotification(); // LIKELY PROBLEMATIC LINE (around line 24)
  const notification = useNotification(); // CORRECTED: Get the whole notification object

  // ... rest of your component logic

  const handleError = (message) => {
    if (notification && typeof notification.showError === 'function') {
      notification.showError(message);
    } else {
      console.warn('[ActiveDeliverySection] showError function is not available from NotificationContext. Error:', message);
      // Fallback, e.g., alert(message);
    }
  };

  const handleSuccess = (message) => {
    if (notification && typeof notification.showSuccess === 'function') {
      notification.showSuccess(message);
    } else {
      console.warn('[ActiveDeliverySection] showSuccess function is not available from NotificationContext. Success:', message);
    }
  };
  
  // Example of how you might use it in a function:
  const updateDeliveryStatus = async (deliveryId, status) => {
    try {
      // ... your API call
      // await apiService.request(...);
      handleSuccess(`Delivery status updated to ${status}.`);
    } catch (error) {
      console.error('Failed to update delivery status:', error);
      handleError(error.message || 'Failed to update delivery status.');
    }
  };

  // ... existing code ...
  // Make sure any direct calls to showError or showSuccess are replaced
  // For example, if you had:
  // showError("Some error");
  // It should become:
  // if (notification && typeof notification.showError === 'function') {
  //   notification.showError("Some error");
  // } else {
  //   console.warn('[ActiveDeliverySection] showError function is not available.');
  // }
  // ... existing code ...

  return (
    <div>
      {/* Your JSX for displaying active deliveries */}
      <p>Active Deliveries Section</p>
      {/* Example button that might trigger a notification */}
      {/* <Button onClick={() => updateDeliveryStatus(1, 'COMPLETED')}>Test Update Status</Button> */}
    </div>
  );
};

export default ActiveDeliverySection;


// End of File: src/modules/driver/components/ActiveDeliverySection.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/MenuCategoryCard.jsx

// filepath: frontend/src/modules/restaurant/components/MenuCategoryCard.jsx
import React from 'react';
import Button from '../../../components/Button';
import { PencilIcon, TrashIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';

const MenuCategoryCard = ({ category, onEdit, onDelete, onToggleVisibility, onViewItems, isVisible = true }) => {
  return (
    <div className="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-4 hover:shadow-xl transition-shadow duration-200">
      <div className="flex justify-between items-start mb-2">
        <div>
          <h3 className="text-lg font-semibold text-primary-700 dark:text-primary-400">{category.name}</h3>
          {category.description && (
            <p className="text-xs text-gray-500 dark:text-slate-400 mt-1 pr-2">{category.description}</p>
          )}
        </div>
        <div className="flex-shrink-0 flex items-center space-x-1.5">
          {onToggleVisibility && (
            <Button 
              size="icon" 
              variant="ghost" 
              onClick={() => onToggleVisibility(category.id, !isVisible)} 
              title={isVisible ? "Fshih Kategorinë" : "Shfaq Kategorinë"}
              className="p-1.5 text-gray-500 hover:text-gray-700 dark:text-slate-400 dark:hover:text-slate-200"
            >
              {isVisible ? <EyeIcon className="h-4 w-4" /> : <EyeSlashIcon className="h-4 w-4" />}
            </Button>
          )}
          {onEdit && (
            <Button 
              size="icon" 
              variant="ghost" 
              onClick={() => onEdit(category)} 
              title="Modifiko Kategorinë"
              className="p-1.5 text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
            >
              <PencilIcon className="h-4 w-4" />
            </Button>
          )}
          {onDelete && (
            <Button 
              size="icon" 
              variant="ghost" 
              onClick={() => onDelete(category.id)} 
              title="Fshij Kategorinë"
              className="p-1.5 text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
            >
              <TrashIcon className="h-4 w-4" />
            </Button>
          )}
        </div>
      </div>
      
      {category.item_count !== undefined && (
        <p className="text-sm text-gray-600 dark:text-slate-300 mb-3">
          {category.item_count} artikuj në menu
        </p>
      )}

      {onViewItems && (
        <Button onClick={() => onViewItems(category)} variant="outline" size="sm" fullWidth>
          Shiko Artikujt
        </Button>
      )}
    </div>
  );
};

export default MenuCategoryCard;

// End of File: src/modules/restaurant/components/MenuCategoryCard.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/MenuCategoryFormModal.jsx

// src/modules/restaurant/components/MenuCategoryFormModal.jsx
import React, { useState, useEffect, useContext } from 'react';
import { XCircle, Loader2 } from 'lucide-react';
import { useAuth } from '../../../context/AuthContext.jsx'; // Adjust the import path as necessary

const MenuCategoryFormModal = ({ isOpen, onClose, onSave, categoryToEdit, isLoading }) => {
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const { currentRestaurant } = useAuth();

    useEffect(() => {
        if (isOpen) { // Reset form when modal becomes visible or categoryToEdit changes
            if (categoryToEdit) {
                setName(categoryToEdit.name || '');
                setDescription(categoryToEdit.description || '');
            } else {
                setName('');
                setDescription('');
            }
        }
    }, [categoryToEdit, isOpen]);

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!name.trim()) {
            alert("Category name cannot be empty."); // Simple validation
            return;
        }
        onSave({
            id: categoryToEdit?.id,
            name,
            description,
            restaurant: currentRestaurant?.id, // Ensure restaurant ID is passed
            order: categoryToEdit?.order || 0 
        });
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50"> {/* Increased z-index */}
            <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-md">
                <div className="flex justify-between items-center mb-6">
                    <h3 className="text-xl font-semibold text-gray-800">{categoryToEdit ? 'Edit' : 'Create New'} Menu Category</h3>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600"><XCircle size={24} /></button>
                </div>
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <label htmlFor="catFormName" className="block text-sm font-medium text-gray-700 mb-1">Category Name <span className="text-red-500">*</span></label>
                        <input type="text" id="catFormName" value={name} onChange={(e) => setName(e.target.value)} required className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                    </div>
                    <div>
                        <label htmlFor="catFormDesc" className="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                        <textarea id="catFormDesc" value={description} onChange={(e) => setDescription(e.target.value)} rows="3" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>
                    <div className="flex justify-end space-x-3 pt-2">
                        <button type="button" onClick={onClose} disabled={isLoading} className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg disabled:opacity-50">Cancel</button>
                        <button type="submit" disabled={isLoading} className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg disabled:opacity-50 flex items-center">
                            {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                            {categoryToEdit ? 'Save Changes' : 'Create Category'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};
export default MenuCategoryFormModal;

// End of File: src/modules/restaurant/components/MenuCategoryFormModal.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/MenuItemCard.jsx

import React from 'react';
import Button from '../../../components/Button';
// import HeroIcon from '../../../components/HeroIcon'; // Remove this
import { PencilIcon, TrashIcon, EyeIcon, EyeSlashIcon, PlusCircleIcon, InformationCircleIcon } from '@heroicons/react/24/outline';

const MenuItemCard = ({ item, onEdit, onDelete, onToggleAvailability, onAddToCart, isRestaurantView = false }) => {
  const displayImage = item.image_url || `https://placehold.co/300x200/FDC830/78350F?text=${encodeURIComponent(item.name)}`;
  
  return (
    <div className={`bg-white dark:bg-slate-800 shadow-lg rounded-lg overflow-hidden flex flex-col group transition-all duration-300 hover:shadow-xl ${!item.is_available && !isRestaurantView ? 'opacity-60' : ''}`}>
      <div className="relative h-40 sm:h-48 overflow-hidden">
        <img 
          src={displayImage}
          alt={item.name} 
          className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
        />
        {!item.is_available && (
          <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
            <span className="text-white text-sm font-semibold px-2 py-1 bg-red-600 rounded">
              {isRestaurantView ? 'Jo Aktiv' : 'I Padisponueshëm'}
            </span>
          </div>
        )}
      </div>
      
      <div className="p-4 flex flex-col flex-grow">
        <h3 className="text-md sm:text-lg font-semibold text-gray-800 dark:text-white mb-1 truncate" title={item.name}>
          {item.name}
        </h3>
        {item.description && (
          <p className="text-xs sm:text-sm text-gray-500 dark:text-slate-400 mb-2 line-clamp-2" title={item.description}>
            {item.description}
          </p>
        )}
        
        <div className="mt-auto"> {/* Pushes price and actions to the bottom */}
          <p className="text-lg sm:text-xl font-bold text-primary-600 dark:text-primary-400 mb-3">
            {parseFloat(item.price).toFixed(2)} €
          </p>

          {isRestaurantView ? (
            <div className="flex flex-col sm:flex-row gap-2">
              <Button onClick={() => onEdit(item)} variant="outline" size="sm" iconLeft={PencilIcon} fullWidth className="text-xs">
                Modifiko
              </Button>
              <div className="flex gap-2">
                <Button 
                  onClick={() => onToggleAvailability(item.id, !item.is_available)} 
                  variant="ghost" 
                  size="icon" 
                  title={item.is_available ? "Bëje jo të disponueshëm" : "Bëje të disponueshëm"}
                  className="p-2"
                >
                  {item.is_available ? <EyeIcon className="h-4 w-4" /> : <EyeSlashIcon className="h-4 w-4" />}
                </Button>
                <Button 
                  onClick={() => onDelete(item.id)} 
                  variant="ghost" 
                  size="icon" 
                  title="Fshij Artikullin"
                  className="text-red-500 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-500/10 p-2"
                >
                  <TrashIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ) : (
            item.is_available ? (
              <Button onClick={() => onAddToCart(item)} variant="primary" fullWidth iconLeft={PlusCircleIcon}>
                Shto në Shportë
              </Button>
            ) : (
              <Button variant="secondary" fullWidth disabled iconLeft={InformationCircleIcon}>
                I Padisponueshëm
              </Button>
            )
          )}
        </div>
      </div>
    </div>
  );
};

export default MenuItemCard;


// End of File: src/modules/restaurant/components/MenuItemCard.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/MenuItemFormModal.jsx

// src/modules/restaurant/components/MenuItemFormModal.jsx
import React, { useState, useEffect, useContext } from 'react';
import { XCircle, Loader2 } from 'lucide-react';
import { useAuth } from '../../../context/AuthContext.jsx'; // Adjust the import path as necessary

const MenuItemFormModal = ({ isOpen, onClose, onSave, itemToEdit, categories = [], isLoading }) => {
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const [price, setPrice] = useState('');
    const [categoryId, setCategoryId] = useState('');
    const [isAvailable, setIsAvailable] = useState(true);
    const [image, setImage] = useState('');
    const { currentRestaurant } = useAuth();

    useEffect(() => {
        if (isOpen) { // Reset form when modal opens
            if (itemToEdit) {
                setName(itemToEdit.name || '');
                setDescription(itemToEdit.description || '');
                setPrice(itemToEdit.price || '');
                // Ensure categoryId from itemToEdit is a string for select value comparison if category IDs are strings
                setCategoryId(itemToEdit.categoryId?.toString() || itemToEdit.category?.id?.toString() || (categories.length > 0 ? categories[0].id.toString() : ''));
                setIsAvailable(itemToEdit.is_available !== undefined ? itemToEdit.is_available : true);
                setImage(itemToEdit.image || '');
            } else {
                setName('');
                setDescription('');
                setPrice('');
                setCategoryId(categories.length > 0 ? categories[0].id.toString() : '');
                setIsAvailable(true);
                setImage('');
            }
        }
    }, [itemToEdit, isOpen, categories]);

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!name.trim() || !price.trim() || !categoryId) {
            alert("Name, price, and category are required."); // Simple validation
            return;
        }
        // Find the default menuId for the current restaurant.
        // Your backend `MenuItem` model needs a `menu` ForeignKey.
        // Your backend API for creating MenuItem needs to accept `menu` (ID of a Menu instance).
        // This implies that for a restaurant, you first need to ensure at least one Menu exists.
        // For now, we'll pass a placeholder or rely on backend to assign to a default.
        const menuId = currentRestaurant?.defaultMenuId || 'UNKNOWN_MENU_ID'; // From AuthContext or fetched

        onSave({
            id: itemToEdit?.id,
            name,
            description,
            price: parseFloat(price).toFixed(2),
            category: categoryId, // Send category ID
            is_available: isAvailable,
            image,
            menu: menuId, // Send the menu ID
            // restaurant field will be inferred by backend based on the menu or explicitly passed if your API needs it.
        });
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50"> {/* Increased z-index */}
            <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-lg max-h-[90vh] flex flex-col">
                 <div className="flex justify-between items-center mb-6 pb-4 border-b">
                    <h3 className="text-xl font-semibold text-gray-800">{itemToEdit ? 'Edit' : 'Create New'} Menu Item</h3>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600"><XCircle size={24} /></button>
                </div>
                <form id="menuItemFormInner" onSubmit={handleSubmit} className="space-y-4 overflow-y-auto pr-1 flex-grow"> {/* Added id for submit button */}
                    <div>
                        <label htmlFor="itemFormName" className="block text-sm font-medium text-gray-700 mb-1">Item Name <span className="text-red-500">*</span></label>
                        <input type="text" id="itemFormName" value={name} onChange={(e) => setName(e.target.value)} required className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                    </div>
                     <div>
                        <label htmlFor="itemFormCategory" className="block text-sm font-medium text-gray-700 mb-1">Category <span className="text-red-500">*</span></label>
                        <select id="itemFormCategory" value={categoryId} onChange={(e) => setCategoryId(e.target.value)} required 
                                className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white">
                            <option value="" disabled>Select a category</option>
                            {(categories || []).map(cat => (
                                <option key={cat.id} value={cat.id.toString()}>{cat.name}</option>
                            ))}
                        </select>
                    </div>
                    <div>
                        <label htmlFor="itemFormPrice" className="block text-sm font-medium text-gray-700 mb-1">Price (€) <span className="text-red-500">*</span></label>
                        <input type="number" id="itemFormPrice" value={price} onChange={(e) => setPrice(e.target.value)} required step="0.01" min="0" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                    </div>
                    <div>
                        <label htmlFor="itemFormDesc" className="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                        <textarea id="itemFormDesc" value={description} onChange={(e) => setDescription(e.target.value)} rows="3" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>
                    <div>
                        <label htmlFor="itemFormImage" className="block text-sm font-medium text-gray-700 mb-1">Image URL (Optional)</label>
                        <input type="url" id="itemFormImage" value={image} onChange={(e) => setImage(e.target.value)} placeholder="https://example.com/image.jpg" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                    </div>
                    <div className="flex items-center pt-1">
                        <input type="checkbox" id="itemFormAvailable" checked={isAvailable} onChange={(e) => setIsAvailable(e.target.checked)} className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"/>
                        <label htmlFor="itemFormAvailable" className="ml-2 text-sm font-medium text-gray-700">Available for ordering</label>
                    </div>
                </form>
                 <div className="flex justify-end space-x-3 pt-6 border-t mt-auto">
                    <button type="button" onClick={onClose} disabled={isLoading} className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg disabled:opacity-50">Cancel</button>
                    <button 
                        type="submit" 
                        form="menuItemFormInner" // Associate with the form
                        disabled={isLoading || !categoryId} 
                        className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                    >
                        {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                        {itemToEdit ? 'Save Changes' : 'Create Item'}
                    </button>
                </div>
            </div>
        </div>
    );
};
export default MenuItemFormModal;

// End of File: src/modules/restaurant/components/MenuItemFormModal.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/MenuItemTableRow.jsx

// src/modules/restaurant/components/MenuItemTableRow.jsx
import React from 'react';
import { Edit3, Trash2, ToggleLeft, ToggleRight } from 'lucide-react';

const MenuItemTableRow = ({ item, categoryName, onEdit, onDelete, onToggleAvailability }) => {
    return (
        <tr className="bg-white border-b hover:bg-gray-50 transition-colors">
            <td className="px-6 py-3">
                <div className="flex items-center space-x-3">
                    <img 
                        src={item.image || `https://placehold.co/60x60/eee/ccc?text=${item.name?.substring(0,1) || 'I'}`} 
                        alt={item.name} 
                        className="w-10 h-10 rounded-md object-cover"
                        onError={(e) => e.target.src = 'https://placehold.co/60x60/eee/ccc?text=Img'}
                    />
                    <div>
                        <p className="font-medium text-gray-900 text-sm">{item.name}</p>
                        {item.description && <p className="text-xs text-gray-500 truncate max-w-xs">{item.description}</p>}
                    </div>
                </div>
            </td>
            <td className="px-6 py-3 text-sm text-gray-600">{categoryName || 'Uncategorized'}</td>
            <td className="px-6 py-3 text-sm font-medium text-gray-700">€{parseFloat(item.price || 0).toFixed(2)}</td>
            <td className="px-6 py-3 text-center">
                <button 
                    onClick={() => onToggleAvailability(item)} 
                    className={`p-1.5 rounded-full transition-colors ${item.is_available ? 'bg-green-100 hover:bg-green-200 text-green-700' : 'bg-red-100 hover:bg-red-200 text-red-700'}`}
                    aria-label={item.is_available ? `Deactivate ${item.name}` : `Activate ${item.name}`}
                >
                    {item.is_available ? <ToggleRight size={20} /> : <ToggleLeft size={20} />}
                </button>
            </td>
            <td className="px-6 py-3 text-center">
                <div className="flex items-center justify-center space-x-1">
                    <button onClick={() => onEdit(item)} className="p-1.5 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md" aria-label={`Edit ${item.name}`}>
                        <Edit3 size={16} />
                    </button>
                    <button onClick={() => onDelete(item)} className="p-1.5 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md" aria-label={`Delete ${item.name}`}>
                        <Trash2 size={16} />
                    </button>
                </div>
            </td>
        </tr>
    );
};
export default MenuItemTableRow;

// End of File: src/modules/restaurant/components/MenuItemTableRow.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/OrderDetailModal.jsx

// src/modules/restaurant/components/OrderDetailModal.jsx
import React, { useState, useContext } from 'react';
import { XCircle, Loader2, Edit } from 'lucide-react';
import { useNotification } from '../../../context/NotificationContext.jsx'; // Path to NotificationContext

const OrderDetailModal = ({ order, onClose, onUpdateStatus }) => {
  const [newStatus, setNewStatus] = useState(order.status);
  const [isUpdating, setIsUpdating] = useState(false);
  // Statuses a restaurant owner can typically set from their panel
  const statusOptions = ["CONFIRMED", "PREPARING", "READY_FOR_PICKUP", "CANCELLED_BY_RESTAURANT"];
  const { showNotification } = useNotification();

  const handleStatusChangeSubmit = async () => {
    setIsUpdating(true);
    try { 
      await onUpdateStatus(order.id, newStatus); 
      // Notification and closing is handled by ManageOrdersPage after successful onUpdateStatus
    } 
    catch (error) { 
      showNotification(error.message || "Failed to update status in modal.", "error"); 
    } 
    finally { setIsUpdating(false); }
  };
  
  const formattedDate = order.created_at ? new Date(order.created_at).toLocaleString('en-GB', { day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', second:'2-digit' }) : 'N/A';

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-40 transition-opacity duration-300 ease-in-out">
      <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-xl max-h-[90vh] flex flex-col">
        <div className="flex justify-between items-center mb-6 pb-4 border-b"> 
          <h2 className="text-2xl font-semibold text-gray-800">Order Details: <span className="text-blue-600">{order.id}</span></h2> 
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600 transition-colors"> <XCircle size={28} /> </button> 
        </div>

        <div className="overflow-y-auto pr-2 space-y-4 mb-6 flex-grow">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div><p className="font-medium text-gray-500">Customer:</p> <p className="text-gray-800">{order.user_details?.username || 'N/A'}</p></div>
            <div><p className="font-medium text-gray-500">Order Date:</p> <p className="text-gray-800">{formattedDate}</p></div>
            <div><p className="font-medium text-gray-500">Total Amount:</p> <p className="text-gray-800 font-semibold">€{parseFloat(order.total_amount || 0).toFixed(2)}</p></div>
            <div><p className="font-medium text-gray-500">Current Status:</p> <p className={`font-semibold ${(order.status?.toUpperCase() || '') === 'PENDING' ? 'text-yellow-600' : (order.status?.toUpperCase() || '') === 'DELIVERED' ? 'text-green-600' : 'text-blue-600'}`}>{order.status?.replace('_', ' ').toUpperCase() || 'N/A'}</p></div>
          </div>

          {(order.delivery_address_street || order.delivery_address_city) && ( 
            <div className="mt-3"> 
              <p className="font-medium text-gray-500 text-sm">Delivery Address:</p> 
              <p className="text-gray-800 text-sm">{order.delivery_address_street}, {order.delivery_address_city}</p> 
              {order.delivery_instructions && <p className="text-xs text-gray-500 mt-0.5">Instructions: {order.delivery_instructions}</p>} 
            </div> 
          )}
          
          <div className="mt-3"> 
            <h3 className="text-md font-semibold text-gray-700 mb-2">Items Ordered:</h3> 
            <ul className="space-y-2 text-sm border p-3 rounded-md bg-gray-50 max-h-48 overflow-y-auto"> 
              {order.items && order.items.length > 0 ? order.items.map(item => ( 
                <li key={item.id} className="flex justify-between items-center py-1 border-b border-gray-200 last:border-b-0"> 
                  <span>{item.quantity} x {item.menu_item_details?.name || 'Unknown Item'}</span> 
                  <span className="text-gray-600">€{(parseFloat(item.price_at_purchase || 0) * item.quantity).toFixed(2)}</span> 
                </li> 
              )) : <li className="text-gray-500">No items listed for this order.</li>} 
            </ul> 
          </div>
        </div>
        
        <div className="border-t pt-4 mt-auto"> 
          <label htmlFor="statusChange" className="block text-sm font-medium text-gray-700 mb-1">Update Order Status:</label> 
          <select 
            id="statusChange" 
            value={newStatus} 
            onChange={(e) => setNewStatus(e.target.value)} 
            className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm mb-3"
          > 
            {statusOptions.map(opt => ( <option key={opt} value={opt}>{opt.replace('_', ' ').toUpperCase()}</option> ))} 
          </select> 
          <button 
            onClick={handleStatusChangeSubmit} 
            disabled={isUpdating || newStatus === order.status} 
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2.5 px-4 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center transition-colors"
          > 
            {isUpdating ? <Loader2 className="animate-spin h-5 w-5 mr-2"/> : <Edit className="w-4 h-4 mr-2"/>} 
            {isUpdating ? 'Updating...' : 'Update Status'} 
          </button> 
        </div>
      </div>
    </div>
  );
};
export default OrderDetailModal;

// End of File: src/modules/restaurant/components/OrderDetailModal.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/OrderTableRow.jsx

// src/modules/restaurant/components/OrderTableRow.jsx
import React from 'react';
import { Eye } from 'lucide-react';

const OrderTableRow = ({ order, onViewUpdate }) => {
  const { id, user_details, created_at, total_amount, status } = order;
  const formattedDate = new Date(created_at).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit' });

  const getStatusClassAndText = (statusVal) => {
    const s = statusVal?.toUpperCase() || 'UNKNOWN'; 
    let classes = 'px-2 py-0.5 text-xs font-semibold rounded-full inline-block '; 
    let text = s.replace(/_/g, ' ');
    switch (s) {
      case 'PENDING': classes += 'bg-yellow-100 text-yellow-700'; break;
      case 'CONFIRMED': classes += 'bg-blue-100 text-blue-700'; break;
      case 'PREPARING': classes += 'bg-orange-100 text-orange-700'; break;
      case 'READY_FOR_PICKUP': classes += 'bg-purple-100 text-purple-700'; text = 'READY FOR PICKUP'; break;
      case 'DELIVERED': classes += 'bg-green-100 text-green-700'; break;
      case 'CANCELLED_BY_RESTAURANT': classes += 'bg-red-100 text-red-700'; text = 'CANCELLED'; break;
      case 'CANCELLED_BY_USER': classes += 'bg-red-100 text-red-700'; text = 'CANCELLED (USER)'; break; // Example for other cancelled
      case 'ON_THE_WAY': classes += 'bg-indigo-100 text-indigo-700'; text = 'ON THE WAY'; break;
      default: classes += 'bg-gray-100 text-gray-700';
    } return { classes, text };
  };
  const { classes: statusClasses, text: statusText } = getStatusClassAndText(status);

  return (
    <tr className="bg-white border-b hover:bg-gray-50 transition-colors duration-150">
      <td className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">{id}</td>
      <td className="px-6 py-4 text-gray-600">{user_details?.username || 'N/A'}</td>
      <td className="px-6 py-4 text-gray-500 text-xs">{formattedDate}</td>
      <td className="px-6 py-4 font-medium text-gray-700">€{parseFloat(total_amount || 0).toFixed(2)}</td>
      <td className="px-6 py-4"><span className={statusClasses}>{statusText}</span></td>
      <td className="px-6 py-4 text-center"> 
        <button onClick={() => onViewUpdate(order)} className="font-medium text-blue-600 hover:text-blue-800 text-xs flex items-center justify-center w-full hover:underline"> 
          <Eye className="w-4 h-4 mr-1" /> View/Update 
        </button> 
      </td>
    </tr>
  );
};
export default OrderTableRow;

// End of File: src/modules/restaurant/components/OrderTableRow.jsx
//--------------------------------------------------

// File: src/modules/restaurant/components/Sidebar.jsx

// frontend/src/modules/restaurant/components/Sidebar.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
import { useNotification } from '../../../context/NotificationContext.jsx';
import { restaurantApi } from '../../../api/restaurantApi.js';
import { 
    HomeIcon, ShoppingCartIcon, QueueListIcon, Cog6ToothIcon, StarIcon, ChartBarIcon, 
    ShieldCheckIcon, XMarkIcon, UserCircleIcon, ChevronUpIcon, ChevronDownIcon, ArrowRightOnRectangleIcon 
} from '@heroicons/react/24/outline';

const Sidebar = ({ isSidebarOpen, setIsSidebarOpen: setIsMobileSidebarOpen }) => { // Renamed prop for clarity
  const { user, token, currentRestaurant, selectRestaurant, logout: authLogout } = useAuth();
  const { showSuccess } = useNotification(); // Renamed from showNotification to showSuccess for specific use
  
  const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false);
  const [pendingOrdersCount, setPendingOrdersCount] = useState(0);
  const location = useLocation();
  const navigate = useNavigate();

  const restaurantIdFromContext = currentRestaurant?.id; // Use the one from context primarily

  const getActiveSection = (pathname) => {
    if (pathname.includes('/restaurant/orders')) return 'orders';
    if (pathname.includes('/restaurant/menu')) return 'menu';
    if (pathname.includes('/restaurant/settings')) return 'settings';
    if (pathname.includes('/restaurant/reviews')) return 'reviews';
    if (pathname.includes('/restaurant/analytics')) return 'analytics';
    // Check for overview/dashboard, ensure it handles trailing slashes
    if (pathname.match(/^\/restaurant(\/dashboard|\/)?$/)) return 'overview'; 
    return 'overview'; // Default
  };
  const activeSection = getActiveSection(location.pathname);

  const navItems = [
    { id: 'overview', label: 'Pasqyra', IconComponent: HomeIcon, path: 'overview' }, // Relative paths
    { id: 'orders', label: 'Porositë', IconComponent: ShoppingCartIcon, count: pendingOrdersCount, path: 'orders' },
    { id: 'menu', label: 'Menuja', IconComponent: QueueListIcon, path: 'menu' },
    { id: 'settings', label: 'Konfigurimet', IconComponent: Cog6ToothIcon, path: 'settings' },
    { id: 'reviews', label: 'Vlerësimet', IconComponent: StarIcon, path: 'reviews' },
    { id: 'analytics', label: 'Analitika', IconComponent: ChartBarIcon, path: 'analytics' },
  ];
  
  const fetchPendingOrders = useCallback(async () => {
      if (restaurantIdFromContext && token) {
        try {
          const orders = await restaurantApi.fetchRestaurantOrders(restaurantIdFromContext, token);
          const pending = orders.filter(o => ['PENDING', 'CONFIRMED', 'PREPARING', 'READY_FOR_PICKUP'].includes(o.status?.toUpperCase())).length;
          setPendingOrdersCount(pending);
        } catch (error) { 
          console.error("Sidebar: Failed to fetch pending orders count:", error); 
          setPendingOrdersCount(0); 
        }
      } else {
        setPendingOrdersCount(0);
      }
    }, [restaurantIdFromContext, token]);


  useEffect(() => {
    fetchPendingOrders(); // Fetch once on mount or when restaurantId changes
    if (activeSection === 'orders' || activeSection === 'overview') {
        const intervalId = setInterval(fetchPendingOrders, 30000); // Poll every 30 seconds
        return () => clearInterval(intervalId);
    }
  }, [fetchPendingOrders, activeSection]);

  const handleLogout = async () => {
    await authLogout();
    showSuccess('Largimi u krye me sukses.'); // Using showSuccess
    navigate('/auth/login'); // Navigate to general login
  };

  const handleLinkClick = () => {
    if (isSidebarOpen && window.innerWidth < 768) { // md breakpoint for Tailwind is 768px
      setIsMobileSidebarOpen(false);
    }
  };
  
  // Auth check is primarily handled by ProtectedRoute in RestaurantOwnerLayout
  if (!user || (user.role !== "RESTAURANT_OWNER" && user.role !== "ADMIN")) {
    return null; // Layout's ProtectedRoute should handle redirection
  }

  return (
    <>
      {/* Overlay for mobile, ensure this is the same prop as in RestaurantOwnerLayout */}
      {isSidebarOpen && (
        <div
          className="fixed inset-0 z-30 bg-black/40 backdrop-blur-sm md:hidden"
          onClick={() => setIsMobileSidebarOpen(false)}
          aria-hidden="true"
        ></div>
      )}

      <aside
        className={`fixed inset-y-0 left-0 z-40 flex flex-col w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 print:hidden
                   transform transition-transform duration-300 ease-in-out md:translate-x-0 md:static md:inset-0 
                   ${isSidebarOpen ? 'translate-x-0 shadow-2xl' : '-translate-x-full'}`}
        aria-label="Menuja e restorantit"
      >
        <Link 
            to="overview" // Relative path
            onClick={handleLinkClick}
            className="px-4 py-5 border-b border-gray-200 dark:border-gray-700 flex flex-col items-center space-y-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors"
        >
            <span className="inline-flex items-center justify-center h-12 w-12 rounded-full bg-primary-500 dark:bg-primary-600 text-white text-xl font-bold ring-2 ring-offset-2 ring-offset-white dark:ring-offset-gray-800 ring-primary-300 dark:ring-primary-500">
              {currentRestaurant?.name ? currentRestaurant.name[0].toUpperCase() : 'R'}
            </span>
            <span className="text-md font-semibold text-gray-800 dark:text-white text-center truncate w-full max-w-[180px]" title={currentRestaurant?.name}>
              {currentRestaurant?.name || 'Restoranti Im'}
            </span>
            <button
                onClick={(e) => { e.stopPropagation(); setIsMobileSidebarOpen(false); }} // Prevent link navigation if clicking X
                className="absolute top-4 right-4 md:hidden text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
                aria-label="Mbyll menunë anësore"
            >
                <XMarkIcon className="h-6 w-6" />
            </button>
        </Link>
      
        {user.ownsRestaurants && user.ownsRestaurants.length > 1 && (
            <div className="p-3 border-b border-gray-200 dark:border-gray-700">
            <label htmlFor="restaurantSelectSidebar" className="block text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">Menaxho Restorantin:</label>
            <select 
                id="restaurantSelectSidebar" 
                value={currentRestaurant?.id || ''} 
                onChange={(e) => { 
                const selectedId = parseInt(e.target.value); 
                const restaurantToSelect = user.ownsRestaurants.find(r => r.id === selectedId); 
                if (restaurantToSelect) selectRestaurant(restaurantToSelect); // selectRestaurant from AuthContext
                }} 
                className="w-full text-sm rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:border-primary-500 focus:ring focus:ring-primary-200 dark:focus:ring-primary-500/50 focus:ring-opacity-50 shadow-sm py-1.5"
            >
                {user.ownsRestaurants.map(r => (<option key={r.id} value={r.id}>{r.name}</option>))}
            </select>
            </div>
        )}

        <nav className="flex-grow p-3 space-y-1 overflow-y-auto custom-scrollbar">
            {navItems.map(item => (
            <Link // Changed NavLink to Link for simpler active state management with activeSection
                key={item.id} 
                to={item.path} // Already relative from parent route
                onClick={handleLinkClick}
                className={`w-full flex items-center px-3 py-2.5 text-sm rounded-md transition-colors group
                ${activeSection === item.id 
                    ? 'bg-primary-600 text-white font-medium shadow-sm' 
                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white'
                }`}
            >
                {item.IconComponent && (
                <item.IconComponent 
                  className={`flex-shrink-0 h-5 w-5 
                              ${activeSection !== item.id ? 'text-gray-400 dark:text-gray-500 group-hover:text-primary-500 dark:group-hover:text-primary-400' : 'text-white'}`} 
                />
                )}
                <span className="truncate flex-grow">{item.label}</span>
                {item.id === 'orders' && item.count > 0 && (
                    <span className={`ml-auto text-xs font-semibold rounded-full px-2 py-0.5 ${activeSection === item.id ? 'bg-white/20 text-white' : 'bg-orange-100 text-orange-700 dark:bg-orange-500/30 dark:text-orange-300'}`}>
                        {item.count}
                    </span>
                )}
            </Link>
            ))}
        </nav>

        <div className="p-3 border-t border-gray-200 dark:border-gray-700 mt-auto">
            <div className="relative">
            <button onClick={() => setIsProfileDropdownOpen(prev => !prev)} className="w-full flex items-center p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 text-left focus:outline-none focus:ring-1 focus:ring-primary-500 dark:focus:ring-primary-400">
                <span className="inline-flex items-center justify-center h-8 w-8 rounded-full bg-gray-200 dark:bg-gray-600 mr-2.5 flex-shrink-0">
                    <UserCircleIcon className="w-5 h-5 text-gray-500 dark:text-gray-400" />
                </span>
                <div className="flex-grow min-w-0">
                    <p className="text-sm font-medium text-gray-700 dark:text-gray-200 truncate">{user?.username || 'Pronar'}</p>
                    {/* <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{user?.email}</p> */}
                </div>
                {isProfileDropdownOpen ? <ChevronUpIcon className="w-4 h-4 text-gray-400 dark:text-gray-500 ml-1 flex-shrink-0" /> : <ChevronDownIcon className="w-4 h-4 text-gray-400 dark:text-gray-500 ml-1 flex-shrink-0" />}
            </button>
            {isProfileDropdownOpen && (
                <div className="absolute bottom-full left-0 right-0 mb-1.5 bg-white dark:bg-gray-700 rounded-md shadow-lg ring-1 ring-black/5 py-1 z-20">
                <Link to="settings" onClick={() => { setIsProfileDropdownOpen(false); handleLinkClick(); }} className="w-full text-left block px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600 flex items-center">
                    <Cog6ToothIcon className="inline w-4 h-4 mr-2 text-gray-400 dark:text-gray-500" /> Profili & Konfigurimet
                </Link>
                <button onClick={handleLogout} className="w-full text-left block px-3 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-500/20 hover:text-red-700 dark:hover:text-red-300 flex items-center">
                    <ArrowRightOnRectangleIcon className="inline w-4 h-4 mr-2" /> Dilni
                </button>
                </div>
            )}
            </div>
        </div>
    </aside>
    </>
  );
};
export default Sidebar;

// End of File: src/modules/restaurant/components/Sidebar.jsx
//--------------------------------------------------

// File: src/modules/restaurant/pages/AnalyticsPage.jsx

// src/modules/restaurant/pages/AnalyticsPage.jsx
import React, { useState, useEffect, useCallback } from "react";
import { useOutletContext } from "react-router-dom";
// import HeroIcon from "../../../components/HeroIcon.jsx"; // FSHIJE KËTË
import { ArrowPathIcon, ChartPieIcon, ExclamationTriangleIcon, CalendarDaysIcon, CurrencyDollarIcon, ShoppingCartIcon, StarIcon } from '@heroicons/react/24/outline';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { restaurantApi } from "../../../api/restaurantApi.js";
import { useNotification } from "../../../context/NotificationContext.jsx";
import Button from "../../../components/Button.jsx"; // Assuming path

const AnalyticsPage = () => {
  const { currentRestaurant } = useOutletContext() || {};
  const [analyticsData, setAnalyticsData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showError } = useNotification();
  const [dateRange, setDateRange] = useState({ 
    from: new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().split('T')[0], // Default to last 30 days
    to: new Date().toISOString().split('T')[0] 
  });

  const fetchAnalytics = useCallback(async () => {
    if (!currentRestaurant?.id) {
      setError("Restoranti nuk është zgjedhur ose nuk ka ID.");
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const params = {
        start_date: dateRange.from,
        end_date: dateRange.to,
      };
      const data = await restaurantApi.getRestaurantAnalytics(currentRestaurant.id, params);
      setAnalyticsData(data);
    } catch (err) {
      console.error("Failed to load analytics:", err);
      setError(err.message || "Problem në ngarkimin e analitikave.");
      showError(err.message || "Problem në ngarkimin e analitikave.");
    } finally {
      setIsLoading(false);
    }
  }, [currentRestaurant?.id, dateRange, showError]);

  useEffect(() => {
    fetchAnalytics();
  }, [fetchAnalytics]);

  const handleDateChange = (e) => {
    setDateRange(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };
  
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A230ED', '#D930ED'];

  if (!currentRestaurant) {
    return (
      <div className="p-6 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-yellow-700 dark:text-yellow-200 flex items-center">
        <ExclamationTriangleIcon className="h-6 w-6 mr-3 flex-shrink-0" />
        <p>Ju lutem zgjidhni ose krijoni një restorant për të parë këtë faqe.</p>
      </div>
    );
  }

  if (error && !isLoading) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
            <Button onClick={fetchAnalytics} variant="outline" size="sm" className="ml-auto">Provo Përsëri</Button>
        </div>
    );
  }
  
  const StatCard = ({ title, value, icon: IconComponent, unit, color = "primary" }) => (
    <div className={`bg-white dark:bg-slate-800 shadow-lg rounded-xl p-4 flex items-center justify-between`}>
        <div>
            <p className="text-xs font-medium text-gray-500 dark:text-slate-400 uppercase">{title}</p>
            <p className="text-xl font-bold text-gray-800 dark:text-white">
                {value ?? <ArrowPathIcon className="h-5 w-5 animate-spin text-gray-400" />} {unit}
            </p>
        </div>
        {IconComponent && (
            <div className={`p-2 bg-${color}-100 dark:bg-${color}-500/20 rounded-full`}>
                <IconComponent className={`h-5 w-5 text-${color}-600 dark:text-${color}-400`} />
            </div>
        )}
    </div>
  );


  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <ChartPieIcon className="h-7 w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Analitikat e Restorantit
        </h1>
        <Button onClick={fetchAnalytics} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading}>
            Rifresko Analitikat
        </Button>
      </div>
      
      {/* Date Range Picker */}
      <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
            <div>
                <label htmlFor="dateFrom" className="label-form text-xs">Nga Data:</label>
                <input type="date" name="from" id="dateFrom" value={dateRange.from} onChange={handleDateChange} className="input-form w-full"/>
            </div>
            <div>
                <label htmlFor="dateTo" className="label-form text-xs">Deri më Datë:</label>
                <input type="date" name="to" id="dateTo" value={dateRange.to} onChange={handleDateChange} className="input-form w-full"/>
            </div>
            <Button onClick={fetchAnalytics} iconLeft={CalendarDaysIcon} isLoading={isLoading} disabled={isLoading} className="sm:mt-5">
                Apliko Filtrimin
            </Button>
        </div>
      </div>

      {isLoading && !analyticsData && (
         <div className="flex justify-center items-center py-20">
            <ArrowPathIcon className="h-12 w-12 animate-spin text-primary-500" />
         </div>
      )}

      {analyticsData && !isLoading && (
        <>
          {/* Key Metrics Summary */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <StatCard title="Të Ardhurat Totale" value={analyticsData.summary?.total_revenue?.toFixed(2)} unit="€" icon={CurrencyDollarIcon} color="green"/>
            <StatCard title="Porosi Gjithsej" value={analyticsData.summary?.total_orders} icon={ShoppingCartIcon} color="blue"/>
            <StatCard title="Vlerësimi Mesatar" value={analyticsData.summary?.average_rating?.toFixed(1)} unit="★" icon={StarIcon} color="yellow"/>
            <StatCard title="Klientë të Rinj" value={analyticsData.summary?.new_customers} icon={UserPlusIcon} color="purple"/>
          </div>
          
          {/* Revenue Over Time Chart */}
          {analyticsData.revenue_over_time && analyticsData.revenue_over_time.length > 0 && (
            <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5">
              <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-3">Të Ardhurat Gjatë Kohës</h2>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={analyticsData.revenue_over_time}>
                  <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200 dark:stroke-slate-700"/>
                  <XAxis dataKey="date" tick={{fontSize: 12}} className="fill-gray-500 dark:fill-slate-400"/>
                  <YAxis tick={{fontSize: 12}} className="fill-gray-500 dark:fill-slate-400" unit="€"/>
                  <Tooltip formatter={(value) => `${value.toFixed(2)} €`} wrapperClassName="tooltip-recharts"/>
                  <Legend />
                  <Line type="monotone" dataKey="revenue" name="Të ardhurat" stroke="#8884d8" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 6 }} />
                </LineChart>
              </ResponsiveContainer>
            </div>
          )}

          {/* Popular Menu Items Chart */}
          {analyticsData.popular_menu_items && analyticsData.popular_menu_items.length > 0 && (
            <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5">
              <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-3">Artikujt Më Popullorë të Menusë</h2>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={analyticsData.popular_menu_items} layout="vertical" margin={{left: 100}}>
                    <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200 dark:stroke-slate-700"/>
                    <XAxis type="number" tick={{fontSize: 12}} className="fill-gray-500 dark:fill-slate-400"/>
                    <YAxis dataKey="name" type="category" tick={{fontSize: 10, width: 95, textAnchor: 'start'}} interval={0} className="fill-gray-500 dark:fill-slate-400"/>
                    <Tooltip formatter={(value) => `${value} porosi`} wrapperClassName="tooltip-recharts"/>
                    <Legend />
                    <Bar dataKey="order_count" name="Numri i Porosive" fill="#82ca9d" barSize={20}/>
                </BarChart>
              </ResponsiveContainer>
            </div>
          )}
          
          {/* Order Status Distribution */}
          {analyticsData.order_status_distribution && analyticsData.order_status_distribution.length > 0 && (
            <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5">
                <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-3">Shpërndarja e Statusit të Porosive</h2>
                <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                        <Pie
                            data={analyticsData.order_status_distribution}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                            outerRadius={100}
                            fill="#8884d8"
                            dataKey="count"
                            nameKey="status_display"
                        >
                            {analyticsData.order_status_distribution.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                        </Pie>
                        <Tooltip formatter={(value, name) => [`${value} porosi`, name]} wrapperClassName="tooltip-recharts"/>
                        <Legend />
                    </PieChart>
                </ResponsiveContainer>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default AnalyticsPage;

// End of File: src/modules/restaurant/pages/AnalyticsPage.jsx
//--------------------------------------------------

// File: src/modules/restaurant/pages/CustomerReviewsPage.jsx

// src/modules/restaurant/pages/CustomerReviewsPage.jsx
import React, { useState, useEffect, useCallback } from "react";
import { useOutletContext } from "react-router-dom";
import { StarIcon, PencilSquareIcon, ChatBubbleLeftEllipsisIcon, ArrowPathIcon, ExclamationTriangleIcon, InboxIcon } from '@heroicons/react/24/outline';
import Button from "../../../components/Button.jsx";
import { restaurantApi } from "../../../api/restaurantApi.js";
import { useNotification } from "../../../context/NotificationContext.jsx";
import ModalShell from "../../../components/ModalShell.jsx"; // Assuming path

const CustomerReviewsPage = () => {
  const { currentRestaurant } = useOutletContext() || {};
  const [reviews, setReviews] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showSuccess, showError } = useNotification();
  
  const [isReplyModalOpen, setIsReplyModalOpen] = useState(false);
  const [currentReviewToReply, setCurrentReviewToReply] = useState(null);
  const [replyText, setReplyText] = useState("");
  const [isSubmittingReply, setIsSubmittingReply] = useState(false);

  const fetchReviews = useCallback(async () => {
    if (!currentRestaurant?.id) {
        setError("Restoranti nuk është zgjedhur ose nuk ka ID.");
        setIsLoading(false);
        return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await restaurantApi.getRestaurantReviews(currentRestaurant.id);
      setReviews(data.results || data || []);
    } catch (err) {
      console.error("Failed to load reviews:", err);
      setError(err.message || "Problem në ngarkimin e vlerësimeve.");
      showError(err.message || "Problem në ngarkimin e vlerësimeve.");
    } finally {
      setIsLoading(false);
    }
  }, [currentRestaurant?.id, showError]);

  useEffect(() => {
    fetchReviews();
  }, [fetchReviews]);

  const handleOpenReplyModal = (review) => {
    setCurrentReviewToReply(review);
    setReplyText(review.reply || "");
    setIsReplyModalOpen(true);
  };

  const handleCloseReplyModal = () => {
    setIsReplyModalOpen(false);
    setCurrentReviewToReply(null);
    setReplyText("");
  };

  const handleReplySubmit = async (e) => {
    e.preventDefault();
    if (!currentReviewToReply || !replyText.trim()) return;
    setIsSubmittingReply(true);
    try {
      const updatedReview = await restaurantApi.replyToReview(currentRestaurant.id, currentReviewToReply.id, replyText);
      setReviews(prevReviews => 
        prevReviews.map(r => r.id === updatedReview.id ? updatedReview : r)
      );
      showSuccess("Përgjigja u dërgua me sukses!");
      handleCloseReplyModal();
    } catch (err) {
      console.error("Failed to submit reply:", err);
      showError(err.message || "Problem gjatë dërgimit të përgjigjes.");
    } finally {
      setIsSubmittingReply(false);
    }
  };
  
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('sq-AL', {
      year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
    });
  };

  if (!currentRestaurant) {
    return (
      <div className="p-6 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-yellow-700 dark:text-yellow-200 flex items-center">
        <ExclamationTriangleIcon className="h-6 w-6 mr-3 flex-shrink-0" />
        <p>Ju lutem zgjidhni ose krijoni një restorant për të parë këtë faqe.</p>
      </div>
    );
  }
  
  if (error && !isLoading) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
            <Button onClick={fetchReviews} variant="outline" size="sm" className="ml-auto">Provo Përsëri</Button>
        </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <ChatBubbleLeftEllipsisIcon className="h-7 w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Vlerësimet e Klientëve
        </h1>
        <Button onClick={fetchReviews} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading}>
            Rifresko Vlerësimet
        </Button>
      </div>

      {isLoading && reviews.length === 0 && (
         <div className="flex justify-center items-center py-20">
            <ArrowPathIcon className="h-12 w-12 animate-spin text-primary-500" />
         </div>
      )}

      {!isLoading && reviews.length === 0 && (
        <div className="text-center py-10 bg-white dark:bg-slate-800 rounded-lg shadow">
          <InboxIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
          <p className="text-xl text-gray-600 dark:text-slate-300">Nuk ka vlerësime për këtë restorant ende.</p>
        </div>
      )}

      {reviews.length > 0 && (
        <div className="space-y-4">
          {reviews.map(review => (
            <div key={review.id} className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-4 sm:p-5">
              <div className="flex justify-between items-start">
                <div>
                  <p className="font-semibold text-gray-800 dark:text-white">{review.user_full_name || review.user_email || 'Anonim'}</p>
                  <div className="flex items-center mt-0.5">
                    {[...Array(5)].map((_, i) => (
                      <StarIcon key={i} className={`h-4 w-4 ${i < review.rating ? 'text-yellow-400' : 'text-gray-300 dark:text-slate-600'}`} />
                    ))}
                    <span className="ml-1.5 text-xs text-gray-500 dark:text-slate-400">({review.rating}.0)</span>
                  </div>
                </div>
                <time className="text-xs text-gray-400 dark:text-slate-500">{formatDate(review.created_at)}</time>
              </div>
              <p className="text-sm text-gray-600 dark:text-slate-300 mt-2 leading-relaxed">{review.comment}</p>
              
              {review.reply && (
                <div className="mt-3 pt-3 border-t border-gray-200 dark:border-slate-700">
                  <p className="text-xs font-semibold text-gray-500 dark:text-slate-400 mb-1">Përgjigja e Restorantit:</p>
                  <p className="text-sm text-gray-600 dark:text-slate-300 italic">{review.reply}</p>
                  <time className="text-xs text-gray-400 dark:text-slate-500 mt-0.5 block">{formatDate(review.replied_at)}</time>
                </div>
              )}

              <div className="mt-3 text-right">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handleOpenReplyModal(review)}
                  iconLeft={PencilSquareIcon}
                >
                  {review.reply ? 'Modifiko Përgjigjen' : 'Përgjigju'}
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
      
      {isReplyModalOpen && currentReviewToReply && (
        <ModalShell isOpen={isReplyModalOpen} onClose={handleCloseReplyModal} title={`Përgjigju Vlerësimit #${currentReviewToReply.id}`}>
            <form onSubmit={handleReplySubmit} className="space-y-4">
                <div>
                    <p className="text-sm font-medium text-gray-700 dark:text-slate-200">Vlerësimi nga: {currentReviewToReply.user_full_name || currentReviewToReply.user_email}</p>
                    <p className="text-xs text-gray-500 dark:text-slate-400 italic mt-1">"{currentReviewToReply.comment}"</p>
                </div>
                <div>
                    <label htmlFor="replyText" className="label-form">Përgjigja Juaj:</label>
                    <textarea 
                        id="replyText"
                        value={replyText}
                        onChange={(e) => setReplyText(e.target.value)}
                        rows="4"
                        className="input-form w-full"
                        required
                    />
                </div>
                <div className="flex justify-end gap-3">
                    <Button type="button" variant="ghost" onClick={handleCloseReplyModal}>Anulo</Button>
                    <Button type="submit" isLoading={isSubmittingReply} disabled={isSubmittingReply}>
                        Dërgo Përgjigjen
                    </Button>
                </div>
            </form>
        </ModalShell>
      )}
    </div>
  );
};

export default CustomerReviewsPage;

// End of File: src/modules/restaurant/pages/CustomerReviewsPage.jsx
//--------------------------------------------------

// File: src/modules/restaurant/pages/ManageOrdersPage.jsx

// src/modules/restaurant/pages/ManageOrdersPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useOutletContext } from 'react-router-dom';
import { restaurantApi } from '../../../api/restaurantApi';
// AuthContext nuk nevojitet direkt këtu, tokeni menaxhohet nga apiService
import { useNotification } from '../../../context/NotificationContext.jsx';
import Button from "../../../components/Button.jsx";
import { ArrowPathIcon, ShoppingCartIcon, FunnelIcon, MagnifyingGlassIcon, ExclamationTriangleIcon, EyeIcon } from '@heroicons/react/24/outline'; // Shto EyeIcon
import OrderTableRow from "../components/OrderTableRow.jsx";
import OrderDetailModal from '../components/OrderDetailModal.jsx';
import ConfirmationModal from '../../../components/ConfirmationModal.jsx'; // Sigurohu që path është korrekt

const ManageOrdersPage = () => {
  const { currentRestaurantId, currentRestaurantName } = useOutletContext() || {}; // Merr nga layout
  const { showSuccess, showError } = useNotification();

  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  
  const [orderToConfirm, setOrderToConfirm] = useState(null);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false); // Për loading te ConfirmationModal

  const [activeFilter, setActiveFilter] = useState('ACTIVE_ONES'); // Default te porosite aktive
  const [searchTerm, setSearchTerm] = useState('');
  // filterStatus nuk nevojitet më pasi përdorim activeFilter me butona

  const fetchOrdersCallback = useCallback(async () => { // Riemërtoje për qartësi
    if (!currentRestaurantId) {
      setError("Restoranti nuk është zgjedhur. Ju lutem zgjidhni një restorant nga paneli.");
      setOrders([]);
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      // restaurantApi.fetchRestaurantOrders tani duhet të marrë vetëm restaurantId
      // tokeni menaxhohet nga apiService
      const data = await restaurantApi.fetchRestaurantOrders(currentRestaurantId);
      setOrders(data.results || data || []); // DRF PageNumberPagination kthen 'results'
    } catch (err) {
      console.error("ManageOrders: Failed to fetch orders:", err);
      const errMsg = err.response?.data?.detail || err.message || "S'u mund të ngarkoheshin porositë.";
      setError(errMsg);
      showError(errMsg);
      setOrders([]);
    } finally {
      setIsLoading(false);
    }
  }, [currentRestaurantId, showError]);

  useEffect(() => {
    fetchOrdersCallback();
    // Shto interval polling vetëm nëse dëshiron rifreskim automatik
    // const pollInterval = setInterval(fetchOrdersCallback, 30000); 
    // return () => clearInterval(pollInterval);
  }, [fetchOrdersCallback]);

  const handleViewDetails = (order) => {
    setSelectedOrder(order);
    setIsDetailModalOpen(true);
  };

  const handleUpdateStatusRequestFromModal = (orderId, newStatus) => {
    // Kjo thirret nga OrderDetailModal
    const order = orders.find(o => o.id === orderId);
    setOrderToConfirm({ 
        orderId, 
        newStatus, 
        currentStatus: order?.status,
        customerName: order?.customer_email || order?.customer?.email || 'Klient' // Merr email
    });
    setIsDetailModalOpen(false); // Mbyll modalin e detajeve
    setIsConfirmModalOpen(true); // Hap modalin e konfirmimit
  };
  
  const confirmAndUpdateStatus = async () => {
    if (!orderToConfirm) return;
    const { orderId, newStatus } = orderToConfirm;
    
    setIsUpdatingStatus(true); // Për butonin e konfirmimit
    try {
        // restaurantApi.updateOrderStatus tani merr vetëm orderId dhe newStatus
        const updatedOrder = await restaurantApi.updateOrderStatus(orderId, newStatus);
        setOrders(prevOrders => prevOrders.map(o => o.id === orderId ? updatedOrder : o));
        showSuccess(`Statusi i porosisë #${orderId} u përditësua në ${updatedOrder.status_display || newStatus}.`);
        
        // Përditëso selectedOrder nëse modali i detajeve ishte hapur për këtë porosi
        if (selectedOrder && selectedOrder.id === orderId) {
            setSelectedOrder(updatedOrder);
        }
    } catch (err) {
        console.error("Failed to update order status:", err);
        showError(err.response?.data?.detail || err.message || "Gabim gjatë përditësimit të statusit.");
    } finally {
        setIsConfirmModalOpen(false);
        setOrderToConfirm(null);
        setIsUpdatingStatus(false);
    }
  };

  const orderStatusFilters = [
    { label: "Të gjitha Aktive", value: "ACTIVE_ONES" },
    { label: "Në Pritje", value: "PENDING" },
    { label: "Konfirmuar", value: "CONFIRMED" },
    { label: "Në Përgatitje", value: "PREPARING" },
    { label: "Gati për Marrje", value: "READY_FOR_PICKUP" },
    { label: "Në Dërgesë", value: "ON_THE_WAY"},
    { label: "Të Gjitha Historiku", value: "ALL_HISTORY" },
    { label: "Dërguar", value: "DELIVERED" },
    { label: "Anuluar", value: "CANCELLED" }, // Ky do të kapë të dy llojet e anulimit
  ];

  const filteredOrders = orders.filter(order => {
    const searchTermLower = searchTerm.toLowerCase();
    let matchesSearch = true;
    if (searchTerm) {
        matchesSearch = (
            order.id.toString().includes(searchTermLower) ||
            (order.customer_email && order.customer_email.toLowerCase().includes(searchTermLower)) ||
            (order.customer?.email && order.customer.email.toLowerCase().includes(searchTermLower))
            // Mund të shtosh kërkim sipas artikujve nëse API e suporton ose nëse ke të dhënat e plota
        );
    }

    let matchesFilter = true;
    if (activeFilter === 'ALL_HISTORY') {
        matchesFilter = true;
    } else if (activeFilter === 'ACTIVE_ONES') {
        matchesFilter = ['PENDING', 'CONFIRMED', 'PREPARING', 'READY_FOR_PICKUP', 'ON_THE_WAY'].includes(order.status?.toUpperCase());
    } else if (activeFilter === 'CANCELLED') {
        matchesFilter = order.status?.toUpperCase().startsWith('CANCELLED');
    } else {
        matchesFilter = order.status === activeFilter;
    }
    return matchesSearch && matchesFilter;
  }).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));


  if (!currentRestaurantId && !isLoading) {
    return (
      <div className="p-6 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-yellow-700 dark:text-yellow-200 flex items-center">
        <ExclamationTriangleIcon className="h-6 w-6 mr-3 flex-shrink-0" />
        <p>Ju lutem zgjidhni një restorant nga paneli për të menaxhuar porositë.</p>
      </div>
    );
  }
  
  // Kjo është për rastin kur ka një gabim gjatë ngarkimit fillestar të porosive
  if (error && orders.length === 0 && !isLoading) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
            <Button onClick={fetchOrdersCallback} variant="outline" size="sm" className="ml-auto">Provo Përsëri</Button>
        </div>
    );
  }

  return (
    <div className="container mx-auto py-2"> {/* Reduktuar padding y */}
      <div className="mb-5 flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-xl sm:text-2xl md:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <ShoppingCartIcon className="h-6 w-6 sm:h-7 sm:w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Menaxho Porositë {currentRestaurantName && <span className="text-lg sm:text-xl text-gray-500 dark:text-slate-400 ml-2 truncate hidden md:inline">për "{currentRestaurantName}"</span>}
        </h1>
        <Button onClick={fetchOrdersCallback} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading} size="sm">
            Rifresko Porositë
        </Button>
      </div>

      <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md mb-5">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
          <div className="relative md:col-span-3"> {/* Bëje të marrë më shumë hapësirë */}
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <MagnifyingGlassIcon className="h-5 w-5 text-gray-400 dark:text-slate-500" />
            </div>
            <input
              type="text"
              placeholder="Kërko (ID porosie, email klienti)..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="input-form w-full pl-10"
            />
          </div>
          {/* Filter select-i është hequr, përdoren butonat më poshtë */}
        </div>
      </div>

      <div className="mb-5 p-3 bg-gray-50 dark:bg-slate-800/50 rounded-lg shadow-sm overflow-x-auto">
        <div className="flex flex-nowrap gap-2 items-center">
          <span className="text-xs sm:text-sm font-medium text-gray-700 dark:text-gray-300 mr-1 sm:mr-2 flex-shrink-0">Filtro:</span>
          {orderStatusFilters.map(filter => (
            <Button
              key={filter.value}
              variant={activeFilter === filter.value ? 'primary' : 'ghost'}
              size="xs" // Bëje më të vogël për mobile
              onClick={() => setActiveFilter(filter.value)}
              className="whitespace-nowrap !px-2 !py-1 sm:!px-2.5 sm:!py-1.5" // Përdor !important për override
            >
              {filter.label}
            </Button>
          ))}
        </div>
      </div>

      {isLoading && filteredOrders.length === 0 && (
        <div className="flex justify-center items-center py-10"><div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary-500"></div></div>
      )}
      
      {!isLoading && (
        filteredOrders.length === 0 && currentRestaurantId ? ( // Trego "Nuk ka porosi" vetëm nëse currentRestaurantId është valid
            <div className="text-center py-10 bg-white dark:bg-slate-800 rounded-lg shadow">
                <ShoppingCartIcon className="h-16 w-16 text-gray-300 dark:text-slate-600 mx-auto mb-4" />
                <p className="text-xl text-gray-600 dark:text-slate-300">
                    {orders.length === 0 ? "Nuk keni asnjë porosi për këtë restorant." : `Nuk u gjet asnjë porosi me filtrin e zgjedhur.`}
                </p>
                 {orders.length > 0 && searchTerm && <p className="text-sm text-gray-500 dark:text-slate-400 mt-1">Provoni të ndryshoni termin e kërkimit.</p>}
            </div>
        ) : (
        <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-slate-700">
            <thead className="bg-gray-50 dark:bg-slate-700">
              <tr>
                {['ID', 'Klienti', 'Data', 'Artikuj', 'Totali', 'Statusi', 'Veprime'].map(header => (
                  <th key={header} scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    {header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-slate-700">
              {filteredOrders.map((order) => (
                  <OrderTableRow 
                    key={order.id} 
                    order={order} 
                    onViewUpdate={handleViewDetails} // Riemërto prop-in për qartësi
                  />
                ))}
            </tbody>
          </table>
        </div>
        )
      )}

      {selectedOrder && (
        <OrderDetailModal
          isOpen={isDetailModalOpen}
          onClose={() => setIsDetailModalOpen(false)}
          order={selectedOrder}
          onUpdateStatus={handleUpdateStatusRequestFromModal} // Kjo thërret confirmation
        />
      )}
      {isConfirmModalOpen && orderToConfirm && (
        <ConfirmationModal
            isOpen={isConfirmModalOpen}
            onClose={() => { setIsConfirmModalOpen(false); setOrderToConfirm(null); }}
            onConfirm={confirmAndUpdateStatus}
            title="Konfirmo Ndryshimin e Statusit"
            message={`Jeni të sigurt që doni të ndryshoni statusin e porosisë #${orderToConfirm.orderId} (${orderToConfirm.customerName}) nga "${orderToConfirm.currentStatus?.replace(/_/g, ' ').toLowerCase() || 'i tanishëm'}" në "${orderToConfirm.newStatus.replace(/_/g, ' ').toLowerCase()}"?`}
            confirmText="Po, Ndrysho"
            confirmButtonVariant="primary" // Ose "warning" / "success" bazuar në status
            isLoading={isUpdatingStatus}
        />
      )}
    </div>
  );
};

export default ManageOrdersPage;

// End of File: src/modules/restaurant/pages/ManageOrdersPage.jsx
//--------------------------------------------------

// File: src/modules/restaurant/pages/MenuManagementPage.jsx

// src/modules/restaurant/pages/MenuManagementPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useOutletContext } from 'react-router-dom'; // Added
import { restaurantApi } from '../../../api/restaurantApi';
import { useAuth } from '../../../context/AuthContext';
import { useNotification } from '../../../context/NotificationContext';
import Button from "../../../components/Button";
import { TagIcon, PlusCircleIcon, QueueListIcon, ArrowPathIcon, ExclamationTriangleIcon, PencilIcon, TrashIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import MenuCategoryCard from "../components/MenuCategoryCard";
import MenuItemTableRow from '../components/MenuItemTableRow';
import MenuCategoryFormModal from '../components/MenuCategoryFormModal';
import MenuItemFormModal from '../components/MenuItemFormModal';
import ConfirmationModal from '../../../components/ConfirmationModal';

const MenuManagementPage = () => {
  const { token } = useAuth();
  const { currentRestaurantId } = useOutletContext(); // Get from layout
  const { showSuccess, showError } = useNotification();

  const [menuCategories, setMenuCategories] = useState([]);
  const [menuItems, setMenuItems] = useState([]);
  const [isLoading, setIsLoading] = useState({ categories: false, items: false, page: true });
  const [error, setError] = useState(null);

  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);
  const [isItemModalOpen, setIsItemModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  
  const [itemToDelete, setItemToDelete] = useState(null);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  
  // Assuming one menu per restaurant for simplicity, can be fetched or static
  const menuId = currentRestaurantId ? `MENU_RESTAURANT_${currentRestaurantId}` : null; // Example menuId derivation


  const fetchMenuData = useCallback(async () => {
    if (!currentRestaurantId || !token) {
      setError("Restoranti nuk është zgjedhur ose nuk jeni të kyçur.");
      setIsLoading({ categories: false, items: false, page: false });
      return;
    }
    setIsLoading({ categories: true, items: true, page: false }); // page false after initial load attempt
    setError(null);
    try {
      const [categoriesData, itemsData] = await Promise.all([
        restaurantApi.fetchMenuCategories(currentRestaurantId, token),
        restaurantApi.fetchMenuItems(currentRestaurantId, token) // Assuming this fetches all items for the restaurant
      ]);
      setMenuCategories(categoriesData || []);
      setMenuItems(itemsData || []);
    } catch (err) {
      console.error("MenuManagement: Failed to fetch menu data:", err);
      const errMsg = err.message || "S'u mund të ngarkoheshin të dhënat e menusë.";
      setError(errMsg);
      showError(errMsg);
    } finally {
      setIsLoading({ categories: false, items: false, page: false });
    }
  }, [currentRestaurantId, token, showError]);

  useEffect(() => {
    if(currentRestaurantId){ // Only fetch if restaurantId is available
        setIsLoading(prev => ({...prev, page: false})); // Initial "page" load is done
        fetchMenuData();
    } else {
        setIsLoading({ categories: false, items: false, page: false });
        setError("Ju lutem zgjidhni një restorant për të menaxhuar menunë.");
    }
  }, [fetchMenuData, currentRestaurantId]);

  const handleOpenCategoryModal = (category = null) => { setEditingCategory(category); setIsCategoryModalOpen(true); };
  const handleSaveCategory = () => { fetchMenuData(); };

  const handleOpenItemModal = (item = null) => { setEditingItem(item); setIsItemModalOpen(true); };
  const handleSaveItem = () => { fetchMenuData(); };
  
  const handleDeleteClick = (id, type, name) => { setItemToDelete({ id, type, name }); setIsConfirmModalOpen(true); };
  
  const confirmDeletion = async () => {
    if (!itemToDelete || !token) return;
    setIsConfirmModalOpen(false);
    const { id, type } = itemToDelete;
    setIsLoading(prev => ({ ...prev, [type === 'category' ? 'categories' : 'items']: true }));
    try {
      if (type === 'category') {
        await restaurantApi.deleteMenuCategory(id, token);
        showSuccess('Kategoria u fshi me sukses.');
      } else {
        await restaurantApi.deleteMenuItem(id, token);
        showSuccess('Artikulli u fshi me sukses.');
      }
      fetchMenuData();
    } catch (err) {
      showError(err.message || `Gabim gjatë fshirjes.`);
    } finally {
       setIsLoading(prev => ({ ...prev, [type === 'category' ? 'categories' : 'items']: false }));
       setItemToDelete(null);
    }
  };
  
  const handleToggleAvailability = async (itemId, newAvailability) => {
    setIsLoading(prev => ({ ...prev, items: true }));
    try {
        const updatedItem = await restaurantApi.updateMenuItem(itemId, { is_available: newAvailability, restaurantId: currentRestaurantId }, token); // Pass restaurantId for mock
        setMenuItems(prev => prev.map(i => i.id === itemId ? updatedItem : i));
        showSuccess(`Disponueshmëria e artikullit u ndryshua.`);
    } catch (err) { showError(err.message || "Gabim."); } 
    finally { setIsLoading(prev => ({ ...prev, items: false })); }
  };
  
  const getCategoryName = (categoryId) => menuCategories.find(c => c.id === categoryId)?.name || 'E pa kategorizuar';

  if (isLoading.page) {
    return <div className="flex justify-center items-center h-[calc(100vh-150px)]"><div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div></div>;
  }
  if (error && !currentRestaurantId) { // Show specific error if no restaurant selected
    return <div className="text-center text-red-500 dark:text-red-400 py-10 bg-red-50 dark:bg-red-900/30 p-6 rounded-md">{error}</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <QueueListIcon className="h-7 w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Menaxhimi i Menusë
        </h1>
        <div className="flex items-center gap-2">
            <Button onClick={fetchMenuData} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading} disabled={isLoading}>
                Rifresko
            </Button>
            <Button onClick={() => { setSelectedMenuItem(null); setIsMenuItemModalOpen(true); }} iconLeft={PlusCircleIcon}>
                Shto Artikull të Ri
            </Button>
            <Button onClick={() => { setSelectedCategory(null); setIsCategoryModalOpen(true); }} variant="secondary" iconLeft={TagIcon}>
                Shto Kategori
            </Button>
        </div>
      </div>

      <section>
        <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-white">Kategoritë e Menusë ({menuCategories.length})</h2>
            {isLoading.categories && <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-primary-500"></div>}
        </div>
        {!isLoading.categories && menuCategories.length > 0 && (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5">
            {menuCategories.sort((a,b) => (a.order || 0) - (b.order || 0)).map(category => (
              <MenuCategoryCard key={category.id} category={category} onEdit={handleOpenCategoryModal}
                onDelete={(id) => handleDeleteClick(id, 'category', category.name)}
                itemCount={menuItems.filter(item => item.categoryId === category.id).length} />
            ))}
          </div>
        )}
        {!isLoading.categories && menuCategories.length === 0 && !error && (
          <div className="text-center py-8 bg-white dark:bg-gray-800 rounded-lg shadow-md"><HeroIcon icon="TagIcon" className="h-12 w-12 text-gray-300 dark:text-gray-600 mx-auto mb-3"/><p className="text-gray-500 dark:text-gray-400">Nuk ka kategori.</p></div>
        )}
      </section>

      <section>
         <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-700 dark:text-white">Artikujt e Menusë ({menuItems.length})</h2>
            {isLoading.items && <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-primary-500"></div>}
        </div>
        {!isLoading.items && menuItems.length > 0 && (
          <div className="bg-white dark:bg-gray-800 shadow-xl rounded-lg overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700"><tr>{['Artikulli', 'Përshkrimi', 'Kategoria', 'Çmimi', 'Disponueshmëria', 'Veprime'].map(h=><th key={h} scope="col" className="px-5 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">{h}</th>)}</tr></thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {menuItems.sort((a,b) => (getCategoryName(a.categoryId) || '').localeCompare(getCategoryName(b.categoryId) || '') || a.name.localeCompare(b.name)).map((item) => (
                  <MenuItemTableRow key={item.id} item={item} categoryName={getCategoryName(item.categoryId)}
                    onEdit={handleOpenItemModal} onDelete={(id) => handleDeleteClick(id, 'item', item.name)}
                    onToggleAvailability={handleToggleAvailability} />
                ))}
              </tbody>
            </table>
          </div>
        )}
         {!isLoading.items && menuItems.length === 0 && !error && (
          <div className="text-center py-8 bg-white dark:bg-gray-800 rounded-lg shadow-md"><HeroIcon icon="QueueListIcon" className="h-12 w-12 text-gray-300 dark:text-gray-600 mx-auto mb-3"/><p className="text-gray-500 dark:text-gray-400">Nuk ka artikuj në menu.</p></div>
        )}
         {error && currentRestaurantId && <div className="text-center text-red-500 dark:text-red-400 py-5">{error}</div>}
      </section>
      
      <MenuCategoryFormModal isOpen={isCategoryModalOpen} onClose={() => setIsCategoryModalOpen(false)}
        category={editingCategory} onSave={handleSaveCategory} restaurantId={currentRestaurantId} />
      <MenuItemFormModal isOpen={isItemModalOpen} onClose={() => setIsItemModalOpen(false)}
        item={editingItem} categories={menuCategories} onSave={handleSaveItem}
        restaurantId={currentRestaurantId} menuId={menuId} />
       <ConfirmationModal isOpen={isConfirmModalOpen} onClose={() => setIsConfirmModalOpen(false)}
        onConfirm={confirmDeletion} title={`Konfirmo Fshirjen`}
        message={`Jeni të sigurt që doni të fshini ${itemToDelete?.type === 'category' ? 'kategorinë' : 'artikullin'} "${itemToDelete?.name || ''}"? ${itemToDelete?.type === 'category' ? 'Artikujt brenda saj do mbeten pa kategori.' : ''} Veprim i pakthyeshëm.`}
        confirmText="Fshij" iconType="danger" isLoading={isLoading.categories || isLoading.items} />
    </div>
  );
};

export default MenuManagementPage;

// End of File: src/modules/restaurant/pages/MenuManagementPage.jsx
//--------------------------------------------------

// File: src/modules/restaurant/pages/Overview.jsx

// src/modules/restaurant/pages/Overview.jsx
import React, { useState, useEffect, useCallback } from "react";
import { Link, useOutletContext } from "react-router-dom";
// import HeroIcon from "../../../components/HeroIcon"; // FSHIJE KËTË
import { 
    ClockIcon, ExclamationCircleIcon, QueueListIcon, StarIcon, CurrencyDollarIcon as CurrencyEuroIcon, 
    ShoppingCartIcon, Cog6ToothIcon, ChartPieIcon, ArrowPathIcon, BuildingStorefrontIcon, UsersIcon, ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import Button from "../../../components/Button";
import { useAuth } from "../../../context/AuthContext";
import { restaurantApi } from "../../../api/restaurantApi";
import { useNotification } from "../../../context/NotificationContext";

// StatCard to accept IconComponent
const StatCard = ({ title, value, icon: IconComponent, unit, linkTo, color = "primary", isLoading }) => (
    <div className={`bg-white dark:bg-slate-800 shadow-lg rounded-xl p-4 sm:p-5 flex items-center justify-between transition-all hover:shadow-xl`}>
        <div>
            <p className="text-xs sm:text-sm font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">{title}</p>
            {isLoading ? (
                <ArrowPathIcon className="h-6 w-6 animate-spin text-gray-400 dark:text-slate-500 my-1" />
            ) : (
                <p className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-white">
                    {value} {unit && <span className="text-sm font-normal">{unit}</span>}
                </p>
            )}
            {linkTo && !isLoading && (
                <Link to={linkTo} className={`text-xs text-${color}-600 dark:text-${color}-400 hover:underline`}>
                    Shiko më shumë
                </Link>
            )}
        </div>
        {IconComponent && (
            <div className={`p-2.5 bg-${color}-100 dark:bg-${color}-500/20 rounded-full`}>
                <IconComponent className={`h-6 w-6 text-${color}-600 dark:text-${color}-400`} />
            </div>
        )}
    </div>
);

const OverviewPage = () => {
  const { currentRestaurant } = useAuth();
  const [stats, setStats] = useState(null);
  const [recentOrders, setRecentOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showSuccess, showError } = useNotification();
  const contextRestaurant = useOutletContext()?.restaurant; // From RestaurantOwnerLayout
  const restaurantToUse = currentRestaurant || contextRestaurant;


  const fetchData = useCallback(async () => {
    if (!restaurantToUse?.id) {
        setError("Restoranti nuk është zgjedhur ose nuk ka ID.");
        setIsLoading(false);
        return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const [statsData, ordersData] = await Promise.all([
        restaurantApi.getRestaurantDashboardStats(restaurantToUse.id),
        restaurantApi.getRecentOrders(restaurantToUse.id, { limit: 5 }) 
      ]);
      setStats(statsData);
      setRecentOrders(ordersData.results || ordersData || []);
    } catch (err) {
      console.error("Failed to load restaurant overview data:", err);
      setError(err.message || "Problem në ngarkimin e të dhënave të pasqyrës.");
      showError(err.message || "Problem në ngarkimin e të dhënave.");
    } finally {
      setIsLoading(false);
    }
  }, [restaurantToUse?.id, showError]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleToggleRestaurantStatus = async () => {
    if (!restaurantToUse?.id) return;
    const newStatus = !restaurantToUse.is_active;
    try {
        // This should be ideally handled in AuthContext or a dedicated restaurant context
        // For now, making a direct API call and then trying to refresh auth context or data
        await restaurantApi.updateRestaurantDetails(restaurantToUse.id, { is_active: newStatus });
        showSuccess(`Statusi i restorantit u ndryshua në ${newStatus ? 'Aktiv' : 'Joaktiv'}.`);
        // TODO: Refresh currentRestaurant in AuthContext or refetch data
        fetchData(); // Refetch data to reflect change
    } catch (err) {
        showError("Problem në ndryshimin e statusit të restorantit.");
        console.error("Failed to toggle restaurant status:", err);
    }
  };
  
  if (!restaurantToUse) {
    return (
      <div className="p-6 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-yellow-700 dark:text-yellow-200 flex items-center">
        <ExclamationTriangleIcon className="h-6 w-6 mr-3 flex-shrink-0" />
        <p>Ju lutem zgjidhni ose krijoni një restorant për të parë këtë faqe.</p>
      </div>
    );
  }

  if (error && !isLoading) { // Show error only if not loading initial data
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
            <Button onClick={fetchData} variant="outline" size="sm" className="ml-auto">Provo Përsëri</Button>
        </div>
    );
  }


  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white">
            Pasqyra e Restorantit: {restaurantToUse.name}
        </h1>
        <Button 
            onClick={handleToggleRestaurantStatus} 
            variant={restaurantToUse.is_active ? "danger" : "success"}
            iconLeft={restaurantToUse.is_active ? ExclamationCircleIcon : CheckCircleIcon}
            isLoading={isLoading} // This might need a dedicated loading state for this action
        >
            {restaurantToUse.is_active ? 'Çaktivizo Restorantin' : 'Aktivizo Restorantin'}
        </Button>
      </div>
      {!restaurantToUse.is_approved && (
        <div className="p-4 bg-yellow-50 dark:bg-yellow-800/40 rounded-lg text-yellow-700 dark:text-yellow-200 flex items-center space-x-3">
            <ExclamationTriangleIcon className="h-6 w-6 flex-shrink-0"/>
            <p className="text-sm">Ky restorant është në pritje të aprovimit nga administratori. Disa funksionalitete mund të jenë të limituara.</p>
        </div>
      )}

      {/* Stats Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5">
        <StatCard title="Porosi Sot" value={stats?.orders_today ?? 'N/A'} icon={ShoppingCartIcon} linkTo="../orders" color="blue" isLoading={isLoading} />
        <StatCard title="Të Ardhura Sot" value={stats?.revenue_today?.toFixed(2) ?? 'N/A'} unit="€" icon={CurrencyEuroIcon} color="green" isLoading={isLoading} />
        <StatCard title="Vlerësimi Mesatar" value={stats?.average_rating?.toFixed(1) ?? 'N/A'} unit="★" icon={StarIcon} linkTo="../reviews" color="yellow" isLoading={isLoading} />
        <StatCard title="Artikuj në Menu" value={stats?.menu_item_count ?? 'N/A'} icon={QueueListIcon} linkTo="../menu" color="purple" isLoading={isLoading} />
      </div>

      {/* Recent Orders & Quick Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5">
          <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-3">Porositë e Fundit</h2>
          {isLoading && <ArrowPathIcon className="h-6 w-6 animate-spin text-gray-400 dark:text-slate-500" />}
          {!isLoading && recentOrders.length === 0 && <p className="text-sm text-gray-500 dark:text-slate-400">Nuk ka porosi të fundit.</p>}
          <ul className="divide-y divide-gray-200 dark:divide-slate-700 max-h-80 overflow-y-auto">
            {recentOrders.map(order => (
              <li key={order.id} className="py-3 flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium text-gray-800 dark:text-slate-100">Porosia #{order.id} <span className="text-xs text-gray-500 dark:text-slate-400">- {order.customer_name || 'Klient'}</span></p>
                  <p className="text-xs text-gray-500 dark:text-slate-400">{new Date(order.created_at).toLocaleString('sq-AL')}</p>
                </div>
                <div className="text-right">
                    <p className="text-sm font-semibold text-primary-600 dark:text-primary-400">{parseFloat(order.total_price).toFixed(2)} €</p>
                    <span className={`px-1.5 py-0.5 text-xs rounded-full ${
                        order.status === 'PENDING' ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-700 dark:text-yellow-200' :
                        order.status === 'CONFIRMED' ? 'bg-blue-100 text-blue-700 dark:bg-blue-700 dark:text-blue-200' :
                        order.status === 'PREPARING' ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-700 dark:text-indigo-200' :
                        order.status === 'OUT_FOR_DELIVERY' ? 'bg-purple-100 text-purple-700 dark:bg-purple-700 dark:text-purple-200' :
                        order.status === 'DELIVERED' ? 'bg-green-100 text-green-700 dark:bg-green-700 dark:text-green-200' :
                        'bg-red-100 text-red-700 dark:bg-red-700 dark:text-red-200'
                    }`}>{order.status_display || order.status}</span>
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 space-y-3">
          <h2 className="text-lg font-semibold text-gray-700 dark:text-slate-200 mb-2">Veprime të Shpejta</h2>
          <Button as={Link} to="../menu" fullWidth variant="outline" iconLeft={QueueListIcon}>Menaxho Menunë</Button>
          <Button as={Link} to="../orders" fullWidth variant="outline" iconLeft={ShoppingCartIcon}>Shiko Porositë</Button>
          <Button as={Link} to="../settings" fullWidth variant="outline" iconLeft={Cog6ToothIcon}>Konfigurimet e Restorantit</Button>
          <Button as={Link} to="../analytics" fullWidth variant="outline" iconLeft={ChartPieIcon}>Analitika</Button>
        </div>
      </div>
    </div>
  );
};

export default OverviewPage;

// End of File: src/modules/restaurant/pages/Overview.jsx
//--------------------------------------------------

// File: src/modules/restaurant/pages/RestaurantSettingsPage.jsx

// src/modules/restaurant/pages/RestaurantSettingsPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useOutletContext } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext.jsx';
import { restaurantApi } from '../../../api/restaurantApi.js';
import { useNotification } from '../../../context/NotificationContext.jsx';
import Button from "../../../components/Button.jsx";
import { 
    InformationCircleIcon, ClockIcon, MegaphoneIcon, TagIcon, CheckCircleIcon, BanknotesIcon, 
    BuildingStorefrontIcon, ArrowPathIcon, PhotoIcon, MapPinIcon, PhoneIcon, ExclamationTriangleIcon, Cog6ToothIcon
} from '@heroicons/react/24/outline';

const daysOfWeek = [
  { id: 0, name: 'E Diel' }, { id: 1, name: 'E Hënë' }, { id: 2, name: 'E Martë' },
  { id: 3, name: 'E Mërkurë' }, { id: 4, name: 'E Enjte' }, { id: 5, name: 'E Premte' },
  { id: 6, name: 'E Shtunë' },
];

const SettingSection = ({ title, description, icon: IconComponent, children }) => (
  <div className="bg-white dark:bg-slate-800 shadow-lg rounded-xl p-5 sm:p-6">
    <div className="flex items-start mb-3">
      {IconComponent && <IconComponent className="h-7 w-7 text-primary-500 dark:text-primary-400 mr-3 mt-1 flex-shrink-0" />}
      <div>
        <h2 className="text-lg sm:text-xl font-semibold text-gray-800 dark:text-white">{title}</h2>
        {description && <p className="text-xs sm:text-sm text-gray-500 dark:text-slate-400 mt-0.5">{description}</p>}
      </div>
    </div>
    <div className="space-y-4">
      {children}
    </div>
  </div>
);

const RestaurantSettingsPage = () => {
  const { user, token, fetchAndSetUser } = useAuth();
  const { currentRestaurantId, currentRestaurantName: nameFromContext } = useOutletContext();
  const { showSuccess, showError } = useNotification();
  
  const initialDetails = {
    name: nameFromContext || '', address: '', phone: '', description: '', 
    main_image_url_placeholder: '', // Kjo do të jetë fusha që backend-i pret për URL-në e imazhit
    deliveryTime: '20-30 min', priceRange: '€€', category_ids: [],
  };
  const initialOpeningHours = daysOfWeek.map(day => ({ 
      day_of_week: day.id, open_time: "09:00", close_time: "22:00", is_closed: day.id === 0 
  }));

  const [details, setDetails] = useState(initialDetails);
  const [openingHours, setOpeningHours] = useState(initialOpeningHours);
  const [allGlobalCategories, setAllGlobalCategories] = useState([]);
  const [imageFile, setImageFile] = useState(null); // Për skedarin e ri të fotos
  const [imagePreview, setImagePreview] = useState('');

  const [isLoading, setIsLoading] = useState({ details: false, hours: false, page: true });
  const [errors, setErrors] = useState({});

  const loadRestaurantData = useCallback(async () => {
    if (!currentRestaurantId || !token) {
        setIsLoading({ details: false, hours: false, page: false });
        setDetails(prev => ({ ...initialDetails, name: nameFromContext || '' }));
        setOpeningHours(initialOpeningHours);
        setImagePreview('');
        return;
    }
    setIsLoading({ details: true, hours: true, page: true });
    setErrors({});
    try {
      const [restaurantData, globalCategoriesData] = await Promise.all([
        restaurantApi.fetchRestaurantDetails(currentRestaurantId), // Token shtohet nga apiService
        restaurantApi.fetchAllRestaurantCategoriesGlobal(), // Token shtohet nga apiService
      ]);

      if (restaurantData) {
        setDetails({
          name: restaurantData.name || nameFromContext || '',
          address: restaurantData.address_details?.street ? `${restaurantData.address_details.street}, ${restaurantData.address_details.city}` : (restaurantData.address || ''), // Supozon se address_details mund të jetë nested ose një string i thjeshtë
          phone: restaurantData.phone_number || '',
          description: restaurantData.description || '',
          main_image_url_placeholder: restaurantData.main_image_url_placeholder || '',
          deliveryTime: restaurantData.delivery_time_estimate || '20-30 min',
          priceRange: restaurantData.price_range || '€€',
          category_ids: restaurantData.cuisine_types ? restaurantData.cuisine_types.map(cat => cat.id) : [],
        });
        setImagePreview(restaurantData.main_image_url_placeholder || '');

        if (restaurantData.operating_hours && restaurantData.operating_hours.length > 0) {
            const fetchedHours = restaurantData.operating_hours;
            const fullHours = daysOfWeek.map(day => {
                const found = fetchedHours.find(h => h.day_of_week === day.id);
                return found 
                    ? { ...found, open_time: found.open_time?.substring(0,5) || "09:00", close_time: found.close_time?.substring(0,5) || "22:00" }
                    : { day_of_week: day.id, open_time: "09:00", close_time: "22:00", is_closed: true };
            });
            setOpeningHours(fullHours);
        } else {
            setOpeningHours(initialOpeningHours);
        }
      }
      setAllGlobalCategories(globalCategoriesData || []);
    } catch (error) {
      showError(error.message || "S'u mund të ngarkoheshin të dhënat.");
    } finally {
      setIsLoading({ details: false, hours: false, page: false });
    }
  }, [currentRestaurantId, token, showError, nameFromContext]);

  useEffect(() => { loadRestaurantData(); }, [loadRestaurantData]);

  const handleDetailChange = (e) => {
    const { name, value } = e.target;
    setDetails(prev => ({ ...prev, [name]: value }));
    if (errors[name]) setErrors(prev => ({ ...prev, [name]: null }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
        setImageFile(file); // Ruaj skedarin
        setImagePreview(URL.createObjectURL(file)); // Trego parapamjen
        setDetails(prev => ({ ...prev, main_image_url_placeholder: ''})); // Pastro URL-në e vjetër nëse ka
    }
  };
  
  const handleCategoryChange = (categoryId) => {
    setDetails(prev => {
        const newCategoryIds = prev.category_ids.includes(categoryId)
            ? prev.category_ids.filter(id => id !== categoryId)
            : [...prev.category_ids, categoryId];
        return {...prev, category_ids: newCategoryIds };
    });
    if(errors.category_ids) setErrors(prev => ({...prev, category_ids: null}));
  };

  const handleHourChange = (index, field, value) => {
    const newHours = [...openingHours];
    newHours[index][field] = field === 'is_closed' ? value : value;
    setOpeningHours(newHours);
  };

  const validateDetails = () => { /* ... mbetet si më parë ... */ 
    const newErrors = {};
    if (!details.name.trim()) newErrors.name = "Emri është i detyrueshëm.";
    if (!details.address.trim()) newErrors.address = "Adresa është e detyrueshme.";
    if (!details.phone.trim()) newErrors.phone = "Telefoni është i detyrueshëm.";
    else if (!/^[0-9\s+\-()]{7,15}$/.test(details.phone)) newErrors.phone = "Formati i telefonit invalid.";
    if(details.category_ids.length === 0) newErrors.category_ids = "Zgjidhni të paktën një kategori."
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSaveDetails = async (e) => {
    e.preventDefault();
    if (!currentRestaurantId || !validateDetails()) return;
    setIsLoading(prev => ({ ...prev, details: true }));
    
    const payload = {
        name: details.name,
        description: details.description,
        phone_number: details.phone, // Sigurohu që emrat e fushave përputhen me serializerin e backend-it
        address_str: details.address, // Nëse backend-i pret adresën si string për ta krijuar/përditësuar
        delivery_time_estimate: details.deliveryTime,
        price_range: details.priceRange,
        cuisine_type_ids: details.category_ids, // Backend-i do të presë ID
        // Për imazhin:
        // Nëse ke një endpoint të veçantë për ngarkim fotosh, thirre atë këtu.
        // Përndryshe, nëse RestaurantDetailSerializer pret URL, dërgo URL-në e re (nëse ka)
        // ose lëre backend-in të ruajë atë ekzistuese.
        // Tani për tani, do të dërgojmë vetëm URL-në placeholder nëse ka ndryshuar.
        main_image_url_placeholder: imageFile ? "DO_TE_NGARKOHET_FOTO_E_RE" : details.main_image_url_placeholder,
    };

    // NËSE DO TË DËRGOSH FOTO ME FORMDATA (DUHET MODIFIKIM I APISERVICE DHE BACKEND)
    // const formDataToSubmit = new FormData();
    // Object.keys(payload).forEach(key => {
    //   if (key === 'cuisine_type_ids') {
    //     payload[key].forEach(id => formDataToSubmit.append('cuisine_types', id)); // DRF pret 'cuisine_types' për M2M
    //   } else {
    //     formDataToSubmit.append(key, payload[key]);
    //   }
    // });
    // if (imageFile) {
    //   formDataToSubmit.append('main_image', imageFile, imageFile.name);
    // }

    try {
      // await restaurantApi.updateRestaurantDetails(currentRestaurantId, formDataToSubmit); // NËSE PËRDOR FORMDATA
      const updatedRestaurant = await restaurantApi.updateRestaurantDetails(currentRestaurantId, payload); // Për JSON Payload
      
      // Rifresko emrin te AuthContext nëse ka ndryshuar
      if(user.ownsRestaurants && user.ownsRestaurants[0].id === currentRestaurantId && nameFromContext !== updatedRestaurant.name){
          await fetchAndSetUser(token); 
      } else {
          // Përditëso state-in lokal me përgjigjen nga API
          setDetails(prev => ({
              ...prev,
              name: updatedRestaurant.name,
              main_image_url_placeholder: updatedRestaurant.main_image_url_placeholder,
              // ...përditëso fushat e tjera sipas nevojës
          }));
          setImagePreview(updatedRestaurant.main_image_url_placeholder || '');
          setImageFile(null); // Pastro skedarin e zgjedhur
      }
      showSuccess('Detajet e restorantit u ruajtën me sukses!');
    } catch (error) {
      showError(error.message || 'Gabim gjatë ruajtjes së detajeve.');
      if(error.response?.data) setErrors(error.response.data); // Shfaq gabimet e fushave nga backend-i
    } finally {
      setIsLoading(prev => ({ ...prev, details: false }));
    }
  };

  const handleSaveHours = async (e) => { /* ... mbetet si më parë ... */ 
    e.preventDefault();
    if (!currentRestaurantId) return;
    setIsLoading(prev => ({ ...prev, hours: true }));
    try {
      const formattedHours = openingHours.map(h => ({
          day_of_week: h.day_of_week,
          open_time: h.is_closed ? null : (h.open_time.includes(':') ? h.open_time : `${h.open_time}:00`),
          close_time: h.is_closed ? null : (h.close_time.includes(':') ? h.close_time : `${h.close_time}:00`),
          is_closed: h.is_closed,
      }));
      // Thirrja e restaurantApi.setOpeningHours tani është mock dhe kthen success direkt.
      // Kur të implementosh endpoint-in real, kjo do të bëjë thirrjen.
      await restaurantApi.setOpeningHours(currentRestaurantId, formattedHours);
      showSuccess('Orari i punës u ruajt me sukses!');
    } catch (error) {
      showError(error.message || 'Gabim gjatë ruajtjes së orarit.');
    } finally {
      setIsLoading(prev => ({ ...prev, hours: false }));
    }
  };

  if (isLoading.page) { /* ... mbetet si më parë ... */ }
  if (!currentRestaurantId && !isLoading.page) { /* ... mbetet si më parë ... */ }

  if (error && !isLoading) {
    return (
        <div className="p-4 bg-red-50 dark:bg-red-900/30 rounded-md text-red-700 dark:text-red-200 flex items-center">
            <ExclamationTriangleIcon className="h-6 w-6 mr-2 flex-shrink-0" />
            <p>{error}</p>
            <Button onClick={fetchRestaurantData} variant="outline" size="sm" className="ml-auto">Provo Përsëri</Button>
        </div>
    );
  }
  
  if (!restaurantData && isLoading) {
    return (
        <div className="flex justify-center items-center py-20">
            <ArrowPathIcon className="h-12 w-12 animate-spin text-primary-500" />
        </div>
    );
  }

  if (!restaurantData && !isLoading) {
     return (
      <div className="p-6 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-yellow-700 dark:text-yellow-200 flex items-center">
        <ExclamationTriangleIcon className="h-6 w-6 mr-3 flex-shrink-0" />
        <p>Nuk u gjetën të dhëna për restorantin. Sigurohuni që keni zgjedhur një restorant.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-3">
        <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 dark:text-white flex items-center">
            <Cog6ToothIcon className="h-7 w-7 mr-2 text-primary-600 dark:text-primary-400" />
            Konfigurimet e Restorantit
        </h1>
         <Button onClick={fetchRestaurantData} variant="outline" iconLeft={ArrowPathIcon} isLoading={isLoading && !!restaurantData} disabled={isLoading && !!restaurantData}>
            Rifresko
        </Button>
      </div>

      {isLoading && !restaurantData && (
         <div className="flex justify-center items-center py-10">
            <ArrowPathIcon className="h-10 w-10 animate-spin text-primary-500" />
         </div>
      )}

      {restaurantData && (
        <form onSubmit={handleSubmit} className="space-y-6">
          <SettingSection title="Informacioni Bazë" description="Emri, përshkrimi dhe detajet e kontaktit." icon={BuildingStorefrontIcon}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-5 gap-y-4">
                <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Emri i Restorantit</label>
                    <input type="text" name="name" id="name" value={details.name} onChange={handleDetailChange} required 
                        className={`input-form mt-1 ${errors.name ? 'input-form-error' : ''}`}/>
                    {errors.name && <p className="input-error-message">{errors.name}</p>}
                </div>
                <div>
                    <label htmlFor="phone" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Numri i Telefonit</label>
                    <input type="tel" name="phone" id="phone" value={details.phone} onChange={handleDetailChange} required
                        className={`input-form mt-1 ${errors.phone ? 'input-form-error' : ''}`} />
                    {errors.phone && <p className="input-error-message">{errors.phone}</p>}
                </div>
            </div>
            <div>
                <label htmlFor="address" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Adresa e Plotë</label>
                <input type="text" name="address" id="address" value={details.address} onChange={handleDetailChange} required
                    className={`input-form mt-1 ${errors.address ? 'input-form-error' : ''}`} 
                    placeholder="P.sh. Rr. Nëna Terezë, Nr. 10, Prishtinë"
                />
                {errors.address && <p className="input-error-message">{errors.address}</p>}
            </div>
            <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Përshkrimi</label>
            <textarea name="description" id="description" value={details.description} onChange={handleDetailChange} rows="3"
                        className="input-form mt-1"></textarea>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">Kategoritë e Kuzhinës</label>
                <div className={`grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 mt-2 p-3 border rounded-md max-h-48 overflow-y-auto custom-scrollbar-thin ${errors.category_ids ? 'border-red-500 dark:border-red-400' : 'border-gray-200 dark:border-slate-600'}`}>
                    {allGlobalCategories.length > 0 ? allGlobalCategories.map(cat => (
                        <label key={cat.id} htmlFor={`cat-settings-${cat.id}`} className="flex items-center space-x-2 p-1.5 rounded-md hover:bg-gray-100 dark:hover:bg-slate-700 cursor-pointer transition-colors">
                            <input type="checkbox" id={`cat-settings-${cat.id}`} name="category_ids" value={cat.id}
                                checked={details.category_ids.includes(cat.id)} onChange={() => handleCategoryChange(cat.id)}
                                className="h-4 w-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500" />
                            <span className="text-xs sm:text-sm text-gray-700 dark:text-slate-200">{cat.name}</span>
                        </label>
                    )) : <p className="text-xs text-gray-500 dark:text-slate-400 col-span-full text-center italic">Nuk ka kategori globale të definuara.</p>}
                </div>
                {errors.category_ids && <p className="input-error-message mt-1">{errors.category_ids}</p>}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-5 gap-y-4">
                <div>
                    <label htmlFor="deliveryTime" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Koha e Dërgesës</label>
                    <select name="deliveryTime" id="deliveryTime" value={details.deliveryTime} onChange={handleDetailChange} className="input-form mt-1">
                        <option value="10-20 min">10-20 min</option> <option value="20-30 min">20-30 min</option>
                        <option value="30-45 min">30-45 min</option> <option value="45-60 min">45-60 min</option> <option value="60-90 min">60-90 min</option>
                    </select>
                </div>
                <div>
                    <label htmlFor="priceRange" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Gama e Çmimeve</label>
                    <select name="priceRange" id="priceRange" value={details.priceRange} onChange={handleDetailChange} className="input-form mt-1">
                        <option value="€">€ (Lirë)</option> <option value="€€">€€ (Mesatare)</option> <option value="€€€">€€€ (Shtrenjtë)</option> <option value="€€€€">€€€€ (Shumë Shtrenjtë)</option>
                    </select>
                </div>
            </div>
            
            <div>
                <label htmlFor="imageFileDetails" className="block text-sm font-medium text-gray-700 dark:text-slate-300">Foto Kryesore e Restorantit</label>
                <input type="file" name="imageFileDetails" id="imageFileDetails" accept="image/*" onChange={handleImageChange}
                    className="input-form file:mr-4 file:py-1.5 file:px-3 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary-50 dark:file:bg-slate-600 file:text-primary-700 dark:file:text-primary-300 hover:file:bg-primary-100 dark:hover:file:bg-slate-500 cursor-pointer"/>
                {imagePreview && <img src={imagePreview} alt="Parapamje" className="mt-3 h-32 w-auto rounded-lg shadow-md object-cover border border-gray-200 dark:border-slate-600"/>}
            </div>

            <div className="pt-3 flex justify-end">
            <Button type="submit" variant="primary" isLoading={isLoading.details} disabled={isLoading.details || isLoading.page}>Ruaj Detajet</Button>
            </div>
          </SettingSection>

          <SettingSection title="Orari i Punës" description="Specifikoni orarin e hapjes dhe mbylljes për çdo ditë." icon={ClockIcon}>
            <div className="space-y-3">
            {openingHours.map((day, index) => (
                <div key={day.day_of_week} className="grid grid-cols-1 sm:grid-cols-4 items-center gap-x-3 gap-y-2 p-2 sm:p-3 border border-gray-200 dark:border-slate-600 rounded-md hover:shadow-sm transition-shadow">
                <label htmlFor={`day-${day.day_of_week}-name`} className="text-sm font-medium text-gray-700 dark:text-slate-300 sm:col-span-1">{daysOfWeek.find(d => d.id === day.day_of_week)?.name}</label>
                <div className="sm:col-span-1">
                    <input type="time" id={`open-${day.day_of_week}`} value={day.is_closed ? '' : day.open_time} disabled={day.is_closed} onChange={(e) => handleHourChange(index, 'open_time', e.target.value)} className={`input-form text-sm ${day.is_closed ? 'input-disabled' : ''}`} />
                </div>
                <div className="sm:col-span-1">
                    <input type="time" id={`close-${day.day_of_week}`} value={day.is_closed ? '' : day.close_time} disabled={day.is_closed} onChange={(e) => handleHourChange(index, 'close_time', e.target.value)} className={`input-form text-sm ${day.is_closed ? 'input-disabled' : ''}`} />
                </div>
                <div className="sm:col-span-1 flex items-center justify-start sm:justify-end">
                    <input type="checkbox" id={`closed-${day.day_of_week}`} checked={day.is_closed} onChange={(e) => handleHourChange(index, 'is_closed', e.target.checked)} className="h-4 w-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500"/>
                    <label htmlFor={`closed-${day.day_of_week}`} className="ml-2 text-sm text-gray-700 dark:text-slate-300">Mbyllur</label>
                </div>
                </div>
            ))}
            </div>
            <div className="pt-3 flex justify-end">
            <Button type="submit" variant="primary" isLoading={isLoading.hours} disabled={isLoading.hours || isLoading.page}>Ruaj Orarin</Button>
            </div>
          </SettingSection>
        </form>
      )}
    </div>
  );
};

export default RestaurantSettingsPage;

// End of File: src/modules/restaurant/pages/RestaurantSettingsPage.jsx
//--------------------------------------------------

// File: src/modules/restaurant/routes.jsx

// src/modules/restaurant/routes.jsx
import React from 'react';
import { Route } from 'react-router-dom'; // Route është OK

// Importo faqet e Restaurant Owner
import OverviewPage from './pages/Overview.jsx';
import ManageOrdersPage from './pages/ManageOrdersPage.jsx';
import MenuManagementPage from './pages/MenuManagementPage.jsx';
import RestaurantSettingsPage from './pages/RestaurantSettingsPage.jsx';
import CustomerReviewsPage from './pages/CustomerReviewsPage.jsx';
import AnalyticsPage from './pages/AnalyticsPage.jsx';
// import RestaurantOwnerLayout dhe ProtectedRoute NUK duhen këtu

const RestaurantOwnerRoutes = [
  // Këto rrugë do të jenë relative ndaj path-it prind ("/restaurant")
  <Route key="ro-overview-index" index element={<OverviewPage />} />,
  <Route key="ro-overview-path" path="overview" element={<OverviewPage />} />,
  <Route key="ro-dashboard-alias" path="dashboard" element={<OverviewPage />} />,
  <Route key="ro-orders" path="orders" element={<ManageOrdersPage />} />,
  <Route key="ro-menu" path="menu" element={<MenuManagementPage />} />,
  <Route key="ro-settings" path="settings" element={<RestaurantSettingsPage />} />,
  <Route key="ro-reviews" path="reviews" element={<CustomerReviewsPage />} />,
  <Route key="ro-analytics" path="analytics" element={<AnalyticsPage />} />,
  // <Route key="ro-not-found" path="*" element={<Navigate to="overview" replace />} />,
];

export default RestaurantOwnerRoutes;

// End of File: src/modules/restaurant/routes.jsx
//--------------------------------------------------

// File: src/routes/AppRoutes.jsx

// src/routes/AppRoutes.jsx
import React, { Suspense, lazy } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import ProtectedRoute from '../components/ProtectedRoute.jsx';
import LoadingFallback from '../components/LoadingFallback.jsx'; // Keep this import

// Layouts
const AuthLayout = lazy(() => import('../layouts/AuthLayout.jsx'));
const CustomerLayout = lazy(() => import('../layouts/CustomerLayout.jsx'));
const RestaurantOwnerLayout = lazy(() => import('../layouts/RestaurantOwnerLayout.jsx'));
const DriverLayout = lazy(() => import('../layouts/DriverLayout.jsx'));
const AdminLayout = lazy(() => import('../layouts/AdminLayout.jsx'));

// --- Auth Pages ---
const LoginPage = lazy(() => import('../modules/auth/pages/Login.jsx'));
const RegisterPage = lazy(() => import('../modules/auth/pages/RegisterPage.jsx'));
const AdminLoginPage = lazy(() => import('../modules/auth/pages/AdminLoginPage.jsx'));


// --- Customer Pages ---
const RestaurantListPage = lazy(() => import('../modules/customer/pages/RestaurantListPage.jsx'));
const RestaurantDetailPage = lazy(() => import('../modules/customer/pages/RestaurantDetailPage.jsx'));
const CheckoutPage = lazy(() => import('../modules/customer/pages/CheckoutPage.jsx')); // Keep if directly used, or ensure CustomerRoutesArray covers it
const OrderConfirmationPage = lazy(() => import('../modules/customer/pages/OrderConfirmationPage.jsx')); // Keep if directly used


// --- Driver/Courier Pages ---
const DriverDashboardPage = lazy(() => import('../modules/courier/pages/DriverDashboardPage.jsx'));


// --- Import Arrays of Routes from Modules ---
// Ensure these files exist and export arrays of <Route> elements
import AdminRoutesArray from '../modules/admin/routes.jsx';
import RestaurantOwnerRoutesArray from '../modules/restaurant/routes.jsx';
import CustomerRoutesArray from '../modules/customer/routes.jsx';

const AppRouter = () => {
  return (
    <Suspense fallback={<LoadingFallback />}>
      <Routes>
        {/* Auth Routes */}
        <Route path="/auth" element={<AuthLayout />}>
          <Route path="login" element={<LoginPage />} />
          <Route path="register" element={<RegisterPage />} />
          <Route path="admin-login" element={<AdminLoginPage />} />
          <Route index element={<Navigate to="login" replace />} />
        </Route>

        {/* Customer Routes */}
        <Route
          path="/customer"
          element={
            <ProtectedRoute roles={['CUSTOMER', 'ADMIN']} redirectPath="/auth/login">
              <CustomerLayout />
            </ProtectedRoute>
          }
        >
          {CustomerRoutesArray}
        </Route>

        {/* Restaurant Owner Routes */}
        <Route
          path="/restaurant"
          element={
            <ProtectedRoute roles={['RESTAURANT_OWNER', 'ADMIN']} redirectPath="/auth/login">
              <RestaurantOwnerLayout />
            </ProtectedRoute>
          }
        >
          {RestaurantOwnerRoutesArray}
        </Route>

        {/* Driver/Courier Routes */}
        <Route
          path="/driver"
          element={
            <ProtectedRoute roles={['DRIVER', 'DELIVERY_PERSONNEL', 'ADMIN']} redirectPath="/auth/login">
              <DriverLayout />
            </ProtectedRoute>
          }
        >
          {/* Define specific driver routes here if not in an array */}
          <Route path="dashboard" element={<DriverDashboardPage />} />
          <Route index element={<Navigate to="dashboard" replace />} />
        </Route>

        {/* Admin Routes */}
        <Route
          path="/admin"
          element={
            <ProtectedRoute roles={['ADMIN']} redirectPath="/auth/admin-login">
              <AdminLayout />
            </ProtectedRoute>
          }
        >
          {AdminRoutesArray}
        </Route>

        {/* Default route */}
        {/* Consider what the true default path should be. If it's for customers, this is fine.
            If it depends on role after login, Login.jsx handles that.
            This redirect primarily handles unauthenticated users hitting the root path.
        */}
        <Route path="/" element={<Navigate to="/customer/restaurants" replace />} /> 
        
        {/* Fallback 404 Page - Consider creating a dedicated 404 component */}
        <Route
          path="*"
          element={
            <div className="flex flex-col items-center justify-center h-screen text-center bg-gray-100 dark:bg-slate-900">
              <h1 className="text-6xl font-bold text-primary-500">404</h1>
              <p className="text-2xl font-medium text-gray-700 dark:text-slate-300 mt-4">Faqja nuk u gjet</p>
              <p className="text-gray-500 dark:text-slate-400 mt-2">Na vjen keq, faqja që po kërkoni nuk ekziston.</p>
              {/* You can add a Link component here to navigate back to home if needed */}
              {/* <RouterLink to="/" className="mt-6 px-4 py-2 bg-primary-500 text-white rounded hover:bg-primary-600">Kthehu te Kryefaqja</RouterLink> */}
            </div>
          }
        />
      </Routes>
    </Suspense>
  );
};

export default AppRouter;

// End of File: src/routes/AppRoutes.jsx
//--------------------------------------------------

